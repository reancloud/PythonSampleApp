# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvResource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'resource_name': 'str',
        'connection_id': 'int',
        'attributes': 'list[EnvResourceAttr]',
        'packages': 'list[EnvPackage]',
        'environment': 'Environment',
        'count': 'str',
        'depends_on': 'str',
        'prevent_destroy': 'bool',
        'resource_type': 'str',
        'ignore_changes': 'str',
        'ref_env_resource_id': 'int',
        'short_name': 'str',
        'custom_connection': 'str',
        'position_x': 'int',
        'position_y': 'int',
        'accept_packages': 'bool',
        'count_support': 'bool',
        'lifecycle_support': 'bool',
        'data_source': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'resource_name': 'resourceName',
        'connection_id': 'connectionId',
        'attributes': 'attributes',
        'packages': 'packages',
        'environment': 'environment',
        'count': 'count',
        'depends_on': 'dependsOn',
        'prevent_destroy': 'preventDestroy',
        'resource_type': 'resourceType',
        'ignore_changes': 'ignoreChanges',
        'ref_env_resource_id': 'refEnvResourceId',
        'short_name': 'shortName',
        'custom_connection': 'customConnection',
        'position_x': 'positionX',
        'position_y': 'positionY',
        'accept_packages': 'acceptPackages',
        'count_support': 'countSupport',
        'lifecycle_support': 'lifecycleSupport',
        'data_source': 'dataSource'
    }

    def __init__(self, id=None, name=None, resource_name=None, connection_id=None, attributes=None, packages=None, environment=None, count=None, depends_on=None, prevent_destroy=None, resource_type=None, ignore_changes=None, ref_env_resource_id=None, short_name=None, custom_connection=None, position_x=None, position_y=None, accept_packages=None, count_support=None, lifecycle_support=None, data_source=None):
        """
        EnvResource - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._resource_name = None
        self._connection_id = None
        self._attributes = None
        self._packages = None
        self._environment = None
        self._count = None
        self._depends_on = None
        self._prevent_destroy = None
        self._resource_type = None
        self._ignore_changes = None
        self._ref_env_resource_id = None
        self._short_name = None
        self._custom_connection = None
        self._position_x = None
        self._position_y = None
        self._accept_packages = None
        self._count_support = None
        self._lifecycle_support = None
        self._data_source = None

        if id is not None:
          self.id = id
        self.name = name
        self.resource_name = resource_name
        if connection_id is not None:
          self.connection_id = connection_id
        if attributes is not None:
          self.attributes = attributes
        if packages is not None:
          self.packages = packages
        if environment is not None:
          self.environment = environment
        if count is not None:
          self.count = count
        if depends_on is not None:
          self.depends_on = depends_on
        if prevent_destroy is not None:
          self.prevent_destroy = prevent_destroy
        self.resource_type = resource_type
        if ignore_changes is not None:
          self.ignore_changes = ignore_changes
        if ref_env_resource_id is not None:
          self.ref_env_resource_id = ref_env_resource_id
        if short_name is not None:
          self.short_name = short_name
        if custom_connection is not None:
          self.custom_connection = custom_connection
        if position_x is not None:
          self.position_x = position_x
        if position_y is not None:
          self.position_y = position_y
        if accept_packages is not None:
          self.accept_packages = accept_packages
        if count_support is not None:
          self.count_support = count_support
        if lifecycle_support is not None:
          self.lifecycle_support = lifecycle_support
        if data_source is not None:
          self.data_source = data_source

    @property
    def id(self):
        """
        Gets the id of this EnvResource.

        :return: The id of this EnvResource.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EnvResource.

        :param id: The id of this EnvResource.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EnvResource.
        Name of the resource in an environment

        :return: The name of this EnvResource.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnvResource.
        Name of the resource in an environment

        :param name: The name of this EnvResource.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def resource_name(self):
        """
        Gets the resource_name of this EnvResource.
        Name of the resource defined by Terraform

        :return: The resource_name of this EnvResource.
        :rtype: str
        """
        return self._resource_name

    @resource_name.setter
    def resource_name(self, resource_name):
        """
        Sets the resource_name of this EnvResource.
        Name of the resource defined by Terraform

        :param resource_name: The resource_name of this EnvResource.
        :type: str
        """
        if resource_name is None:
            raise ValueError("Invalid value for `resource_name`, must not be `None`")

        self._resource_name = resource_name

    @property
    def connection_id(self):
        """
        Gets the connection_id of this EnvResource.
        Connection ID

        :return: The connection_id of this EnvResource.
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """
        Sets the connection_id of this EnvResource.
        Connection ID

        :param connection_id: The connection_id of this EnvResource.
        :type: int
        """

        self._connection_id = connection_id

    @property
    def attributes(self):
        """
        Gets the attributes of this EnvResource.
        Attributes for the resource. Possible attribute name and type for resource should be fetched by resource API

        :return: The attributes of this EnvResource.
        :rtype: list[EnvResourceAttr]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this EnvResource.
        Attributes for the resource. Possible attribute name and type for resource should be fetched by resource API

        :param attributes: The attributes of this EnvResource.
        :type: list[EnvResourceAttr]
        """

        self._attributes = attributes

    @property
    def packages(self):
        """
        Gets the packages of this EnvResource.
        Packages for the environment resource. Possible package name and package attributes for resource should be fetched by package API

        :return: The packages of this EnvResource.
        :rtype: list[EnvPackage]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """
        Sets the packages of this EnvResource.
        Packages for the environment resource. Possible package name and package attributes for resource should be fetched by package API

        :param packages: The packages of this EnvResource.
        :type: list[EnvPackage]
        """

        self._packages = packages

    @property
    def environment(self):
        """
        Gets the environment of this EnvResource.

        :return: The environment of this EnvResource.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this EnvResource.

        :param environment: The environment of this EnvResource.
        :type: Environment
        """

        self._environment = environment

    @property
    def count(self):
        """
        Gets the count of this EnvResource.

        :return: The count of this EnvResource.
        :rtype: str
        """
        return self._count

    @count.setter
    def count(self, count):
        """
        Sets the count of this EnvResource.

        :param count: The count of this EnvResource.
        :type: str
        """

        self._count = count

    @property
    def depends_on(self):
        """
        Gets the depends_on of this EnvResource.
        Name of the other resource in same environment which should get deployed before the current resource

        :return: The depends_on of this EnvResource.
        :rtype: str
        """
        return self._depends_on

    @depends_on.setter
    def depends_on(self, depends_on):
        """
        Sets the depends_on of this EnvResource.
        Name of the other resource in same environment which should get deployed before the current resource

        :param depends_on: The depends_on of this EnvResource.
        :type: str
        """

        self._depends_on = depends_on

    @property
    def prevent_destroy(self):
        """
        Gets the prevent_destroy of this EnvResource.
        Flag for preventing the resource to be destroy

        :return: The prevent_destroy of this EnvResource.
        :rtype: bool
        """
        return self._prevent_destroy

    @prevent_destroy.setter
    def prevent_destroy(self, prevent_destroy):
        """
        Sets the prevent_destroy of this EnvResource.
        Flag for preventing the resource to be destroy

        :param prevent_destroy: The prevent_destroy of this EnvResource.
        :type: bool
        """

        self._prevent_destroy = prevent_destroy

    @property
    def resource_type(self):
        """
        Gets the resource_type of this EnvResource.
        Resource type

        :return: The resource_type of this EnvResource.
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """
        Sets the resource_type of this EnvResource.
        Resource type

        :param resource_type: The resource_type of this EnvResource.
        :type: str
        """
        if resource_type is None:
            raise ValueError("Invalid value for `resource_type`, must not be `None`")
        allowed_values = ["RESOURCE", "DATA_SOURCE"]
        if resource_type not in allowed_values:
            raise ValueError(
                "Invalid value for `resource_type` ({0}), must be one of {1}"
                .format(resource_type, allowed_values)
            )

        self._resource_type = resource_type

    @property
    def ignore_changes(self):
        """
        Gets the ignore_changes of this EnvResource.

        :return: The ignore_changes of this EnvResource.
        :rtype: str
        """
        return self._ignore_changes

    @ignore_changes.setter
    def ignore_changes(self, ignore_changes):
        """
        Sets the ignore_changes of this EnvResource.

        :param ignore_changes: The ignore_changes of this EnvResource.
        :type: str
        """

        self._ignore_changes = ignore_changes

    @property
    def ref_env_resource_id(self):
        """
        Gets the ref_env_resource_id of this EnvResource.
        The resource ID from which this environment resource is copied.It is set only when copy API is used to create current environment

        :return: The ref_env_resource_id of this EnvResource.
        :rtype: int
        """
        return self._ref_env_resource_id

    @ref_env_resource_id.setter
    def ref_env_resource_id(self, ref_env_resource_id):
        """
        Sets the ref_env_resource_id of this EnvResource.
        The resource ID from which this environment resource is copied.It is set only when copy API is used to create current environment

        :param ref_env_resource_id: The ref_env_resource_id of this EnvResource.
        :type: int
        """

        self._ref_env_resource_id = ref_env_resource_id

    @property
    def short_name(self):
        """
        Gets the short_name of this EnvResource.

        :return: The short_name of this EnvResource.
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """
        Sets the short_name of this EnvResource.

        :param short_name: The short_name of this EnvResource.
        :type: str
        """

        self._short_name = short_name

    @property
    def custom_connection(self):
        """
        Gets the custom_connection of this EnvResource.
        Custom Connection to use for provisioning

        :return: The custom_connection of this EnvResource.
        :rtype: str
        """
        return self._custom_connection

    @custom_connection.setter
    def custom_connection(self, custom_connection):
        """
        Sets the custom_connection of this EnvResource.
        Custom Connection to use for provisioning

        :param custom_connection: The custom_connection of this EnvResource.
        :type: str
        """

        self._custom_connection = custom_connection

    @property
    def position_x(self):
        """
        Gets the position_x of this EnvResource.
        Position X on the canvas to display in UI.Can be set to zero if you want to use only API

        :return: The position_x of this EnvResource.
        :rtype: int
        """
        return self._position_x

    @position_x.setter
    def position_x(self, position_x):
        """
        Sets the position_x of this EnvResource.
        Position X on the canvas to display in UI.Can be set to zero if you want to use only API

        :param position_x: The position_x of this EnvResource.
        :type: int
        """

        self._position_x = position_x

    @property
    def position_y(self):
        """
        Gets the position_y of this EnvResource.
        Position Y on the canvas to display in UI.Can be set to zero if you want to use only API

        :return: The position_y of this EnvResource.
        :rtype: int
        """
        return self._position_y

    @position_y.setter
    def position_y(self, position_y):
        """
        Sets the position_y of this EnvResource.
        Position Y on the canvas to display in UI.Can be set to zero if you want to use only API

        :param position_y: The position_y of this EnvResource.
        :type: int
        """

        self._position_y = position_y

    @property
    def accept_packages(self):
        """
        Gets the accept_packages of this EnvResource.
        Not all resources can accept packages. Only a few resources like AWS instance, Null resource can accept packages

        :return: The accept_packages of this EnvResource.
        :rtype: bool
        """
        return self._accept_packages

    @accept_packages.setter
    def accept_packages(self, accept_packages):
        """
        Sets the accept_packages of this EnvResource.
        Not all resources can accept packages. Only a few resources like AWS instance, Null resource can accept packages

        :param accept_packages: The accept_packages of this EnvResource.
        :type: bool
        """

        self._accept_packages = accept_packages

    @property
    def count_support(self):
        """
        Gets the count_support of this EnvResource.

        :return: The count_support of this EnvResource.
        :rtype: bool
        """
        return self._count_support

    @count_support.setter
    def count_support(self, count_support):
        """
        Sets the count_support of this EnvResource.

        :param count_support: The count_support of this EnvResource.
        :type: bool
        """

        self._count_support = count_support

    @property
    def lifecycle_support(self):
        """
        Gets the lifecycle_support of this EnvResource.

        :return: The lifecycle_support of this EnvResource.
        :rtype: bool
        """
        return self._lifecycle_support

    @lifecycle_support.setter
    def lifecycle_support(self, lifecycle_support):
        """
        Sets the lifecycle_support of this EnvResource.

        :param lifecycle_support: The lifecycle_support of this EnvResource.
        :type: bool
        """

        self._lifecycle_support = lifecycle_support

    @property
    def data_source(self):
        """
        Gets the data_source of this EnvResource.

        :return: The data_source of this EnvResource.
        :rtype: bool
        """
        return self._data_source

    @data_source.setter
    def data_source(self, data_source):
        """
        Sets the data_source of this EnvResource.

        :param data_source: The data_source of this EnvResource.
        :type: bool
        """

        self._data_source = data_source

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvResource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
