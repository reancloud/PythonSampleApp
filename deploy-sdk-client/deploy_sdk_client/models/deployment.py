# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Deployment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_by': 'int',
        'modified_by': 'int',
        'created_on': 'date',
        'modified_on': 'date',
        'deployment_name': 'str',
        'deployment_description': 'str',
        'environment': 'Environment',
        'input_json': 'str',
        'tf_run_id': 'str',
        'status': 'str',
        'destroy_after_minutes': 'int',
        'email_to_notify': 'str',
        'deploy_mail_template_name': 'str',
        'destroy_mail_template_name': 'str',
        'destroy_failed_mail_template_name': 'str',
        'email_for_status': 'str',
        'destroy_token': 'str',
        'deploy_parent_environments': 'bool',
        'retries_remaining': 'int',
        'statuses_for_emails': 'str',
        'connections_map': 'dict(str, str)',
        'connections_deploy': 'str',
        'parent_deployments_map': 'dict(str, str)',
        'parent_deployments': 'str',
        'provider': 'str',
        'region': 'str',
        'statuses_for_email_set': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'deployment_name': 'deploymentName',
        'deployment_description': 'deploymentDescription',
        'environment': 'environment',
        'input_json': 'inputJson',
        'tf_run_id': 'tfRunId',
        'status': 'status',
        'destroy_after_minutes': 'destroyAfterMinutes',
        'email_to_notify': 'emailToNotify',
        'deploy_mail_template_name': 'deployMailTemplateName',
        'destroy_mail_template_name': 'destroyMailTemplateName',
        'destroy_failed_mail_template_name': 'destroyFailedMailTemplateName',
        'email_for_status': 'emailForStatus',
        'destroy_token': 'destroyToken',
        'deploy_parent_environments': 'deployParentEnvironments',
        'retries_remaining': 'retriesRemaining',
        'statuses_for_emails': 'statusesForEmails',
        'connections_map': 'connectionsMap',
        'connections_deploy': 'connectionsDeploy',
        'parent_deployments_map': 'parentDeploymentsMap',
        'parent_deployments': 'parentDeployments',
        'provider': 'provider',
        'region': 'region',
        'statuses_for_email_set': 'statusesForEmailSet'
    }

    def __init__(self, id=None, created_by=None, modified_by=None, created_on=None, modified_on=None, deployment_name=None, deployment_description=None, environment=None, input_json=None, tf_run_id=None, status=None, destroy_after_minutes=None, email_to_notify=None, deploy_mail_template_name=None, destroy_mail_template_name=None, destroy_failed_mail_template_name=None, email_for_status=None, destroy_token=None, deploy_parent_environments=None, retries_remaining=None, statuses_for_emails=None, connections_map=None, connections_deploy=None, parent_deployments_map=None, parent_deployments=None, provider=None, region=None, statuses_for_email_set=None):
        """
        Deployment - a model defined in Swagger
        """

        self._id = None
        self._created_by = None
        self._modified_by = None
        self._created_on = None
        self._modified_on = None
        self._deployment_name = None
        self._deployment_description = None
        self._environment = None
        self._input_json = None
        self._tf_run_id = None
        self._status = None
        self._destroy_after_minutes = None
        self._email_to_notify = None
        self._deploy_mail_template_name = None
        self._destroy_mail_template_name = None
        self._destroy_failed_mail_template_name = None
        self._email_for_status = None
        self._destroy_token = None
        self._deploy_parent_environments = None
        self._retries_remaining = None
        self._statuses_for_emails = None
        self._connections_map = None
        self._connections_deploy = None
        self._parent_deployments_map = None
        self._parent_deployments = None
        self._provider = None
        self._region = None
        self._statuses_for_email_set = None

        if id is not None:
          self.id = id
        if created_by is not None:
          self.created_by = created_by
        if modified_by is not None:
          self.modified_by = modified_by
        if created_on is not None:
          self.created_on = created_on
        if modified_on is not None:
          self.modified_on = modified_on
        self.deployment_name = deployment_name
        if deployment_description is not None:
          self.deployment_description = deployment_description
        if environment is not None:
          self.environment = environment
        if input_json is not None:
          self.input_json = input_json
        if tf_run_id is not None:
          self.tf_run_id = tf_run_id
        if status is not None:
          self.status = status
        if destroy_after_minutes is not None:
          self.destroy_after_minutes = destroy_after_minutes
        if email_to_notify is not None:
          self.email_to_notify = email_to_notify
        if deploy_mail_template_name is not None:
          self.deploy_mail_template_name = deploy_mail_template_name
        if destroy_mail_template_name is not None:
          self.destroy_mail_template_name = destroy_mail_template_name
        if destroy_failed_mail_template_name is not None:
          self.destroy_failed_mail_template_name = destroy_failed_mail_template_name
        if email_for_status is not None:
          self.email_for_status = email_for_status
        if destroy_token is not None:
          self.destroy_token = destroy_token
        if deploy_parent_environments is not None:
          self.deploy_parent_environments = deploy_parent_environments
        if retries_remaining is not None:
          self.retries_remaining = retries_remaining
        if statuses_for_emails is not None:
          self.statuses_for_emails = statuses_for_emails
        if connections_map is not None:
          self.connections_map = connections_map
        if connections_deploy is not None:
          self.connections_deploy = connections_deploy
        if parent_deployments_map is not None:
          self.parent_deployments_map = parent_deployments_map
        if parent_deployments is not None:
          self.parent_deployments = parent_deployments
        if provider is not None:
          self.provider = provider
        if region is not None:
          self.region = region
        if statuses_for_email_set is not None:
          self.statuses_for_email_set = statuses_for_email_set

    @property
    def id(self):
        """
        Gets the id of this Deployment.

        :return: The id of this Deployment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Deployment.

        :param id: The id of this Deployment.
        :type: int
        """

        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this Deployment.
        Created By User(Id)

        :return: The created_by of this Deployment.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Deployment.
        Created By User(Id)

        :param created_by: The created_by of this Deployment.
        :type: int
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """
        Gets the modified_by of this Deployment.
        Modified By User(Id)

        :return: The modified_by of this Deployment.
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this Deployment.
        Modified By User(Id)

        :param modified_by: The modified_by of this Deployment.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def created_on(self):
        """
        Gets the created_on of this Deployment.
        Created at Date Time

        :return: The created_on of this Deployment.
        :rtype: date
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Deployment.
        Created at Date Time

        :param created_on: The created_on of this Deployment.
        :type: date
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """
        Gets the modified_on of this Deployment.
        Modified at Date Time

        :return: The modified_on of this Deployment.
        :rtype: date
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this Deployment.
        Modified at Date Time

        :param modified_on: The modified_on of this Deployment.
        :type: date
        """

        self._modified_on = modified_on

    @property
    def deployment_name(self):
        """
        Gets the deployment_name of this Deployment.
        Name of the deployment. Unique for each environment

        :return: The deployment_name of this Deployment.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """
        Sets the deployment_name of this Deployment.
        Name of the deployment. Unique for each environment

        :param deployment_name: The deployment_name of this Deployment.
        :type: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")

        self._deployment_name = deployment_name

    @property
    def deployment_description(self):
        """
        Gets the deployment_description of this Deployment.
        Description of the deployment

        :return: The deployment_description of this Deployment.
        :rtype: str
        """
        return self._deployment_description

    @deployment_description.setter
    def deployment_description(self, deployment_description):
        """
        Sets the deployment_description of this Deployment.
        Description of the deployment

        :param deployment_description: The deployment_description of this Deployment.
        :type: str
        """

        self._deployment_description = deployment_description

    @property
    def environment(self):
        """
        Gets the environment of this Deployment.

        :return: The environment of this Deployment.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this Deployment.

        :param environment: The environment of this Deployment.
        :type: Environment
        """

        self._environment = environment

    @property
    def input_json(self):
        """
        Gets the input_json of this Deployment.
        Input variables JSON

        :return: The input_json of this Deployment.
        :rtype: str
        """
        return self._input_json

    @input_json.setter
    def input_json(self, input_json):
        """
        Sets the input_json of this Deployment.
        Input variables JSON

        :param input_json: The input_json of this Deployment.
        :type: str
        """

        self._input_json = input_json

    @property
    def tf_run_id(self):
        """
        Gets the tf_run_id of this Deployment.
        Terraform execution id

        :return: The tf_run_id of this Deployment.
        :rtype: str
        """
        return self._tf_run_id

    @tf_run_id.setter
    def tf_run_id(self, tf_run_id):
        """
        Sets the tf_run_id of this Deployment.
        Terraform execution id

        :param tf_run_id: The tf_run_id of this Deployment.
        :type: str
        """

        self._tf_run_id = tf_run_id

    @property
    def status(self):
        """
        Gets the status of this Deployment.
        Status of deployment

        :return: The status of this Deployment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Deployment.
        Status of deployment

        :param status: The status of this Deployment.
        :type: str
        """

        self._status = status

    @property
    def destroy_after_minutes(self):
        """
        Gets the destroy_after_minutes of this Deployment.
        A value in minutes to Automatically destroy deployment after a specified time

        :return: The destroy_after_minutes of this Deployment.
        :rtype: int
        """
        return self._destroy_after_minutes

    @destroy_after_minutes.setter
    def destroy_after_minutes(self, destroy_after_minutes):
        """
        Sets the destroy_after_minutes of this Deployment.
        A value in minutes to Automatically destroy deployment after a specified time

        :param destroy_after_minutes: The destroy_after_minutes of this Deployment.
        :type: int
        """

        self._destroy_after_minutes = destroy_after_minutes

    @property
    def email_to_notify(self):
        """
        Gets the email_to_notify of this Deployment.
        Email to receive notification of deployment status

        :return: The email_to_notify of this Deployment.
        :rtype: str
        """
        return self._email_to_notify

    @email_to_notify.setter
    def email_to_notify(self, email_to_notify):
        """
        Sets the email_to_notify of this Deployment.
        Email to receive notification of deployment status

        :param email_to_notify: The email_to_notify of this Deployment.
        :type: str
        """

        self._email_to_notify = email_to_notify

    @property
    def deploy_mail_template_name(self):
        """
        Gets the deploy_mail_template_name of this Deployment.
        Name of Deploy mail template to receive notification about deployment status on specified mail

        :return: The deploy_mail_template_name of this Deployment.
        :rtype: str
        """
        return self._deploy_mail_template_name

    @deploy_mail_template_name.setter
    def deploy_mail_template_name(self, deploy_mail_template_name):
        """
        Sets the deploy_mail_template_name of this Deployment.
        Name of Deploy mail template to receive notification about deployment status on specified mail

        :param deploy_mail_template_name: The deploy_mail_template_name of this Deployment.
        :type: str
        """

        self._deploy_mail_template_name = deploy_mail_template_name

    @property
    def destroy_mail_template_name(self):
        """
        Gets the destroy_mail_template_name of this Deployment.
        Name of Destroy mail template to receive notification about deployment status on specified mail

        :return: The destroy_mail_template_name of this Deployment.
        :rtype: str
        """
        return self._destroy_mail_template_name

    @destroy_mail_template_name.setter
    def destroy_mail_template_name(self, destroy_mail_template_name):
        """
        Sets the destroy_mail_template_name of this Deployment.
        Name of Destroy mail template to receive notification about deployment status on specified mail

        :param destroy_mail_template_name: The destroy_mail_template_name of this Deployment.
        :type: str
        """

        self._destroy_mail_template_name = destroy_mail_template_name

    @property
    def destroy_failed_mail_template_name(self):
        """
        Gets the destroy_failed_mail_template_name of this Deployment.
        Name of failed destroy mail template

        :return: The destroy_failed_mail_template_name of this Deployment.
        :rtype: str
        """
        return self._destroy_failed_mail_template_name

    @destroy_failed_mail_template_name.setter
    def destroy_failed_mail_template_name(self, destroy_failed_mail_template_name):
        """
        Sets the destroy_failed_mail_template_name of this Deployment.
        Name of failed destroy mail template

        :param destroy_failed_mail_template_name: The destroy_failed_mail_template_name of this Deployment.
        :type: str
        """

        self._destroy_failed_mail_template_name = destroy_failed_mail_template_name

    @property
    def email_for_status(self):
        """
        Gets the email_for_status of this Deployment.
        Email to receive notification of deployment status

        :return: The email_for_status of this Deployment.
        :rtype: str
        """
        return self._email_for_status

    @email_for_status.setter
    def email_for_status(self, email_for_status):
        """
        Sets the email_for_status of this Deployment.
        Email to receive notification of deployment status

        :param email_for_status: The email_for_status of this Deployment.
        :type: str
        """

        self._email_for_status = email_for_status

    @property
    def destroy_token(self):
        """
        Gets the destroy_token of this Deployment.

        :return: The destroy_token of this Deployment.
        :rtype: str
        """
        return self._destroy_token

    @destroy_token.setter
    def destroy_token(self, destroy_token):
        """
        Sets the destroy_token of this Deployment.

        :param destroy_token: The destroy_token of this Deployment.
        :type: str
        """

        self._destroy_token = destroy_token

    @property
    def deploy_parent_environments(self):
        """
        Gets the deploy_parent_environments of this Deployment.
        Flag to deploy Parent environment before the current deployment

        :return: The deploy_parent_environments of this Deployment.
        :rtype: bool
        """
        return self._deploy_parent_environments

    @deploy_parent_environments.setter
    def deploy_parent_environments(self, deploy_parent_environments):
        """
        Sets the deploy_parent_environments of this Deployment.
        Flag to deploy Parent environment before the current deployment

        :param deploy_parent_environments: The deploy_parent_environments of this Deployment.
        :type: bool
        """

        self._deploy_parent_environments = deploy_parent_environments

    @property
    def retries_remaining(self):
        """
        Gets the retries_remaining of this Deployment.

        :return: The retries_remaining of this Deployment.
        :rtype: int
        """
        return self._retries_remaining

    @retries_remaining.setter
    def retries_remaining(self, retries_remaining):
        """
        Sets the retries_remaining of this Deployment.

        :param retries_remaining: The retries_remaining of this Deployment.
        :type: int
        """

        self._retries_remaining = retries_remaining

    @property
    def statuses_for_emails(self):
        """
        Gets the statuses_for_emails of this Deployment.

        :return: The statuses_for_emails of this Deployment.
        :rtype: str
        """
        return self._statuses_for_emails

    @statuses_for_emails.setter
    def statuses_for_emails(self, statuses_for_emails):
        """
        Sets the statuses_for_emails of this Deployment.

        :param statuses_for_emails: The statuses_for_emails of this Deployment.
        :type: str
        """

        self._statuses_for_emails = statuses_for_emails

    @property
    def connections_map(self):
        """
        Gets the connections_map of this Deployment.
        Map of connections where key is the name of resource and value is the name or id of connection

        :return: The connections_map of this Deployment.
        :rtype: dict(str, str)
        """
        return self._connections_map

    @connections_map.setter
    def connections_map(self, connections_map):
        """
        Sets the connections_map of this Deployment.
        Map of connections where key is the name of resource and value is the name or id of connection

        :param connections_map: The connections_map of this Deployment.
        :type: dict(str, str)
        """

        self._connections_map = connections_map

    @property
    def connections_deploy(self):
        """
        Gets the connections_deploy of this Deployment.

        :return: The connections_deploy of this Deployment.
        :rtype: str
        """
        return self._connections_deploy

    @connections_deploy.setter
    def connections_deploy(self, connections_deploy):
        """
        Sets the connections_deploy of this Deployment.

        :param connections_deploy: The connections_deploy of this Deployment.
        :type: str
        """

        self._connections_deploy = connections_deploy

    @property
    def parent_deployments_map(self):
        """
        Gets the parent_deployments_map of this Deployment.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment

        :return: The parent_deployments_map of this Deployment.
        :rtype: dict(str, str)
        """
        return self._parent_deployments_map

    @parent_deployments_map.setter
    def parent_deployments_map(self, parent_deployments_map):
        """
        Sets the parent_deployments_map of this Deployment.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment

        :param parent_deployments_map: The parent_deployments_map of this Deployment.
        :type: dict(str, str)
        """

        self._parent_deployments_map = parent_deployments_map

    @property
    def parent_deployments(self):
        """
        Gets the parent_deployments of this Deployment.

        :return: The parent_deployments of this Deployment.
        :rtype: str
        """
        return self._parent_deployments

    @parent_deployments.setter
    def parent_deployments(self, parent_deployments):
        """
        Sets the parent_deployments of this Deployment.

        :param parent_deployments: The parent_deployments of this Deployment.
        :type: str
        """

        self._parent_deployments = parent_deployments

    @property
    def provider(self):
        """
        Gets the provider of this Deployment.
        Provider for deployment

        :return: The provider of this Deployment.
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this Deployment.
        Provider for deployment

        :param provider: The provider of this Deployment.
        :type: str
        """

        self._provider = provider

    @property
    def region(self):
        """
        Gets the region of this Deployment.
        Region into which resources should be launched. Defaults to set Provider region if any.

        :return: The region of this Deployment.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Deployment.
        Region into which resources should be launched. Defaults to set Provider region if any.

        :param region: The region of this Deployment.
        :type: str
        """

        self._region = region

    @property
    def statuses_for_email_set(self):
        """
        Gets the statuses_for_email_set of this Deployment.

        :return: The statuses_for_email_set of this Deployment.
        :rtype: list[str]
        """
        return self._statuses_for_email_set

    @statuses_for_email_set.setter
    def statuses_for_email_set(self, statuses_for_email_set):
        """
        Sets the statuses_for_email_set of this Deployment.

        :param statuses_for_email_set: The statuses_for_email_set of this Deployment.
        :type: list[str]
        """

        self._statuses_for_email_set = statuses_for_email_set

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Deployment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
