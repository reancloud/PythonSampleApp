# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChefServer(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_by': 'int',
        'modified_by': 'int',
        'created_on': 'date',
        'modified_on': 'date',
        'name': 'str',
        'type': 'str',
        'host_name': 'str',
        'organization': 'str',
        'client': 'str',
        'description': 'str',
        'last_package_sync': 'datetime'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'name': 'name',
        'type': 'type',
        'host_name': 'hostName',
        'organization': 'organization',
        'client': 'client',
        'description': 'description',
        'last_package_sync': 'lastPackageSync'
    }

    def __init__(self, id=None, created_by=None, modified_by=None, created_on=None, modified_on=None, name=None, type=None, host_name=None, organization=None, client=None, description=None, last_package_sync=None):
        """
        ChefServer - a model defined in Swagger
        """

        self._id = None
        self._created_by = None
        self._modified_by = None
        self._created_on = None
        self._modified_on = None
        self._name = None
        self._type = None
        self._host_name = None
        self._organization = None
        self._client = None
        self._description = None
        self._last_package_sync = None

        if id is not None:
          self.id = id
        if created_by is not None:
          self.created_by = created_by
        if modified_by is not None:
          self.modified_by = modified_by
        if created_on is not None:
          self.created_on = created_on
        if modified_on is not None:
          self.modified_on = modified_on
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if host_name is not None:
          self.host_name = host_name
        if organization is not None:
          self.organization = organization
        if client is not None:
          self.client = client
        if description is not None:
          self.description = description
        if last_package_sync is not None:
          self.last_package_sync = last_package_sync

    @property
    def id(self):
        """
        Gets the id of this ChefServer.

        :return: The id of this ChefServer.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this ChefServer.

        :param id: The id of this ChefServer.
        :type: int
        """

        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this ChefServer.
        Created By User(Id)

        :return: The created_by of this ChefServer.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this ChefServer.
        Created By User(Id)

        :param created_by: The created_by of this ChefServer.
        :type: int
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """
        Gets the modified_by of this ChefServer.
        Modified By User(Id)

        :return: The modified_by of this ChefServer.
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this ChefServer.
        Modified By User(Id)

        :param modified_by: The modified_by of this ChefServer.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def created_on(self):
        """
        Gets the created_on of this ChefServer.
        Created at Date Time

        :return: The created_on of this ChefServer.
        :rtype: date
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this ChefServer.
        Created at Date Time

        :param created_on: The created_on of this ChefServer.
        :type: date
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """
        Gets the modified_on of this ChefServer.
        Modified at Date Time

        :return: The modified_on of this ChefServer.
        :rtype: date
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this ChefServer.
        Modified at Date Time

        :param modified_on: The modified_on of this ChefServer.
        :type: date
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """
        Gets the name of this ChefServer.

        :return: The name of this ChefServer.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChefServer.

        :param name: The name of this ChefServer.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this ChefServer.

        :return: The type of this ChefServer.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ChefServer.

        :param type: The type of this ChefServer.
        :type: str
        """
        allowed_values = ["CHEF", "OPSWORKS", "ENTERPRISE_CHEF"]
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def host_name(self):
        """
        Gets the host_name of this ChefServer.

        :return: The host_name of this ChefServer.
        :rtype: str
        """
        return self._host_name

    @host_name.setter
    def host_name(self, host_name):
        """
        Sets the host_name of this ChefServer.

        :param host_name: The host_name of this ChefServer.
        :type: str
        """

        self._host_name = host_name

    @property
    def organization(self):
        """
        Gets the organization of this ChefServer.

        :return: The organization of this ChefServer.
        :rtype: str
        """
        return self._organization

    @organization.setter
    def organization(self, organization):
        """
        Sets the organization of this ChefServer.

        :param organization: The organization of this ChefServer.
        :type: str
        """

        self._organization = organization

    @property
    def client(self):
        """
        Gets the client of this ChefServer.

        :return: The client of this ChefServer.
        :rtype: str
        """
        return self._client

    @client.setter
    def client(self, client):
        """
        Sets the client of this ChefServer.

        :param client: The client of this ChefServer.
        :type: str
        """

        self._client = client

    @property
    def description(self):
        """
        Gets the description of this ChefServer.

        :return: The description of this ChefServer.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ChefServer.

        :param description: The description of this ChefServer.
        :type: str
        """

        self._description = description

    @property
    def last_package_sync(self):
        """
        Gets the last_package_sync of this ChefServer.

        :return: The last_package_sync of this ChefServer.
        :rtype: datetime
        """
        return self._last_package_sync

    @last_package_sync.setter
    def last_package_sync(self, last_package_sync):
        """
        Sets the last_package_sync of this ChefServer.

        :param last_package_sync: The last_package_sync of this ChefServer.
        :type: datetime
        """

        self._last_package_sync = last_package_sync

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChefServer):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
