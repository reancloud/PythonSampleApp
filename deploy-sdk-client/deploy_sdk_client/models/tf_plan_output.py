# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class TFPlanOutput(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'run_id': 'str',
        'logs': 'str',
        'resources': 'list[TFResource]'
    }

    attribute_map = {
        'run_id': 'runId',
        'logs': 'logs',
        'resources': 'resources'
    }

    def __init__(self, run_id=None, logs=None, resources=None):
        """
        TFPlanOutput - a model defined in Swagger
        """

        self._run_id = None
        self._logs = None
        self._resources = None

        if run_id is not None:
          self.run_id = run_id
        if logs is not None:
          self.logs = logs
        if resources is not None:
          self.resources = resources

    @property
    def run_id(self):
        """
        Gets the run_id of this TFPlanOutput.

        :return: The run_id of this TFPlanOutput.
        :rtype: str
        """
        return self._run_id

    @run_id.setter
    def run_id(self, run_id):
        """
        Sets the run_id of this TFPlanOutput.

        :param run_id: The run_id of this TFPlanOutput.
        :type: str
        """

        self._run_id = run_id

    @property
    def logs(self):
        """
        Gets the logs of this TFPlanOutput.

        :return: The logs of this TFPlanOutput.
        :rtype: str
        """
        return self._logs

    @logs.setter
    def logs(self, logs):
        """
        Sets the logs of this TFPlanOutput.

        :param logs: The logs of this TFPlanOutput.
        :type: str
        """

        self._logs = logs

    @property
    def resources(self):
        """
        Gets the resources of this TFPlanOutput.

        :return: The resources of this TFPlanOutput.
        :rtype: list[TFResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this TFPlanOutput.

        :param resources: The resources of this TFPlanOutput.
        :type: list[TFResource]
        """

        self._resources = resources

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, TFPlanOutput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
