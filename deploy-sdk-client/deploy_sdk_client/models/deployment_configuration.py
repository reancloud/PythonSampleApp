# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeploymentConfiguration(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_id': 'int',
        'deployment_name': 'str',
        'deployment_description': 'str',
        'provider_name': 'str',
        'region': 'str',
        'connections': 'dict(str, str)',
        'parent_deployments': 'dict(str, object)',
        'input_json': 'str',
        'environment_id': 'int',
        'destroy_after_min': 'int',
        'email_to_notify': 'str',
        'deploy_email_template_name': 'str',
        'destroy_email_template_name': 'str',
        'deploy_parent_environments': 'bool',
        'max_retries': 'int',
        'statuses_for_mail': 'list[str]',
        'parent_deploy_config': 'DeploymentConfiguration',
        'custom_tag': 'CustomTag',
        'env_version_id': 'int'
    }

    attribute_map = {
        'deployment_id': 'deploymentId',
        'deployment_name': 'deploymentName',
        'deployment_description': 'deploymentDescription',
        'provider_name': 'providerName',
        'region': 'region',
        'connections': 'connections',
        'parent_deployments': 'parentDeployments',
        'input_json': 'inputJson',
        'environment_id': 'environmentId',
        'destroy_after_min': 'destroyAfterMin',
        'email_to_notify': 'emailToNotify',
        'deploy_email_template_name': 'deployEmailTemplateName',
        'destroy_email_template_name': 'destroyEmailTemplateName',
        'deploy_parent_environments': 'deployParentEnvironments',
        'max_retries': 'maxRetries',
        'statuses_for_mail': 'statusesForMail',
        'parent_deploy_config': 'parentDeployConfig',
        'custom_tag': 'customTag',
        'env_version_id': 'envVersionId'
    }

    def __init__(self, deployment_id=None, deployment_name=None, deployment_description=None, provider_name=None, region=None, connections=None, parent_deployments=None, input_json=None, environment_id=None, destroy_after_min=None, email_to_notify=None, deploy_email_template_name=None, destroy_email_template_name=None, deploy_parent_environments=None, max_retries=None, statuses_for_mail=None, parent_deploy_config=None, custom_tag=None, env_version_id=None):
        """
        DeploymentConfiguration - a model defined in Swagger
        """

        self._deployment_id = None
        self._deployment_name = None
        self._deployment_description = None
        self._provider_name = None
        self._region = None
        self._connections = None
        self._parent_deployments = None
        self._input_json = None
        self._environment_id = None
        self._destroy_after_min = None
        self._email_to_notify = None
        self._deploy_email_template_name = None
        self._destroy_email_template_name = None
        self._deploy_parent_environments = None
        self._max_retries = None
        self._statuses_for_mail = None
        self._parent_deploy_config = None
        self._custom_tag = None
        self._env_version_id = None

        if deployment_id is not None:
          self.deployment_id = deployment_id
        self.deployment_name = deployment_name
        if deployment_description is not None:
          self.deployment_description = deployment_description
        if provider_name is not None:
          self.provider_name = provider_name
        if region is not None:
          self.region = region
        if connections is not None:
          self.connections = connections
        if parent_deployments is not None:
          self.parent_deployments = parent_deployments
        if input_json is not None:
          self.input_json = input_json
        if environment_id is not None:
          self.environment_id = environment_id
        if destroy_after_min is not None:
          self.destroy_after_min = destroy_after_min
        if email_to_notify is not None:
          self.email_to_notify = email_to_notify
        if deploy_email_template_name is not None:
          self.deploy_email_template_name = deploy_email_template_name
        if destroy_email_template_name is not None:
          self.destroy_email_template_name = destroy_email_template_name
        if deploy_parent_environments is not None:
          self.deploy_parent_environments = deploy_parent_environments
        if max_retries is not None:
          self.max_retries = max_retries
        if statuses_for_mail is not None:
          self.statuses_for_mail = statuses_for_mail
        if parent_deploy_config is not None:
          self.parent_deploy_config = parent_deploy_config
        if custom_tag is not None:
          self.custom_tag = custom_tag
        if env_version_id is not None:
          self.env_version_id = env_version_id

    @property
    def deployment_id(self):
        """
        Gets the deployment_id of this DeploymentConfiguration.

        :return: The deployment_id of this DeploymentConfiguration.
        :rtype: int
        """
        return self._deployment_id

    @deployment_id.setter
    def deployment_id(self, deployment_id):
        """
        Sets the deployment_id of this DeploymentConfiguration.

        :param deployment_id: The deployment_id of this DeploymentConfiguration.
        :type: int
        """

        self._deployment_id = deployment_id

    @property
    def deployment_name(self):
        """
        Gets the deployment_name of this DeploymentConfiguration.
        Name of Deployment. Unique for each environment

        :return: The deployment_name of this DeploymentConfiguration.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """
        Sets the deployment_name of this DeploymentConfiguration.
        Name of Deployment. Unique for each environment

        :param deployment_name: The deployment_name of this DeploymentConfiguration.
        :type: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")

        self._deployment_name = deployment_name

    @property
    def deployment_description(self):
        """
        Gets the deployment_description of this DeploymentConfiguration.
        Description of deployment

        :return: The deployment_description of this DeploymentConfiguration.
        :rtype: str
        """
        return self._deployment_description

    @deployment_description.setter
    def deployment_description(self, deployment_description):
        """
        Sets the deployment_description of this DeploymentConfiguration.
        Description of deployment

        :param deployment_description: The deployment_description of this DeploymentConfiguration.
        :type: str
        """

        self._deployment_description = deployment_description

    @property
    def provider_name(self):
        """
        Gets the provider_name of this DeploymentConfiguration.
        Name of the Provider which should be used for Deployment

        :return: The provider_name of this DeploymentConfiguration.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """
        Sets the provider_name of this DeploymentConfiguration.
        Name of the Provider which should be used for Deployment

        :param provider_name: The provider_name of this DeploymentConfiguration.
        :type: str
        """

        self._provider_name = provider_name

    @property
    def region(self):
        """
        Gets the region of this DeploymentConfiguration.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :return: The region of this DeploymentConfiguration.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this DeploymentConfiguration.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :param region: The region of this DeploymentConfiguration.
        :type: str
        """

        self._region = region

    @property
    def connections(self):
        """
        Gets the connections of this DeploymentConfiguration.
        Map of connections where key is the name of resource and value is the name or id of connection

        :return: The connections of this DeploymentConfiguration.
        :rtype: dict(str, str)
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """
        Sets the connections of this DeploymentConfiguration.
        Map of connections where key is the name of resource and value is the name or id of connection

        :param connections: The connections of this DeploymentConfiguration.
        :type: dict(str, str)
        """

        self._connections = connections

    @property
    def parent_deployments(self):
        """
        Gets the parent_deployments of this DeploymentConfiguration.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.

        :return: The parent_deployments of this DeploymentConfiguration.
        :rtype: dict(str, object)
        """
        return self._parent_deployments

    @parent_deployments.setter
    def parent_deployments(self, parent_deployments):
        """
        Sets the parent_deployments of this DeploymentConfiguration.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.

        :param parent_deployments: The parent_deployments of this DeploymentConfiguration.
        :type: dict(str, object)
        """

        self._parent_deployments = parent_deployments

    @property
    def input_json(self):
        """
        Gets the input_json of this DeploymentConfiguration.
        Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments.

        :return: The input_json of this DeploymentConfiguration.
        :rtype: str
        """
        return self._input_json

    @input_json.setter
    def input_json(self, input_json):
        """
        Sets the input_json of this DeploymentConfiguration.
        Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments.

        :param input_json: The input_json of this DeploymentConfiguration.
        :type: str
        """

        self._input_json = input_json

    @property
    def environment_id(self):
        """
        Gets the environment_id of this DeploymentConfiguration.
        Id of Environment which is getting deployed

        :return: The environment_id of this DeploymentConfiguration.
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """
        Sets the environment_id of this DeploymentConfiguration.
        Id of Environment which is getting deployed

        :param environment_id: The environment_id of this DeploymentConfiguration.
        :type: int
        """

        self._environment_id = environment_id

    @property
    def destroy_after_min(self):
        """
        Gets the destroy_after_min of this DeploymentConfiguration.
        A value in minutes to Automatically destroy deployment after a specified time

        :return: The destroy_after_min of this DeploymentConfiguration.
        :rtype: int
        """
        return self._destroy_after_min

    @destroy_after_min.setter
    def destroy_after_min(self, destroy_after_min):
        """
        Sets the destroy_after_min of this DeploymentConfiguration.
        A value in minutes to Automatically destroy deployment after a specified time

        :param destroy_after_min: The destroy_after_min of this DeploymentConfiguration.
        :type: int
        """

        self._destroy_after_min = destroy_after_min

    @property
    def email_to_notify(self):
        """
        Gets the email_to_notify of this DeploymentConfiguration.
        Email to receive notification about deployment status

        :return: The email_to_notify of this DeploymentConfiguration.
        :rtype: str
        """
        return self._email_to_notify

    @email_to_notify.setter
    def email_to_notify(self, email_to_notify):
        """
        Sets the email_to_notify of this DeploymentConfiguration.
        Email to receive notification about deployment status

        :param email_to_notify: The email_to_notify of this DeploymentConfiguration.
        :type: str
        """

        self._email_to_notify = email_to_notify

    @property
    def deploy_email_template_name(self):
        """
        Gets the deploy_email_template_name of this DeploymentConfiguration.
        Deploy mail template to receive notification about deployment status on specified mail

        :return: The deploy_email_template_name of this DeploymentConfiguration.
        :rtype: str
        """
        return self._deploy_email_template_name

    @deploy_email_template_name.setter
    def deploy_email_template_name(self, deploy_email_template_name):
        """
        Sets the deploy_email_template_name of this DeploymentConfiguration.
        Deploy mail template to receive notification about deployment status on specified mail

        :param deploy_email_template_name: The deploy_email_template_name of this DeploymentConfiguration.
        :type: str
        """
        allowed_values = ["DeployTemplate.html"]
        if deploy_email_template_name not in allowed_values:
            raise ValueError(
                "Invalid value for `deploy_email_template_name` ({0}), must be one of {1}"
                .format(deploy_email_template_name, allowed_values)
            )

        self._deploy_email_template_name = deploy_email_template_name

    @property
    def destroy_email_template_name(self):
        """
        Gets the destroy_email_template_name of this DeploymentConfiguration.
        Destroy mail template to receive notification about deployment status on specified mail

        :return: The destroy_email_template_name of this DeploymentConfiguration.
        :rtype: str
        """
        return self._destroy_email_template_name

    @destroy_email_template_name.setter
    def destroy_email_template_name(self, destroy_email_template_name):
        """
        Sets the destroy_email_template_name of this DeploymentConfiguration.
        Destroy mail template to receive notification about deployment status on specified mail

        :param destroy_email_template_name: The destroy_email_template_name of this DeploymentConfiguration.
        :type: str
        """
        allowed_values = ["DestroyTemplate.html"]
        if destroy_email_template_name not in allowed_values:
            raise ValueError(
                "Invalid value for `destroy_email_template_name` ({0}), must be one of {1}"
                .format(destroy_email_template_name, allowed_values)
            )

        self._destroy_email_template_name = destroy_email_template_name

    @property
    def deploy_parent_environments(self):
        """
        Gets the deploy_parent_environments of this DeploymentConfiguration.
        Flag to deploy parent environment before the current deployment

        :return: The deploy_parent_environments of this DeploymentConfiguration.
        :rtype: bool
        """
        return self._deploy_parent_environments

    @deploy_parent_environments.setter
    def deploy_parent_environments(self, deploy_parent_environments):
        """
        Sets the deploy_parent_environments of this DeploymentConfiguration.
        Flag to deploy parent environment before the current deployment

        :param deploy_parent_environments: The deploy_parent_environments of this DeploymentConfiguration.
        :type: bool
        """

        self._deploy_parent_environments = deploy_parent_environments

    @property
    def max_retries(self):
        """
        Gets the max_retries of this DeploymentConfiguration.

        :return: The max_retries of this DeploymentConfiguration.
        :rtype: int
        """
        return self._max_retries

    @max_retries.setter
    def max_retries(self, max_retries):
        """
        Sets the max_retries of this DeploymentConfiguration.

        :param max_retries: The max_retries of this DeploymentConfiguration.
        :type: int
        """

        self._max_retries = max_retries

    @property
    def statuses_for_mail(self):
        """
        Gets the statuses_for_mail of this DeploymentConfiguration.

        :return: The statuses_for_mail of this DeploymentConfiguration.
        :rtype: list[str]
        """
        return self._statuses_for_mail

    @statuses_for_mail.setter
    def statuses_for_mail(self, statuses_for_mail):
        """
        Sets the statuses_for_mail of this DeploymentConfiguration.

        :param statuses_for_mail: The statuses_for_mail of this DeploymentConfiguration.
        :type: list[str]
        """
        allowed_values = ["NEW", "DEPLOYING", "DEPLOYED", "DESTROYING", "DESTROYED", "FAILED"]
        if not set(statuses_for_mail).issubset(set(allowed_values)):
            raise ValueError(
                "Invalid values for `statuses_for_mail` [{0}], must be a subset of [{1}]"
                .format(", ".join(map(str, set(statuses_for_mail)-set(allowed_values))),
                        ", ".join(map(str, allowed_values)))
            )

        self._statuses_for_mail = statuses_for_mail

    @property
    def parent_deploy_config(self):
        """
        Gets the parent_deploy_config of this DeploymentConfiguration.

        :return: The parent_deploy_config of this DeploymentConfiguration.
        :rtype: DeploymentConfiguration
        """
        return self._parent_deploy_config

    @parent_deploy_config.setter
    def parent_deploy_config(self, parent_deploy_config):
        """
        Sets the parent_deploy_config of this DeploymentConfiguration.

        :param parent_deploy_config: The parent_deploy_config of this DeploymentConfiguration.
        :type: DeploymentConfiguration
        """

        self._parent_deploy_config = parent_deploy_config

    @property
    def custom_tag(self):
        """
        Gets the custom_tag of this DeploymentConfiguration.
        Custom tag for environment

        :return: The custom_tag of this DeploymentConfiguration.
        :rtype: CustomTag
        """
        return self._custom_tag

    @custom_tag.setter
    def custom_tag(self, custom_tag):
        """
        Sets the custom_tag of this DeploymentConfiguration.
        Custom tag for environment

        :param custom_tag: The custom_tag of this DeploymentConfiguration.
        :type: CustomTag
        """

        self._custom_tag = custom_tag

    @property
    def env_version_id(self):
        """
        Gets the env_version_id of this DeploymentConfiguration.
        The id of the environment in case the user wants to upgrade existing deployment with the newer version of an environment

        :return: The env_version_id of this DeploymentConfiguration.
        :rtype: int
        """
        return self._env_version_id

    @env_version_id.setter
    def env_version_id(self, env_version_id):
        """
        Sets the env_version_id of this DeploymentConfiguration.
        The id of the environment in case the user wants to upgrade existing deployment with the newer version of an environment

        :param env_version_id: The env_version_id of this DeploymentConfiguration.
        :type: int
        """

        self._env_version_id = env_version_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeploymentConfiguration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
