# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BastionConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'user': 'str',
        'host': 'int',
        'port': 'int',
        'vm_connection_id': 'int'
    }

    attribute_map = {
        'user': 'user',
        'host': 'host',
        'port': 'port',
        'vm_connection_id': 'vmConnectionId'
    }

    def __init__(self, user=None, host=None, port=None, vm_connection_id=None):
        """
        BastionConnection - a model defined in Swagger
        """

        self._user = None
        self._host = None
        self._port = None
        self._vm_connection_id = None

        self.user = user
        self.host = host
        if port is not None:
          self.port = port
        if vm_connection_id is not None:
          self.vm_connection_id = vm_connection_id

    @property
    def user(self):
        """
        Gets the user of this BastionConnection.
        Bastion Connection UserName

        :return: The user of this BastionConnection.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this BastionConnection.
        Bastion Connection UserName

        :param user: The user of this BastionConnection.
        :type: str
        """
        if user is None:
            raise ValueError("Invalid value for `user`, must not be `None`")

        self._user = user

    @property
    def host(self):
        """
        Gets the host of this BastionConnection.
        Bastion Connection Host IP

        :return: The host of this BastionConnection.
        :rtype: int
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this BastionConnection.
        Bastion Connection Host IP

        :param host: The host of this BastionConnection.
        :type: int
        """
        if host is None:
            raise ValueError("Invalid value for `host`, must not be `None`")

        self._host = host

    @property
    def port(self):
        """
        Gets the port of this BastionConnection.
        Bastion Connection port number

        :return: The port of this BastionConnection.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this BastionConnection.
        Bastion Connection port number

        :param port: The port of this BastionConnection.
        :type: int
        """

        self._port = port

    @property
    def vm_connection_id(self):
        """
        Gets the vm_connection_id of this BastionConnection.

        :return: The vm_connection_id of this BastionConnection.
        :rtype: int
        """
        return self._vm_connection_id

    @vm_connection_id.setter
    def vm_connection_id(self, vm_connection_id):
        """
        Sets the vm_connection_id of this BastionConnection.

        :param vm_connection_id: The vm_connection_id of this BastionConnection.
        :type: int
        """

        self._vm_connection_id = vm_connection_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BastionConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
