# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ParentDeploymentMapping(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'depends_on_resource_name': 'str',
        'selected_deployments': 'DeploymentDetail',
        'deployments': 'list[DeploymentDetail]'
    }

    attribute_map = {
        'depends_on_resource_name': 'dependsOnResourceName',
        'selected_deployments': 'selectedDeployments',
        'deployments': 'deployments'
    }

    def __init__(self, depends_on_resource_name=None, selected_deployments=None, deployments=None):
        """
        ParentDeploymentMapping - a model defined in Swagger
        """

        self._depends_on_resource_name = None
        self._selected_deployments = None
        self._deployments = None

        self.depends_on_resource_name = depends_on_resource_name
        self.selected_deployments = selected_deployments
        self.deployments = deployments

    @property
    def depends_on_resource_name(self):
        """
        Gets the depends_on_resource_name of this ParentDeploymentMapping.
        Name of the Depends On Resource of Environment

        :return: The depends_on_resource_name of this ParentDeploymentMapping.
        :rtype: str
        """
        return self._depends_on_resource_name

    @depends_on_resource_name.setter
    def depends_on_resource_name(self, depends_on_resource_name):
        """
        Sets the depends_on_resource_name of this ParentDeploymentMapping.
        Name of the Depends On Resource of Environment

        :param depends_on_resource_name: The depends_on_resource_name of this ParentDeploymentMapping.
        :type: str
        """
        if depends_on_resource_name is None:
            raise ValueError("Invalid value for `depends_on_resource_name`, must not be `None`")

        self._depends_on_resource_name = depends_on_resource_name

    @property
    def selected_deployments(self):
        """
        Gets the selected_deployments of this ParentDeploymentMapping.
        Current Dependent Deployment for One Depends On Resource

        :return: The selected_deployments of this ParentDeploymentMapping.
        :rtype: DeploymentDetail
        """
        return self._selected_deployments

    @selected_deployments.setter
    def selected_deployments(self, selected_deployments):
        """
        Sets the selected_deployments of this ParentDeploymentMapping.
        Current Dependent Deployment for One Depends On Resource

        :param selected_deployments: The selected_deployments of this ParentDeploymentMapping.
        :type: DeploymentDetail
        """
        if selected_deployments is None:
            raise ValueError("Invalid value for `selected_deployments`, must not be `None`")

        self._selected_deployments = selected_deployments

    @property
    def deployments(self):
        """
        Gets the deployments of this ParentDeploymentMapping.
        List of Deployment name and id for Dependent environments

        :return: The deployments of this ParentDeploymentMapping.
        :rtype: list[DeploymentDetail]
        """
        return self._deployments

    @deployments.setter
    def deployments(self, deployments):
        """
        Sets the deployments of this ParentDeploymentMapping.
        List of Deployment name and id for Dependent environments

        :param deployments: The deployments of this ParentDeploymentMapping.
        :type: list[DeploymentDetail]
        """
        if deployments is None:
            raise ValueError("Invalid value for `deployments`, must not be `None`")

        self._deployments = deployments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ParentDeploymentMapping):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
