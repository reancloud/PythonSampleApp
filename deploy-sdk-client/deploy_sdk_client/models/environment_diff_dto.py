# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvironmentDiffDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_environment_name': 'str',
        'target_environment_name': 'str',
        'added_resources': 'list[str]',
        'removed_resources': 'list[str]',
        'changed_resources': 'list[ChangedResourceDto]'
    }

    attribute_map = {
        'base_environment_name': 'baseEnvironmentName',
        'target_environment_name': 'targetEnvironmentName',
        'added_resources': 'addedResources',
        'removed_resources': 'removedResources',
        'changed_resources': 'changedResources'
    }

    def __init__(self, base_environment_name=None, target_environment_name=None, added_resources=None, removed_resources=None, changed_resources=None):
        """
        EnvironmentDiffDto - a model defined in Swagger
        """

        self._base_environment_name = None
        self._target_environment_name = None
        self._added_resources = None
        self._removed_resources = None
        self._changed_resources = None

        if base_environment_name is not None:
          self.base_environment_name = base_environment_name
        if target_environment_name is not None:
          self.target_environment_name = target_environment_name
        if added_resources is not None:
          self.added_resources = added_resources
        if removed_resources is not None:
          self.removed_resources = removed_resources
        if changed_resources is not None:
          self.changed_resources = changed_resources

    @property
    def base_environment_name(self):
        """
        Gets the base_environment_name of this EnvironmentDiffDto.

        :return: The base_environment_name of this EnvironmentDiffDto.
        :rtype: str
        """
        return self._base_environment_name

    @base_environment_name.setter
    def base_environment_name(self, base_environment_name):
        """
        Sets the base_environment_name of this EnvironmentDiffDto.

        :param base_environment_name: The base_environment_name of this EnvironmentDiffDto.
        :type: str
        """

        self._base_environment_name = base_environment_name

    @property
    def target_environment_name(self):
        """
        Gets the target_environment_name of this EnvironmentDiffDto.

        :return: The target_environment_name of this EnvironmentDiffDto.
        :rtype: str
        """
        return self._target_environment_name

    @target_environment_name.setter
    def target_environment_name(self, target_environment_name):
        """
        Sets the target_environment_name of this EnvironmentDiffDto.

        :param target_environment_name: The target_environment_name of this EnvironmentDiffDto.
        :type: str
        """

        self._target_environment_name = target_environment_name

    @property
    def added_resources(self):
        """
        Gets the added_resources of this EnvironmentDiffDto.

        :return: The added_resources of this EnvironmentDiffDto.
        :rtype: list[str]
        """
        return self._added_resources

    @added_resources.setter
    def added_resources(self, added_resources):
        """
        Sets the added_resources of this EnvironmentDiffDto.

        :param added_resources: The added_resources of this EnvironmentDiffDto.
        :type: list[str]
        """

        self._added_resources = added_resources

    @property
    def removed_resources(self):
        """
        Gets the removed_resources of this EnvironmentDiffDto.

        :return: The removed_resources of this EnvironmentDiffDto.
        :rtype: list[str]
        """
        return self._removed_resources

    @removed_resources.setter
    def removed_resources(self, removed_resources):
        """
        Sets the removed_resources of this EnvironmentDiffDto.

        :param removed_resources: The removed_resources of this EnvironmentDiffDto.
        :type: list[str]
        """

        self._removed_resources = removed_resources

    @property
    def changed_resources(self):
        """
        Gets the changed_resources of this EnvironmentDiffDto.

        :return: The changed_resources of this EnvironmentDiffDto.
        :rtype: list[ChangedResourceDto]
        """
        return self._changed_resources

    @changed_resources.setter
    def changed_resources(self, changed_resources):
        """
        Sets the changed_resources of this EnvironmentDiffDto.

        :param changed_resources: The changed_resources of this EnvironmentDiffDto.
        :type: list[ChangedResourceDto]
        """

        self._changed_resources = changed_resources

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvironmentDiffDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
