# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class VmConnection(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_by': 'int',
        'modified_by': 'int',
        'created_on': 'date',
        'modified_on': 'date',
        'type': 'str',
        'name': 'str',
        'user': 'str',
        'port': 'int',
        'https': 'bool',
        'insecure': 'bool',
        'ntlm': 'bool',
        'host': 'str',
        'bastion_connection': 'BastionConnection',
        'decrypted_cacert': 'str'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'type': 'type',
        'name': 'name',
        'user': 'user',
        'port': 'port',
        'https': 'https',
        'insecure': 'insecure',
        'ntlm': 'ntlm',
        'host': 'host',
        'bastion_connection': 'bastionConnection',
        'decrypted_cacert': 'decryptedCacert'
    }

    def __init__(self, id=None, created_by=None, modified_by=None, created_on=None, modified_on=None, type=None, name=None, user=None, port=None, https=None, insecure=None, ntlm=None, host=None, bastion_connection=None, decrypted_cacert=None):
        """
        VmConnection - a model defined in Swagger
        """

        self._id = None
        self._created_by = None
        self._modified_by = None
        self._created_on = None
        self._modified_on = None
        self._type = None
        self._name = None
        self._user = None
        self._port = None
        self._https = None
        self._insecure = None
        self._ntlm = None
        self._host = None
        self._bastion_connection = None
        self._decrypted_cacert = None

        if id is not None:
          self.id = id
        if created_by is not None:
          self.created_by = created_by
        if modified_by is not None:
          self.modified_by = modified_by
        if created_on is not None:
          self.created_on = created_on
        if modified_on is not None:
          self.modified_on = modified_on
        if type is not None:
          self.type = type
        if name is not None:
          self.name = name
        if user is not None:
          self.user = user
        if port is not None:
          self.port = port
        if https is not None:
          self.https = https
        if insecure is not None:
          self.insecure = insecure
        if ntlm is not None:
          self.ntlm = ntlm
        if host is not None:
          self.host = host
        if bastion_connection is not None:
          self.bastion_connection = bastion_connection
        if decrypted_cacert is not None:
          self.decrypted_cacert = decrypted_cacert

    @property
    def id(self):
        """
        Gets the id of this VmConnection.

        :return: The id of this VmConnection.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this VmConnection.

        :param id: The id of this VmConnection.
        :type: int
        """

        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this VmConnection.
        Created By User(Id)

        :return: The created_by of this VmConnection.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this VmConnection.
        Created By User(Id)

        :param created_by: The created_by of this VmConnection.
        :type: int
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """
        Gets the modified_by of this VmConnection.
        Modified By User(Id)

        :return: The modified_by of this VmConnection.
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this VmConnection.
        Modified By User(Id)

        :param modified_by: The modified_by of this VmConnection.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def created_on(self):
        """
        Gets the created_on of this VmConnection.
        Created at Date Time

        :return: The created_on of this VmConnection.
        :rtype: date
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this VmConnection.
        Created at Date Time

        :param created_on: The created_on of this VmConnection.
        :type: date
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """
        Gets the modified_on of this VmConnection.
        Modified at Date Time

        :return: The modified_on of this VmConnection.
        :rtype: date
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this VmConnection.
        Modified at Date Time

        :param modified_on: The modified_on of this VmConnection.
        :type: date
        """

        self._modified_on = modified_on

    @property
    def type(self):
        """
        Gets the type of this VmConnection.

        :return: The type of this VmConnection.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this VmConnection.

        :param type: The type of this VmConnection.
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """
        Gets the name of this VmConnection.

        :return: The name of this VmConnection.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this VmConnection.

        :param name: The name of this VmConnection.
        :type: str
        """

        self._name = name

    @property
    def user(self):
        """
        Gets the user of this VmConnection.

        :return: The user of this VmConnection.
        :rtype: str
        """
        return self._user

    @user.setter
    def user(self, user):
        """
        Sets the user of this VmConnection.

        :param user: The user of this VmConnection.
        :type: str
        """

        self._user = user

    @property
    def port(self):
        """
        Gets the port of this VmConnection.

        :return: The port of this VmConnection.
        :rtype: int
        """
        return self._port

    @port.setter
    def port(self, port):
        """
        Sets the port of this VmConnection.

        :param port: The port of this VmConnection.
        :type: int
        """

        self._port = port

    @property
    def https(self):
        """
        Gets the https of this VmConnection.

        :return: The https of this VmConnection.
        :rtype: bool
        """
        return self._https

    @https.setter
    def https(self, https):
        """
        Sets the https of this VmConnection.

        :param https: The https of this VmConnection.
        :type: bool
        """

        self._https = https

    @property
    def insecure(self):
        """
        Gets the insecure of this VmConnection.

        :return: The insecure of this VmConnection.
        :rtype: bool
        """
        return self._insecure

    @insecure.setter
    def insecure(self, insecure):
        """
        Sets the insecure of this VmConnection.

        :param insecure: The insecure of this VmConnection.
        :type: bool
        """

        self._insecure = insecure

    @property
    def ntlm(self):
        """
        Gets the ntlm of this VmConnection.

        :return: The ntlm of this VmConnection.
        :rtype: bool
        """
        return self._ntlm

    @ntlm.setter
    def ntlm(self, ntlm):
        """
        Sets the ntlm of this VmConnection.

        :param ntlm: The ntlm of this VmConnection.
        :type: bool
        """

        self._ntlm = ntlm

    @property
    def host(self):
        """
        Gets the host of this VmConnection.

        :return: The host of this VmConnection.
        :rtype: str
        """
        return self._host

    @host.setter
    def host(self, host):
        """
        Sets the host of this VmConnection.

        :param host: The host of this VmConnection.
        :type: str
        """

        self._host = host

    @property
    def bastion_connection(self):
        """
        Gets the bastion_connection of this VmConnection.

        :return: The bastion_connection of this VmConnection.
        :rtype: BastionConnection
        """
        return self._bastion_connection

    @bastion_connection.setter
    def bastion_connection(self, bastion_connection):
        """
        Sets the bastion_connection of this VmConnection.

        :param bastion_connection: The bastion_connection of this VmConnection.
        :type: BastionConnection
        """

        self._bastion_connection = bastion_connection

    @property
    def decrypted_cacert(self):
        """
        Gets the decrypted_cacert of this VmConnection.

        :return: The decrypted_cacert of this VmConnection.
        :rtype: str
        """
        return self._decrypted_cacert

    @decrypted_cacert.setter
    def decrypted_cacert(self, decrypted_cacert):
        """
        Sets the decrypted_cacert of this VmConnection.

        :param decrypted_cacert: The decrypted_cacert of this VmConnection.
        :type: str
        """

        self._decrypted_cacert = decrypted_cacert

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, VmConnection):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
