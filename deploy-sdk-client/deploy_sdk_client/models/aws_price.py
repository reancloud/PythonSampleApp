# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class AWSPrice(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'on_demand_price': 'float',
        'partial_upfront': 'float',
        'full_upfront': 'float',
        'no_upfront': 'float'
    }

    attribute_map = {
        'on_demand_price': 'onDemandPrice',
        'partial_upfront': 'partialUpfront',
        'full_upfront': 'fullUpfront',
        'no_upfront': 'noUpfront'
    }

    def __init__(self, on_demand_price=None, partial_upfront=None, full_upfront=None, no_upfront=None):
        """
        AWSPrice - a model defined in Swagger
        """

        self._on_demand_price = None
        self._partial_upfront = None
        self._full_upfront = None
        self._no_upfront = None

        if on_demand_price is not None:
          self.on_demand_price = on_demand_price
        if partial_upfront is not None:
          self.partial_upfront = partial_upfront
        if full_upfront is not None:
          self.full_upfront = full_upfront
        if no_upfront is not None:
          self.no_upfront = no_upfront

    @property
    def on_demand_price(self):
        """
        Gets the on_demand_price of this AWSPrice.

        :return: The on_demand_price of this AWSPrice.
        :rtype: float
        """
        return self._on_demand_price

    @on_demand_price.setter
    def on_demand_price(self, on_demand_price):
        """
        Sets the on_demand_price of this AWSPrice.

        :param on_demand_price: The on_demand_price of this AWSPrice.
        :type: float
        """

        self._on_demand_price = on_demand_price

    @property
    def partial_upfront(self):
        """
        Gets the partial_upfront of this AWSPrice.

        :return: The partial_upfront of this AWSPrice.
        :rtype: float
        """
        return self._partial_upfront

    @partial_upfront.setter
    def partial_upfront(self, partial_upfront):
        """
        Sets the partial_upfront of this AWSPrice.

        :param partial_upfront: The partial_upfront of this AWSPrice.
        :type: float
        """

        self._partial_upfront = partial_upfront

    @property
    def full_upfront(self):
        """
        Gets the full_upfront of this AWSPrice.

        :return: The full_upfront of this AWSPrice.
        :rtype: float
        """
        return self._full_upfront

    @full_upfront.setter
    def full_upfront(self, full_upfront):
        """
        Sets the full_upfront of this AWSPrice.

        :param full_upfront: The full_upfront of this AWSPrice.
        :type: float
        """

        self._full_upfront = full_upfront

    @property
    def no_upfront(self):
        """
        Gets the no_upfront of this AWSPrice.

        :return: The no_upfront of this AWSPrice.
        :rtype: float
        """
        return self._no_upfront

    @no_upfront.setter
    def no_upfront(self, no_upfront):
        """
        Sets the no_upfront of this AWSPrice.

        :param no_upfront: The no_upfront of this AWSPrice.
        :type: float
        """

        self._no_upfront = no_upfront

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, AWSPrice):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
