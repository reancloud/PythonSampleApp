# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class DeploymentConfigurationDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'deployment_name': 'str',
        'environment_id': 'int',
        'input_json': 'str',
        'parent_deployments': 'dict(str, object)',
        'deployment_description': 'str',
        'provider_name': 'str',
        'custom_tag': 'CustomTag',
        'region': 'str',
        'connections': 'dict(str, str)'
    }

    attribute_map = {
        'deployment_name': 'deploymentName',
        'environment_id': 'environmentId',
        'input_json': 'inputJson',
        'parent_deployments': 'parentDeployments',
        'deployment_description': 'deploymentDescription',
        'provider_name': 'providerName',
        'custom_tag': 'customTag',
        'region': 'region',
        'connections': 'connections'
    }

    def __init__(self, deployment_name=None, environment_id=None, input_json=None, parent_deployments=None, deployment_description=None, provider_name=None, custom_tag=None, region=None, connections=None):
        """
        DeploymentConfigurationDto - a model defined in Swagger
        """

        self._deployment_name = None
        self._environment_id = None
        self._input_json = None
        self._parent_deployments = None
        self._deployment_description = None
        self._provider_name = None
        self._custom_tag = None
        self._region = None
        self._connections = None

        self.deployment_name = deployment_name
        if environment_id is not None:
          self.environment_id = environment_id
        if input_json is not None:
          self.input_json = input_json
        if parent_deployments is not None:
          self.parent_deployments = parent_deployments
        if deployment_description is not None:
          self.deployment_description = deployment_description
        if provider_name is not None:
          self.provider_name = provider_name
        if custom_tag is not None:
          self.custom_tag = custom_tag
        if region is not None:
          self.region = region
        if connections is not None:
          self.connections = connections

    @property
    def deployment_name(self):
        """
        Gets the deployment_name of this DeploymentConfigurationDto.
        Name of Deployment. Unique for each environment

        :return: The deployment_name of this DeploymentConfigurationDto.
        :rtype: str
        """
        return self._deployment_name

    @deployment_name.setter
    def deployment_name(self, deployment_name):
        """
        Sets the deployment_name of this DeploymentConfigurationDto.
        Name of Deployment. Unique for each environment

        :param deployment_name: The deployment_name of this DeploymentConfigurationDto.
        :type: str
        """
        if deployment_name is None:
            raise ValueError("Invalid value for `deployment_name`, must not be `None`")

        self._deployment_name = deployment_name

    @property
    def environment_id(self):
        """
        Gets the environment_id of this DeploymentConfigurationDto.
        Id of Environment which is getting deployed

        :return: The environment_id of this DeploymentConfigurationDto.
        :rtype: int
        """
        return self._environment_id

    @environment_id.setter
    def environment_id(self, environment_id):
        """
        Sets the environment_id of this DeploymentConfigurationDto.
        Id of Environment which is getting deployed

        :param environment_id: The environment_id of this DeploymentConfigurationDto.
        :type: int
        """

        self._environment_id = environment_id

    @property
    def input_json(self):
        """
        Gets the input_json of this DeploymentConfigurationDto.
        Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments.

        :return: The input_json of this DeploymentConfigurationDto.
        :rtype: str
        """
        return self._input_json

    @input_json.setter
    def input_json(self, input_json):
        """
        Sets the input_json of this DeploymentConfigurationDto.
        Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments.

        :param input_json: The input_json of this DeploymentConfigurationDto.
        :type: str
        """

        self._input_json = input_json

    @property
    def parent_deployments(self):
        """
        Gets the parent_deployments of this DeploymentConfigurationDto.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.

        :return: The parent_deployments of this DeploymentConfigurationDto.
        :rtype: dict(str, object)
        """
        return self._parent_deployments

    @parent_deployments.setter
    def parent_deployments(self, parent_deployments):
        """
        Sets the parent_deployments of this DeploymentConfigurationDto.
        Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.

        :param parent_deployments: The parent_deployments of this DeploymentConfigurationDto.
        :type: dict(str, object)
        """

        self._parent_deployments = parent_deployments

    @property
    def deployment_description(self):
        """
        Gets the deployment_description of this DeploymentConfigurationDto.
        Description of deployment

        :return: The deployment_description of this DeploymentConfigurationDto.
        :rtype: str
        """
        return self._deployment_description

    @deployment_description.setter
    def deployment_description(self, deployment_description):
        """
        Sets the deployment_description of this DeploymentConfigurationDto.
        Description of deployment

        :param deployment_description: The deployment_description of this DeploymentConfigurationDto.
        :type: str
        """

        self._deployment_description = deployment_description

    @property
    def provider_name(self):
        """
        Gets the provider_name of this DeploymentConfigurationDto.
        Name of the Provider which should be used for Deployment

        :return: The provider_name of this DeploymentConfigurationDto.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """
        Sets the provider_name of this DeploymentConfigurationDto.
        Name of the Provider which should be used for Deployment

        :param provider_name: The provider_name of this DeploymentConfigurationDto.
        :type: str
        """

        self._provider_name = provider_name

    @property
    def custom_tag(self):
        """
        Gets the custom_tag of this DeploymentConfigurationDto.
        Custom tag for environment

        :return: The custom_tag of this DeploymentConfigurationDto.
        :rtype: CustomTag
        """
        return self._custom_tag

    @custom_tag.setter
    def custom_tag(self, custom_tag):
        """
        Sets the custom_tag of this DeploymentConfigurationDto.
        Custom tag for environment

        :param custom_tag: The custom_tag of this DeploymentConfigurationDto.
        :type: CustomTag
        """

        self._custom_tag = custom_tag

    @property
    def region(self):
        """
        Gets the region of this DeploymentConfigurationDto.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :return: The region of this DeploymentConfigurationDto.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this DeploymentConfigurationDto.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :param region: The region of this DeploymentConfigurationDto.
        :type: str
        """

        self._region = region

    @property
    def connections(self):
        """
        Gets the connections of this DeploymentConfigurationDto.
        Map of connections where key is the name of resource and value is the name or id of connection

        :return: The connections of this DeploymentConfigurationDto.
        :rtype: dict(str, str)
        """
        return self._connections

    @connections.setter
    def connections(self, connections):
        """
        Sets the connections of this DeploymentConfigurationDto.
        Map of connections where key is the name of resource and value is the name or id of connection

        :param connections: The connections of this DeploymentConfigurationDto.
        :type: dict(str, str)
        """

        self._connections = connections

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, DeploymentConfigurationDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
