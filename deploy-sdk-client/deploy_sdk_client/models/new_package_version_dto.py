# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class NewPackageVersionDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'base_package_id': 'int',
        'new_version': 'str',
        'download_url': 'str',
        'zip_file_name': 'str',
        'un_zip_file_name': 'str'
    }

    attribute_map = {
        'base_package_id': 'basePackageId',
        'new_version': 'newVersion',
        'download_url': 'downloadUrl',
        'zip_file_name': 'zipFileName',
        'un_zip_file_name': 'unZipFileName'
    }

    def __init__(self, base_package_id=None, new_version=None, download_url=None, zip_file_name=None, un_zip_file_name=None):
        """
        NewPackageVersionDto - a model defined in Swagger
        """

        self._base_package_id = None
        self._new_version = None
        self._download_url = None
        self._zip_file_name = None
        self._un_zip_file_name = None

        self.base_package_id = base_package_id
        self.new_version = new_version
        self.download_url = download_url
        self.zip_file_name = zip_file_name
        self.un_zip_file_name = un_zip_file_name

    @property
    def base_package_id(self):
        """
        Gets the base_package_id of this NewPackageVersionDto.
        Base Package Id

        :return: The base_package_id of this NewPackageVersionDto.
        :rtype: int
        """
        return self._base_package_id

    @base_package_id.setter
    def base_package_id(self, base_package_id):
        """
        Sets the base_package_id of this NewPackageVersionDto.
        Base Package Id

        :param base_package_id: The base_package_id of this NewPackageVersionDto.
        :type: int
        """
        if base_package_id is None:
            raise ValueError("Invalid value for `base_package_id`, must not be `None`")

        self._base_package_id = base_package_id

    @property
    def new_version(self):
        """
        Gets the new_version of this NewPackageVersionDto.
        New Version 

        :return: The new_version of this NewPackageVersionDto.
        :rtype: str
        """
        return self._new_version

    @new_version.setter
    def new_version(self, new_version):
        """
        Sets the new_version of this NewPackageVersionDto.
        New Version 

        :param new_version: The new_version of this NewPackageVersionDto.
        :type: str
        """
        if new_version is None:
            raise ValueError("Invalid value for `new_version`, must not be `None`")

        self._new_version = new_version

    @property
    def download_url(self):
        """
        Gets the download_url of this NewPackageVersionDto.
        DownlaodUrl For this version

        :return: The download_url of this NewPackageVersionDto.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this NewPackageVersionDto.
        DownlaodUrl For this version

        :param download_url: The download_url of this NewPackageVersionDto.
        :type: str
        """
        if download_url is None:
            raise ValueError("Invalid value for `download_url`, must not be `None`")

        self._download_url = download_url

    @property
    def zip_file_name(self):
        """
        Gets the zip_file_name of this NewPackageVersionDto.
        ZipFileName For this version

        :return: The zip_file_name of this NewPackageVersionDto.
        :rtype: str
        """
        return self._zip_file_name

    @zip_file_name.setter
    def zip_file_name(self, zip_file_name):
        """
        Sets the zip_file_name of this NewPackageVersionDto.
        ZipFileName For this version

        :param zip_file_name: The zip_file_name of this NewPackageVersionDto.
        :type: str
        """
        if zip_file_name is None:
            raise ValueError("Invalid value for `zip_file_name`, must not be `None`")

        self._zip_file_name = zip_file_name

    @property
    def un_zip_file_name(self):
        """
        Gets the un_zip_file_name of this NewPackageVersionDto.
        UnZippedFileName For this version

        :return: The un_zip_file_name of this NewPackageVersionDto.
        :rtype: str
        """
        return self._un_zip_file_name

    @un_zip_file_name.setter
    def un_zip_file_name(self, un_zip_file_name):
        """
        Sets the un_zip_file_name of this NewPackageVersionDto.
        UnZippedFileName For this version

        :param un_zip_file_name: The un_zip_file_name of this NewPackageVersionDto.
        :type: str
        """
        if un_zip_file_name is None:
            raise ValueError("Invalid value for `un_zip_file_name`, must not be `None`")

        self._un_zip_file_name = un_zip_file_name

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, NewPackageVersionDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
