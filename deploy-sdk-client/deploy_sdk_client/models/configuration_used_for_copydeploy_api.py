# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ConfigurationUsedForCopydeployAPI(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'original_environment': 'str',
        'new_environment': 'str',
        'new_env_description': 'str',
        'new_env_connection': 'str',
        'new_env_provider': 'str',
        'tags': 'str',
        'copy_parent_environments': 'bool',
        'depends_on_enviroments': 'str'
    }

    attribute_map = {
        'original_environment': 'originalEnvironment',
        'new_environment': 'newEnvironment',
        'new_env_description': 'newEnvDescription',
        'new_env_connection': 'newEnvConnection',
        'new_env_provider': 'newEnvProvider',
        'tags': 'tags',
        'copy_parent_environments': 'copyParentEnvironments',
        'depends_on_enviroments': 'dependsOnEnviroments'
    }

    def __init__(self, original_environment=None, new_environment=None, new_env_description=None, new_env_connection=None, new_env_provider=None, tags=None, copy_parent_environments=None, depends_on_enviroments=None):
        """
        ConfigurationUsedForCopydeployAPI - a model defined in Swagger
        """

        self._original_environment = None
        self._new_environment = None
        self._new_env_description = None
        self._new_env_connection = None
        self._new_env_provider = None
        self._tags = None
        self._copy_parent_environments = None
        self._depends_on_enviroments = None

        if original_environment is not None:
          self.original_environment = original_environment
        if new_environment is not None:
          self.new_environment = new_environment
        if new_env_description is not None:
          self.new_env_description = new_env_description
        if new_env_connection is not None:
          self.new_env_connection = new_env_connection
        if new_env_provider is not None:
          self.new_env_provider = new_env_provider
        if tags is not None:
          self.tags = tags
        if copy_parent_environments is not None:
          self.copy_parent_environments = copy_parent_environments
        if depends_on_enviroments is not None:
          self.depends_on_enviroments = depends_on_enviroments

    @property
    def original_environment(self):
        """
        Gets the original_environment of this ConfigurationUsedForCopydeployAPI.
        The environment name from which copy should happen

        :return: The original_environment of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._original_environment

    @original_environment.setter
    def original_environment(self, original_environment):
        """
        Sets the original_environment of this ConfigurationUsedForCopydeployAPI.
        The environment name from which copy should happen

        :param original_environment: The original_environment of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._original_environment = original_environment

    @property
    def new_environment(self):
        """
        Gets the new_environment of this ConfigurationUsedForCopydeployAPI.
        The environment name the copy opeartion should create

        :return: The new_environment of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._new_environment

    @new_environment.setter
    def new_environment(self, new_environment):
        """
        Sets the new_environment of this ConfigurationUsedForCopydeployAPI.
        The environment name the copy opeartion should create

        :param new_environment: The new_environment of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._new_environment = new_environment

    @property
    def new_env_description(self):
        """
        Gets the new_env_description of this ConfigurationUsedForCopydeployAPI.
        New environment description

        :return: The new_env_description of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._new_env_description

    @new_env_description.setter
    def new_env_description(self, new_env_description):
        """
        Sets the new_env_description of this ConfigurationUsedForCopydeployAPI.
        New environment description

        :param new_env_description: The new_env_description of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._new_env_description = new_env_description

    @property
    def new_env_connection(self):
        """
        Gets the new_env_connection of this ConfigurationUsedForCopydeployAPI.
        New environment connection name.Must match one of the names from GET Connection API

        :return: The new_env_connection of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._new_env_connection

    @new_env_connection.setter
    def new_env_connection(self, new_env_connection):
        """
        Sets the new_env_connection of this ConfigurationUsedForCopydeployAPI.
        New environment connection name.Must match one of the names from GET Connection API

        :param new_env_connection: The new_env_connection of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._new_env_connection = new_env_connection

    @property
    def new_env_provider(self):
        """
        Gets the new_env_provider of this ConfigurationUsedForCopydeployAPI.
        New environment Provider name.Must match one of the names from GET Provider API

        :return: The new_env_provider of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._new_env_provider

    @new_env_provider.setter
    def new_env_provider(self, new_env_provider):
        """
        Sets the new_env_provider of this ConfigurationUsedForCopydeployAPI.
        New environment Provider name.Must match one of the names from GET Provider API

        :param new_env_provider: The new_env_provider of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._new_env_provider = new_env_provider

    @property
    def tags(self):
        """
        Gets the tags of this ConfigurationUsedForCopydeployAPI.
        Tags or other input variables name and value JSON

        :return: The tags of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """
        Sets the tags of this ConfigurationUsedForCopydeployAPI.
        Tags or other input variables name and value JSON

        :param tags: The tags of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._tags = tags

    @property
    def copy_parent_environments(self):
        """
        Gets the copy_parent_environments of this ConfigurationUsedForCopydeployAPI.
        set true if it has to copy the parent environments of the original environment

        :return: The copy_parent_environments of this ConfigurationUsedForCopydeployAPI.
        :rtype: bool
        """
        return self._copy_parent_environments

    @copy_parent_environments.setter
    def copy_parent_environments(self, copy_parent_environments):
        """
        Sets the copy_parent_environments of this ConfigurationUsedForCopydeployAPI.
        set true if it has to copy the parent environments of the original environment

        :param copy_parent_environments: The copy_parent_environments of this ConfigurationUsedForCopydeployAPI.
        :type: bool
        """

        self._copy_parent_environments = copy_parent_environments

    @property
    def depends_on_enviroments(self):
        """
        Gets the depends_on_enviroments of this ConfigurationUsedForCopydeployAPI.
        key-value pairs of which environment name dependency should be changed to which name

        :return: The depends_on_enviroments of this ConfigurationUsedForCopydeployAPI.
        :rtype: str
        """
        return self._depends_on_enviroments

    @depends_on_enviroments.setter
    def depends_on_enviroments(self, depends_on_enviroments):
        """
        Sets the depends_on_enviroments of this ConfigurationUsedForCopydeployAPI.
        key-value pairs of which environment name dependency should be changed to which name

        :param depends_on_enviroments: The depends_on_enviroments of this ConfigurationUsedForCopydeployAPI.
        :type: str
        """

        self._depends_on_enviroments = depends_on_enviroments

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ConfigurationUsedForCopydeployAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
