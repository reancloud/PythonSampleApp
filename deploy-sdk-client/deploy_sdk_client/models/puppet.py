# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Puppet(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'package_name': 'str',
        'type': 'str',
        'package_version': 'str',
        'access_token': 'str',
        'attributes': 'list[PackageAttribute]',
        'created_by': 'int',
        'created_on': 'date',
        'decrypted_access_token': 'str',
        'default_package': 'bool',
        'deleted': 'bool',
        'dependent_packages': 'list[Package]',
        'dependent_packages_set': 'list[str]',
        'description': 'str',
        'dn_version': 'str',
        'download_url': 'str',
        'group_name': 'str',
        'id': 'int',
        'modified_by': 'int',
        'modified_on': 'date',
        'released': 'bool',
        'repo_type': 'str',
        'sub_type': 'str',
        'unzipped_name': 'str',
        'visible': 'bool',
        'zip_file_name': 'str',
        'exec_value': 'str',
        'install_module': 'bool',
        'manifest_file': 'str'
    }

    attribute_map = {
        'package_name': 'packageName',
        'type': 'type',
        'package_version': 'packageVersion',
        'access_token': 'accessToken',
        'attributes': 'attributes',
        'created_by': 'createdBy',
        'created_on': 'createdOn',
        'decrypted_access_token': 'decryptedAccessToken',
        'default_package': 'defaultPackage',
        'deleted': 'deleted',
        'dependent_packages': 'dependentPackages',
        'dependent_packages_set': 'dependentPackagesSet',
        'description': 'description',
        'dn_version': 'dnVersion',
        'download_url': 'downloadUrl',
        'group_name': 'groupName',
        'id': 'id',
        'modified_by': 'modifiedBy',
        'modified_on': 'modifiedOn',
        'released': 'released',
        'repo_type': 'repoType',
        'sub_type': 'subType',
        'unzipped_name': 'unzippedName',
        'visible': 'visible',
        'zip_file_name': 'zipFileName',
        'exec_value': 'execValue',
        'install_module': 'installModule',
        'manifest_file': 'manifestFile'
    }

    def __init__(self, package_name=None, type=None, package_version=None, access_token=None, attributes=None, created_by=None, created_on=None, decrypted_access_token=None, default_package=None, deleted=None, dependent_packages=None, dependent_packages_set=None, description=None, dn_version=None, download_url=None, group_name=None, id=None, modified_by=None, modified_on=None, released=None, repo_type=None, sub_type=None, unzipped_name=None, visible=None, zip_file_name=None, exec_value=None, install_module=None, manifest_file=None):
        """
        Puppet - a model defined in Swagger
        """

        self._package_name = None
        self._type = None
        self._package_version = None
        self._access_token = None
        self._attributes = None
        self._created_by = None
        self._created_on = None
        self._decrypted_access_token = None
        self._default_package = None
        self._deleted = None
        self._dependent_packages = None
        self._dependent_packages_set = None
        self._description = None
        self._dn_version = None
        self._download_url = None
        self._group_name = None
        self._id = None
        self._modified_by = None
        self._modified_on = None
        self._released = None
        self._repo_type = None
        self._sub_type = None
        self._unzipped_name = None
        self._visible = None
        self._zip_file_name = None
        self._exec_value = None
        self._install_module = None
        self._manifest_file = None

        if package_name is not None:
          self.package_name = package_name
        if type is not None:
          self.type = type
        if package_version is not None:
          self.package_version = package_version
        if access_token is not None:
          self.access_token = access_token
        if attributes is not None:
          self.attributes = attributes
        if created_by is not None:
          self.created_by = created_by
        if created_on is not None:
          self.created_on = created_on
        if decrypted_access_token is not None:
          self.decrypted_access_token = decrypted_access_token
        if default_package is not None:
          self.default_package = default_package
        if deleted is not None:
          self.deleted = deleted
        if dependent_packages is not None:
          self.dependent_packages = dependent_packages
        if dependent_packages_set is not None:
          self.dependent_packages_set = dependent_packages_set
        if description is not None:
          self.description = description
        if dn_version is not None:
          self.dn_version = dn_version
        if download_url is not None:
          self.download_url = download_url
        if group_name is not None:
          self.group_name = group_name
        if id is not None:
          self.id = id
        if modified_by is not None:
          self.modified_by = modified_by
        if modified_on is not None:
          self.modified_on = modified_on
        if released is not None:
          self.released = released
        if repo_type is not None:
          self.repo_type = repo_type
        if sub_type is not None:
          self.sub_type = sub_type
        if unzipped_name is not None:
          self.unzipped_name = unzipped_name
        if visible is not None:
          self.visible = visible
        if zip_file_name is not None:
          self.zip_file_name = zip_file_name
        if exec_value is not None:
          self.exec_value = exec_value
        if install_module is not None:
          self.install_module = install_module
        if manifest_file is not None:
          self.manifest_file = manifest_file

    @property
    def package_name(self):
        """
        Gets the package_name of this Puppet.
        Name of the package

        :return: The package_name of this Puppet.
        :rtype: str
        """
        return self._package_name

    @package_name.setter
    def package_name(self, package_name):
        """
        Sets the package_name of this Puppet.
        Name of the package

        :param package_name: The package_name of this Puppet.
        :type: str
        """

        self._package_name = package_name

    @property
    def type(self):
        """
        Gets the type of this Puppet.

        :return: The type of this Puppet.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this Puppet.

        :param type: The type of this Puppet.
        :type: str
        """

        self._type = type

    @property
    def package_version(self):
        """
        Gets the package_version of this Puppet.
        Version of the package

        :return: The package_version of this Puppet.
        :rtype: str
        """
        return self._package_version

    @package_version.setter
    def package_version(self, package_version):
        """
        Sets the package_version of this Puppet.
        Version of the package

        :param package_version: The package_version of this Puppet.
        :type: str
        """

        self._package_version = package_version

    @property
    def access_token(self):
        """
        Gets the access_token of this Puppet.
        Access token to download package from URL.Required for private repos

        :return: The access_token of this Puppet.
        :rtype: str
        """
        return self._access_token

    @access_token.setter
    def access_token(self, access_token):
        """
        Sets the access_token of this Puppet.
        Access token to download package from URL.Required for private repos

        :param access_token: The access_token of this Puppet.
        :type: str
        """

        self._access_token = access_token

    @property
    def attributes(self):
        """
        Gets the attributes of this Puppet.

        :return: The attributes of this Puppet.
        :rtype: list[PackageAttribute]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this Puppet.

        :param attributes: The attributes of this Puppet.
        :type: list[PackageAttribute]
        """

        self._attributes = attributes

    @property
    def created_by(self):
        """
        Gets the created_by of this Puppet.
        Created By User(Id)

        :return: The created_by of this Puppet.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Puppet.
        Created By User(Id)

        :param created_by: The created_by of this Puppet.
        :type: int
        """

        self._created_by = created_by

    @property
    def created_on(self):
        """
        Gets the created_on of this Puppet.
        Created at Date Time

        :return: The created_on of this Puppet.
        :rtype: date
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Puppet.
        Created at Date Time

        :param created_on: The created_on of this Puppet.
        :type: date
        """

        self._created_on = created_on

    @property
    def decrypted_access_token(self):
        """
        Gets the decrypted_access_token of this Puppet.

        :return: The decrypted_access_token of this Puppet.
        :rtype: str
        """
        return self._decrypted_access_token

    @decrypted_access_token.setter
    def decrypted_access_token(self, decrypted_access_token):
        """
        Sets the decrypted_access_token of this Puppet.

        :param decrypted_access_token: The decrypted_access_token of this Puppet.
        :type: str
        """

        self._decrypted_access_token = decrypted_access_token

    @property
    def default_package(self):
        """
        Gets the default_package of this Puppet.
        If package is managed By REAN Cloud

        :return: The default_package of this Puppet.
        :rtype: bool
        """
        return self._default_package

    @default_package.setter
    def default_package(self, default_package):
        """
        Sets the default_package of this Puppet.
        If package is managed By REAN Cloud

        :param default_package: The default_package of this Puppet.
        :type: bool
        """

        self._default_package = default_package

    @property
    def deleted(self):
        """
        Gets the deleted of this Puppet.
        Deleted Flag

        :return: The deleted of this Puppet.
        :rtype: bool
        """
        return self._deleted

    @deleted.setter
    def deleted(self, deleted):
        """
        Sets the deleted of this Puppet.
        Deleted Flag

        :param deleted: The deleted of this Puppet.
        :type: bool
        """

        self._deleted = deleted

    @property
    def dependent_packages(self):
        """
        Gets the dependent_packages of this Puppet.
        Dependent Packages

        :return: The dependent_packages of this Puppet.
        :rtype: list[Package]
        """
        return self._dependent_packages

    @dependent_packages.setter
    def dependent_packages(self, dependent_packages):
        """
        Sets the dependent_packages of this Puppet.
        Dependent Packages

        :param dependent_packages: The dependent_packages of this Puppet.
        :type: list[Package]
        """

        self._dependent_packages = dependent_packages

    @property
    def dependent_packages_set(self):
        """
        Gets the dependent_packages_set of this Puppet.
        List Dependent Packages names

        :return: The dependent_packages_set of this Puppet.
        :rtype: list[str]
        """
        return self._dependent_packages_set

    @dependent_packages_set.setter
    def dependent_packages_set(self, dependent_packages_set):
        """
        Sets the dependent_packages_set of this Puppet.
        List Dependent Packages names

        :param dependent_packages_set: The dependent_packages_set of this Puppet.
        :type: list[str]
        """

        self._dependent_packages_set = dependent_packages_set

    @property
    def description(self):
        """
        Gets the description of this Puppet.
        Description of the package

        :return: The description of this Puppet.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Puppet.
        Description of the package

        :param description: The description of this Puppet.
        :type: str
        """

        self._description = description

    @property
    def dn_version(self):
        """
        Gets the dn_version of this Puppet.
        REAN Deploy version

        :return: The dn_version of this Puppet.
        :rtype: str
        """
        return self._dn_version

    @dn_version.setter
    def dn_version(self, dn_version):
        """
        Sets the dn_version of this Puppet.
        REAN Deploy version

        :param dn_version: The dn_version of this Puppet.
        :type: str
        """

        self._dn_version = dn_version

    @property
    def download_url(self):
        """
        Gets the download_url of this Puppet.
        The URL to download the package on provisioning VM

        :return: The download_url of this Puppet.
        :rtype: str
        """
        return self._download_url

    @download_url.setter
    def download_url(self, download_url):
        """
        Sets the download_url of this Puppet.
        The URL to download the package on provisioning VM

        :param download_url: The download_url of this Puppet.
        :type: str
        """

        self._download_url = download_url

    @property
    def group_name(self):
        """
        Gets the group_name of this Puppet.

        :return: The group_name of this Puppet.
        :rtype: str
        """
        return self._group_name

    @group_name.setter
    def group_name(self, group_name):
        """
        Sets the group_name of this Puppet.

        :param group_name: The group_name of this Puppet.
        :type: str
        """

        self._group_name = group_name

    @property
    def id(self):
        """
        Gets the id of this Puppet.

        :return: The id of this Puppet.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Puppet.

        :param id: The id of this Puppet.
        :type: int
        """

        self._id = id

    @property
    def modified_by(self):
        """
        Gets the modified_by of this Puppet.
        Modified By User(Id)

        :return: The modified_by of this Puppet.
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this Puppet.
        Modified By User(Id)

        :param modified_by: The modified_by of this Puppet.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def modified_on(self):
        """
        Gets the modified_on of this Puppet.
        Modified at Date Time

        :return: The modified_on of this Puppet.
        :rtype: date
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this Puppet.
        Modified at Date Time

        :param modified_on: The modified_on of this Puppet.
        :type: date
        """

        self._modified_on = modified_on

    @property
    def released(self):
        """
        Gets the released of this Puppet.
        true if package is release

        :return: The released of this Puppet.
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """
        Sets the released of this Puppet.
        true if package is release

        :param released: The released of this Puppet.
        :type: bool
        """

        self._released = released

    @property
    def repo_type(self):
        """
        Gets the repo_type of this Puppet.

        :return: The repo_type of this Puppet.
        :rtype: str
        """
        return self._repo_type

    @repo_type.setter
    def repo_type(self, repo_type):
        """
        Sets the repo_type of this Puppet.

        :param repo_type: The repo_type of this Puppet.
        :type: str
        """

        self._repo_type = repo_type

    @property
    def sub_type(self):
        """
        Gets the sub_type of this Puppet.
        sub type of package

        :return: The sub_type of this Puppet.
        :rtype: str
        """
        return self._sub_type

    @sub_type.setter
    def sub_type(self, sub_type):
        """
        Sets the sub_type of this Puppet.
        sub type of package

        :param sub_type: The sub_type of this Puppet.
        :type: str
        """

        self._sub_type = sub_type

    @property
    def unzipped_name(self):
        """
        Gets the unzipped_name of this Puppet.
        The folder name in which the package contents are extracted on provisioning VM

        :return: The unzipped_name of this Puppet.
        :rtype: str
        """
        return self._unzipped_name

    @unzipped_name.setter
    def unzipped_name(self, unzipped_name):
        """
        Sets the unzipped_name of this Puppet.
        The folder name in which the package contents are extracted on provisioning VM

        :param unzipped_name: The unzipped_name of this Puppet.
        :type: str
        """

        self._unzipped_name = unzipped_name

    @property
    def visible(self):
        """
        Gets the visible of this Puppet.
        List of Dependent Packages names

        :return: The visible of this Puppet.
        :rtype: bool
        """
        return self._visible

    @visible.setter
    def visible(self, visible):
        """
        Sets the visible of this Puppet.
        List of Dependent Packages names

        :param visible: The visible of this Puppet.
        :type: bool
        """

        self._visible = visible

    @property
    def zip_file_name(self):
        """
        Gets the zip_file_name of this Puppet.
        The name with which the download package archive should be saved on provisioning VM

        :return: The zip_file_name of this Puppet.
        :rtype: str
        """
        return self._zip_file_name

    @zip_file_name.setter
    def zip_file_name(self, zip_file_name):
        """
        Sets the zip_file_name of this Puppet.
        The name with which the download package archive should be saved on provisioning VM

        :param zip_file_name: The zip_file_name of this Puppet.
        :type: str
        """

        self._zip_file_name = zip_file_name

    @property
    def exec_value(self):
        """
        Gets the exec_value of this Puppet.

        :return: The exec_value of this Puppet.
        :rtype: str
        """
        return self._exec_value

    @exec_value.setter
    def exec_value(self, exec_value):
        """
        Sets the exec_value of this Puppet.

        :param exec_value: The exec_value of this Puppet.
        :type: str
        """

        self._exec_value = exec_value

    @property
    def install_module(self):
        """
        Gets the install_module of this Puppet.

        :return: The install_module of this Puppet.
        :rtype: bool
        """
        return self._install_module

    @install_module.setter
    def install_module(self, install_module):
        """
        Sets the install_module of this Puppet.

        :param install_module: The install_module of this Puppet.
        :type: bool
        """

        self._install_module = install_module

    @property
    def manifest_file(self):
        """
        Gets the manifest_file of this Puppet.

        :return: The manifest_file of this Puppet.
        :rtype: str
        """
        return self._manifest_file

    @manifest_file.setter
    def manifest_file(self, manifest_file):
        """
        Sets the manifest_file of this Puppet.

        :param manifest_file: The manifest_file of this Puppet.
        :type: str
        """

        self._manifest_file = manifest_file

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Puppet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
