# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class Environment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'created_by': 'int',
        'modified_by': 'int',
        'created_on': 'date',
        'modified_on': 'date',
        'name': 'str',
        'description': 'str',
        'provider': 'SaveProvider',
        'connection_id': 'int',
        'chef_server_id': 'int',
        'chef_environment': 'str',
        'region': 'str',
        'env_version': 'str',
        'base_env_id': 'int',
        'released': 'bool',
        'blueprint_dep_status': 'str',
        'restart_blueprint': 'bool',
        'status': 'str',
        'ref_env_id': 'str',
        'config': 'EnvConfig',
        'custom_tag': 'CustomTag',
        'terraform_version': 'str',
        'public': 'bool'
    }

    attribute_map = {
        'id': 'id',
        'created_by': 'createdBy',
        'modified_by': 'modifiedBy',
        'created_on': 'createdOn',
        'modified_on': 'modifiedOn',
        'name': 'name',
        'description': 'description',
        'provider': 'provider',
        'connection_id': 'connectionId',
        'chef_server_id': 'chefServerId',
        'chef_environment': 'chefEnvironment',
        'region': 'region',
        'env_version': 'envVersion',
        'base_env_id': 'baseEnvId',
        'released': 'released',
        'blueprint_dep_status': 'blueprintDepStatus',
        'restart_blueprint': 'restartBlueprint',
        'status': 'status',
        'ref_env_id': 'refEnvId',
        'config': 'config',
        'custom_tag': 'customTag',
        'terraform_version': 'terraformVersion',
        'public': 'public'
    }

    def __init__(self, id=None, created_by=None, modified_by=None, created_on=None, modified_on=None, name=None, description=None, provider=None, connection_id=None, chef_server_id=None, chef_environment=None, region=None, env_version=None, base_env_id=None, released=None, blueprint_dep_status=None, restart_blueprint=None, status=None, ref_env_id=None, config=None, custom_tag=None, terraform_version=None, public=None):
        """
        Environment - a model defined in Swagger
        """

        self._id = None
        self._created_by = None
        self._modified_by = None
        self._created_on = None
        self._modified_on = None
        self._name = None
        self._description = None
        self._provider = None
        self._connection_id = None
        self._chef_server_id = None
        self._chef_environment = None
        self._region = None
        self._env_version = None
        self._base_env_id = None
        self._released = None
        self._blueprint_dep_status = None
        self._restart_blueprint = None
        self._status = None
        self._ref_env_id = None
        self._config = None
        self._custom_tag = None
        self._terraform_version = None
        self._public = None

        if id is not None:
          self.id = id
        if created_by is not None:
          self.created_by = created_by
        if modified_by is not None:
          self.modified_by = modified_by
        if created_on is not None:
          self.created_on = created_on
        if modified_on is not None:
          self.modified_on = modified_on
        self.name = name
        self.description = description
        self.provider = provider
        self.connection_id = connection_id
        if chef_server_id is not None:
          self.chef_server_id = chef_server_id
        if chef_environment is not None:
          self.chef_environment = chef_environment
        if region is not None:
          self.region = region
        self.env_version = env_version
        if base_env_id is not None:
          self.base_env_id = base_env_id
        if released is not None:
          self.released = released
        if blueprint_dep_status is not None:
          self.blueprint_dep_status = blueprint_dep_status
        if restart_blueprint is not None:
          self.restart_blueprint = restart_blueprint
        if status is not None:
          self.status = status
        if ref_env_id is not None:
          self.ref_env_id = ref_env_id
        if config is not None:
          self.config = config
        if custom_tag is not None:
          self.custom_tag = custom_tag
        if terraform_version is not None:
          self.terraform_version = terraform_version
        if public is not None:
          self.public = public

    @property
    def id(self):
        """
        Gets the id of this Environment.

        :return: The id of this Environment.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this Environment.

        :param id: The id of this Environment.
        :type: int
        """

        self._id = id

    @property
    def created_by(self):
        """
        Gets the created_by of this Environment.
        Created By User(Id)

        :return: The created_by of this Environment.
        :rtype: int
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """
        Sets the created_by of this Environment.
        Created By User(Id)

        :param created_by: The created_by of this Environment.
        :type: int
        """

        self._created_by = created_by

    @property
    def modified_by(self):
        """
        Gets the modified_by of this Environment.
        Modified By User(Id)

        :return: The modified_by of this Environment.
        :rtype: int
        """
        return self._modified_by

    @modified_by.setter
    def modified_by(self, modified_by):
        """
        Sets the modified_by of this Environment.
        Modified By User(Id)

        :param modified_by: The modified_by of this Environment.
        :type: int
        """

        self._modified_by = modified_by

    @property
    def created_on(self):
        """
        Gets the created_on of this Environment.
        Created at Date Time

        :return: The created_on of this Environment.
        :rtype: date
        """
        return self._created_on

    @created_on.setter
    def created_on(self, created_on):
        """
        Sets the created_on of this Environment.
        Created at Date Time

        :param created_on: The created_on of this Environment.
        :type: date
        """

        self._created_on = created_on

    @property
    def modified_on(self):
        """
        Gets the modified_on of this Environment.
        Modified at Date Time

        :return: The modified_on of this Environment.
        :rtype: date
        """
        return self._modified_on

    @modified_on.setter
    def modified_on(self, modified_on):
        """
        Sets the modified_on of this Environment.
        Modified at Date Time

        :param modified_on: The modified_on of this Environment.
        :type: date
        """

        self._modified_on = modified_on

    @property
    def name(self):
        """
        Gets the name of this Environment.
        Unique name of environment

        :return: The name of this Environment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this Environment.
        Unique name of environment

        :param name: The name of this Environment.
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this Environment.
        Description of environment

        :return: The description of this Environment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this Environment.
        Description of environment

        :param description: The description of this Environment.
        :type: str
        """
        if description is None:
            raise ValueError("Invalid value for `description`, must not be `None`")

        self._description = description

    @property
    def provider(self):
        """
        Gets the provider of this Environment.
        Default provider to deploy an environment

        :return: The provider of this Environment.
        :rtype: SaveProvider
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """
        Sets the provider of this Environment.
        Default provider to deploy an environment

        :param provider: The provider of this Environment.
        :type: SaveProvider
        """
        if provider is None:
            raise ValueError("Invalid value for `provider`, must not be `None`")

        self._provider = provider

    @property
    def connection_id(self):
        """
        Gets the connection_id of this Environment.
        Default connection to configure compute resources in an Environment

        :return: The connection_id of this Environment.
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """
        Sets the connection_id of this Environment.
        Default connection to configure compute resources in an Environment

        :param connection_id: The connection_id of this Environment.
        :type: int
        """
        if connection_id is None:
            raise ValueError("Invalid value for `connection_id`, must not be `None`")

        self._connection_id = connection_id

    @property
    def chef_server_id(self):
        """
        Gets the chef_server_id of this Environment.
        Chef Server Id (Only when REAN Deploy is configured for Chefserver)

        :return: The chef_server_id of this Environment.
        :rtype: int
        """
        return self._chef_server_id

    @chef_server_id.setter
    def chef_server_id(self, chef_server_id):
        """
        Sets the chef_server_id of this Environment.
        Chef Server Id (Only when REAN Deploy is configured for Chefserver)

        :param chef_server_id: The chef_server_id of this Environment.
        :type: int
        """

        self._chef_server_id = chef_server_id

    @property
    def chef_environment(self):
        """
        Gets the chef_environment of this Environment.
        Chef Environment (Only when REAN Deploy is configured for Chefserver)

        :return: The chef_environment of this Environment.
        :rtype: str
        """
        return self._chef_environment

    @chef_environment.setter
    def chef_environment(self, chef_environment):
        """
        Sets the chef_environment of this Environment.
        Chef Environment (Only when REAN Deploy is configured for Chefserver)

        :param chef_environment: The chef_environment of this Environment.
        :type: str
        """

        self._chef_environment = chef_environment

    @property
    def region(self):
        """
        Gets the region of this Environment.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :return: The region of this Environment.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this Environment.
        Region into which environment resources should be launched. Defaults to set Provider region if any

        :param region: The region of this Environment.
        :type: str
        """

        self._region = region

    @property
    def env_version(self):
        """
        Gets the env_version of this Environment.
        Version of the environment

        :return: The env_version of this Environment.
        :rtype: str
        """
        return self._env_version

    @env_version.setter
    def env_version(self, env_version):
        """
        Sets the env_version of this Environment.
        Version of the environment

        :param env_version: The env_version of this Environment.
        :type: str
        """
        if env_version is None:
            raise ValueError("Invalid value for `env_version`, must not be `None`")

        self._env_version = env_version

    @property
    def base_env_id(self):
        """
        Gets the base_env_id of this Environment.
        Base version enviroment id

        :return: The base_env_id of this Environment.
        :rtype: int
        """
        return self._base_env_id

    @base_env_id.setter
    def base_env_id(self, base_env_id):
        """
        Sets the base_env_id of this Environment.
        Base version enviroment id

        :param base_env_id: The base_env_id of this Environment.
        :type: int
        """

        self._base_env_id = base_env_id

    @property
    def released(self):
        """
        Gets the released of this Environment.
        Flag to Release environment

        :return: The released of this Environment.
        :rtype: bool
        """
        return self._released

    @released.setter
    def released(self, released):
        """
        Sets the released of this Environment.
        Flag to Release environment

        :param released: The released of this Environment.
        :type: bool
        """

        self._released = released

    @property
    def blueprint_dep_status(self):
        """
        Gets the blueprint_dep_status of this Environment.
        Blueprint Deployment status

        :return: The blueprint_dep_status of this Environment.
        :rtype: str
        """
        return self._blueprint_dep_status

    @blueprint_dep_status.setter
    def blueprint_dep_status(self, blueprint_dep_status):
        """
        Sets the blueprint_dep_status of this Environment.
        Blueprint Deployment status

        :param blueprint_dep_status: The blueprint_dep_status of this Environment.
        :type: str
        """

        self._blueprint_dep_status = blueprint_dep_status

    @property
    def restart_blueprint(self):
        """
        Gets the restart_blueprint of this Environment.
        Restart Blueprint Deployment

        :return: The restart_blueprint of this Environment.
        :rtype: bool
        """
        return self._restart_blueprint

    @restart_blueprint.setter
    def restart_blueprint(self, restart_blueprint):
        """
        Sets the restart_blueprint of this Environment.
        Restart Blueprint Deployment

        :param restart_blueprint: The restart_blueprint of this Environment.
        :type: bool
        """

        self._restart_blueprint = restart_blueprint

    @property
    def status(self):
        """
        Gets the status of this Environment.

        :return: The status of this Environment.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """
        Sets the status of this Environment.

        :param status: The status of this Environment.
        :type: str
        """

        self._status = status

    @property
    def ref_env_id(self):
        """
        Gets the ref_env_id of this Environment.
        The environment id from which it is copied

        :return: The ref_env_id of this Environment.
        :rtype: str
        """
        return self._ref_env_id

    @ref_env_id.setter
    def ref_env_id(self, ref_env_id):
        """
        Sets the ref_env_id of this Environment.
        The environment id from which it is copied

        :param ref_env_id: The ref_env_id of this Environment.
        :type: str
        """

        self._ref_env_id = ref_env_id

    @property
    def config(self):
        """
        Gets the config of this Environment.
        Environment Configuration Object

        :return: The config of this Environment.
        :rtype: EnvConfig
        """
        return self._config

    @config.setter
    def config(self, config):
        """
        Sets the config of this Environment.
        Environment Configuration Object

        :param config: The config of this Environment.
        :type: EnvConfig
        """

        self._config = config

    @property
    def custom_tag(self):
        """
        Gets the custom_tag of this Environment.
        Custom tag for environment

        :return: The custom_tag of this Environment.
        :rtype: CustomTag
        """
        return self._custom_tag

    @custom_tag.setter
    def custom_tag(self, custom_tag):
        """
        Sets the custom_tag of this Environment.
        Custom tag for environment

        :param custom_tag: The custom_tag of this Environment.
        :type: CustomTag
        """

        self._custom_tag = custom_tag

    @property
    def terraform_version(self):
        """
        Gets the terraform_version of this Environment.
        Terraform version with environment is created

        :return: The terraform_version of this Environment.
        :rtype: str
        """
        return self._terraform_version

    @terraform_version.setter
    def terraform_version(self, terraform_version):
        """
        Sets the terraform_version of this Environment.
        Terraform version with environment is created

        :param terraform_version: The terraform_version of this Environment.
        :type: str
        """

        self._terraform_version = terraform_version

    @property
    def public(self):
        """
        Gets the public of this Environment.

        :return: The public of this Environment.
        :rtype: bool
        """
        return self._public

    @public.setter
    def public(self, public):
        """
        Sets the public of this Environment.

        :param public: The public of this Environment.
        :type: bool
        """

        self._public = public

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, Environment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
