# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BlueprintEnvImport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environments': 'list[ExportedEnvironment]',
        'rean_deploy_version': 'str',
        'packages': 'list[Package]'
    }

    attribute_map = {
        'environments': 'environments',
        'rean_deploy_version': 'rean_deploy_version',
        'packages': 'packages'
    }

    def __init__(self, environments=None, rean_deploy_version=None, packages=None):
        """
        BlueprintEnvImport - a model defined in Swagger
        """

        self._environments = None
        self._rean_deploy_version = None
        self._packages = None

        if environments is not None:
          self.environments = environments
        if rean_deploy_version is not None:
          self.rean_deploy_version = rean_deploy_version
        if packages is not None:
          self.packages = packages

    @property
    def environments(self):
        """
        Gets the environments of this BlueprintEnvImport.

        :return: The environments of this BlueprintEnvImport.
        :rtype: list[ExportedEnvironment]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """
        Sets the environments of this BlueprintEnvImport.

        :param environments: The environments of this BlueprintEnvImport.
        :type: list[ExportedEnvironment]
        """

        self._environments = environments

    @property
    def rean_deploy_version(self):
        """
        Gets the rean_deploy_version of this BlueprintEnvImport.

        :return: The rean_deploy_version of this BlueprintEnvImport.
        :rtype: str
        """
        return self._rean_deploy_version

    @rean_deploy_version.setter
    def rean_deploy_version(self, rean_deploy_version):
        """
        Sets the rean_deploy_version of this BlueprintEnvImport.

        :param rean_deploy_version: The rean_deploy_version of this BlueprintEnvImport.
        :type: str
        """

        self._rean_deploy_version = rean_deploy_version

    @property
    def packages(self):
        """
        Gets the packages of this BlueprintEnvImport.

        :return: The packages of this BlueprintEnvImport.
        :rtype: list[Package]
        """
        return self._packages

    @packages.setter
    def packages(self, packages):
        """
        Sets the packages of this BlueprintEnvImport.

        :param packages: The packages of this BlueprintEnvImport.
        :type: list[Package]
        """

        self._packages = packages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BlueprintEnvImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
