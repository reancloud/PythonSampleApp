# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ChangedResourceDto(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'changed_attributes': 'list[ChangedAttributeDto]',
        'new_packages': 'list[str]',
        'removed_packages': 'list[str]',
        'changed_packages': 'list[ChangedPackageDto]'
    }

    attribute_map = {
        'name': 'name',
        'changed_attributes': 'changedAttributes',
        'new_packages': 'newPackages',
        'removed_packages': 'removedPackages',
        'changed_packages': 'changedPackages'
    }

    def __init__(self, name=None, changed_attributes=None, new_packages=None, removed_packages=None, changed_packages=None):
        """
        ChangedResourceDto - a model defined in Swagger
        """

        self._name = None
        self._changed_attributes = None
        self._new_packages = None
        self._removed_packages = None
        self._changed_packages = None

        if name is not None:
          self.name = name
        if changed_attributes is not None:
          self.changed_attributes = changed_attributes
        if new_packages is not None:
          self.new_packages = new_packages
        if removed_packages is not None:
          self.removed_packages = removed_packages
        if changed_packages is not None:
          self.changed_packages = changed_packages

    @property
    def name(self):
        """
        Gets the name of this ChangedResourceDto.

        :return: The name of this ChangedResourceDto.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ChangedResourceDto.

        :param name: The name of this ChangedResourceDto.
        :type: str
        """

        self._name = name

    @property
    def changed_attributes(self):
        """
        Gets the changed_attributes of this ChangedResourceDto.

        :return: The changed_attributes of this ChangedResourceDto.
        :rtype: list[ChangedAttributeDto]
        """
        return self._changed_attributes

    @changed_attributes.setter
    def changed_attributes(self, changed_attributes):
        """
        Sets the changed_attributes of this ChangedResourceDto.

        :param changed_attributes: The changed_attributes of this ChangedResourceDto.
        :type: list[ChangedAttributeDto]
        """

        self._changed_attributes = changed_attributes

    @property
    def new_packages(self):
        """
        Gets the new_packages of this ChangedResourceDto.

        :return: The new_packages of this ChangedResourceDto.
        :rtype: list[str]
        """
        return self._new_packages

    @new_packages.setter
    def new_packages(self, new_packages):
        """
        Sets the new_packages of this ChangedResourceDto.

        :param new_packages: The new_packages of this ChangedResourceDto.
        :type: list[str]
        """

        self._new_packages = new_packages

    @property
    def removed_packages(self):
        """
        Gets the removed_packages of this ChangedResourceDto.

        :return: The removed_packages of this ChangedResourceDto.
        :rtype: list[str]
        """
        return self._removed_packages

    @removed_packages.setter
    def removed_packages(self, removed_packages):
        """
        Sets the removed_packages of this ChangedResourceDto.

        :param removed_packages: The removed_packages of this ChangedResourceDto.
        :type: list[str]
        """

        self._removed_packages = removed_packages

    @property
    def changed_packages(self):
        """
        Gets the changed_packages of this ChangedResourceDto.

        :return: The changed_packages of this ChangedResourceDto.
        :rtype: list[ChangedPackageDto]
        """
        return self._changed_packages

    @changed_packages.setter
    def changed_packages(self, changed_packages):
        """
        Sets the changed_packages of this ChangedResourceDto.

        :param changed_packages: The changed_packages of this ChangedResourceDto.
        :type: list[ChangedPackageDto]
        """

        self._changed_packages = changed_packages

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ChangedResourceDto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
