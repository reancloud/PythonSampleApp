# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvironmentSaveAll(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment': 'Environment',
        'resource_name_changes': 'dict(str, str)',
        'resources_to_save': 'list[EnvResource]'
    }

    attribute_map = {
        'environment': 'environment',
        'resource_name_changes': 'resourceNameChanges',
        'resources_to_save': 'resourcesToSave'
    }

    def __init__(self, environment=None, resource_name_changes=None, resources_to_save=None):
        """
        EnvironmentSaveAll - a model defined in Swagger
        """

        self._environment = None
        self._resource_name_changes = None
        self._resources_to_save = None

        self.environment = environment
        if resource_name_changes is not None:
          self.resource_name_changes = resource_name_changes
        if resources_to_save is not None:
          self.resources_to_save = resources_to_save

    @property
    def environment(self):
        """
        Gets the environment of this EnvironmentSaveAll.
        Environment to save

        :return: The environment of this EnvironmentSaveAll.
        :rtype: Environment
        """
        return self._environment

    @environment.setter
    def environment(self, environment):
        """
        Sets the environment of this EnvironmentSaveAll.
        Environment to save

        :param environment: The environment of this EnvironmentSaveAll.
        :type: Environment
        """
        if environment is None:
            raise ValueError("Invalid value for `environment`, must not be `None`")

        self._environment = environment

    @property
    def resource_name_changes(self):
        """
        Gets the resource_name_changes of this EnvironmentSaveAll.

        :return: The resource_name_changes of this EnvironmentSaveAll.
        :rtype: dict(str, str)
        """
        return self._resource_name_changes

    @resource_name_changes.setter
    def resource_name_changes(self, resource_name_changes):
        """
        Sets the resource_name_changes of this EnvironmentSaveAll.

        :param resource_name_changes: The resource_name_changes of this EnvironmentSaveAll.
        :type: dict(str, str)
        """

        self._resource_name_changes = resource_name_changes

    @property
    def resources_to_save(self):
        """
        Gets the resources_to_save of this EnvironmentSaveAll.

        :return: The resources_to_save of this EnvironmentSaveAll.
        :rtype: list[EnvResource]
        """
        return self._resources_to_save

    @resources_to_save.setter
    def resources_to_save(self, resources_to_save):
        """
        Sets the resources_to_save of this EnvironmentSaveAll.

        :param resources_to_save: The resources_to_save of this EnvironmentSaveAll.
        :type: list[EnvResource]
        """

        self._resources_to_save = resources_to_save

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvironmentSaveAll):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
