# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ExportedEnvironment(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'connection_name': 'str',
        'connection_type': 'str',
        'description': 'str',
        'env_version': 'str',
        'exported_by_email': 'str',
        'exported_on': 'datetime',
        'layout': 'str',
        'location': 'str',
        'post_deploy_script': 'str',
        'post_destroy_script': 'str',
        'pre_deploy_script': 'str',
        'pre_destroy_script': 'str',
        'provider_name': 'str',
        'provider_type': 'str',
        'region': 'str',
        'resources': 'list[ExportedResource]',
        'type': 'str'
    }

    attribute_map = {
        'name': 'name',
        'connection_name': 'connectionName',
        'connection_type': 'connectionType',
        'description': 'description',
        'env_version': 'envVersion',
        'exported_by_email': 'exportedByEmail',
        'exported_on': 'exportedOn',
        'layout': 'layout',
        'location': 'location',
        'post_deploy_script': 'postDeployScript',
        'post_destroy_script': 'postDestroyScript',
        'pre_deploy_script': 'preDeployScript',
        'pre_destroy_script': 'preDestroyScript',
        'provider_name': 'providerName',
        'provider_type': 'providerType',
        'region': 'region',
        'resources': 'resources',
        'type': 'type'
    }

    def __init__(self, name=None, connection_name=None, connection_type=None, description=None, env_version=None, exported_by_email=None, exported_on=None, layout=None, location=None, post_deploy_script=None, post_destroy_script=None, pre_deploy_script=None, pre_destroy_script=None, provider_name=None, provider_type=None, region=None, resources=None, type=None):
        """
        ExportedEnvironment - a model defined in Swagger
        """

        self._name = None
        self._connection_name = None
        self._connection_type = None
        self._description = None
        self._env_version = None
        self._exported_by_email = None
        self._exported_on = None
        self._layout = None
        self._location = None
        self._post_deploy_script = None
        self._post_destroy_script = None
        self._pre_deploy_script = None
        self._pre_destroy_script = None
        self._provider_name = None
        self._provider_type = None
        self._region = None
        self._resources = None
        self._type = None

        if name is not None:
          self.name = name
        if connection_name is not None:
          self.connection_name = connection_name
        if connection_type is not None:
          self.connection_type = connection_type
        if description is not None:
          self.description = description
        if env_version is not None:
          self.env_version = env_version
        if exported_by_email is not None:
          self.exported_by_email = exported_by_email
        if exported_on is not None:
          self.exported_on = exported_on
        if layout is not None:
          self.layout = layout
        if location is not None:
          self.location = location
        if post_deploy_script is not None:
          self.post_deploy_script = post_deploy_script
        if post_destroy_script is not None:
          self.post_destroy_script = post_destroy_script
        if pre_deploy_script is not None:
          self.pre_deploy_script = pre_deploy_script
        if pre_destroy_script is not None:
          self.pre_destroy_script = pre_destroy_script
        if provider_name is not None:
          self.provider_name = provider_name
        if provider_type is not None:
          self.provider_type = provider_type
        if region is not None:
          self.region = region
        if resources is not None:
          self.resources = resources
        if type is not None:
          self.type = type

    @property
    def name(self):
        """
        Gets the name of this ExportedEnvironment.

        :return: The name of this ExportedEnvironment.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ExportedEnvironment.

        :param name: The name of this ExportedEnvironment.
        :type: str
        """

        self._name = name

    @property
    def connection_name(self):
        """
        Gets the connection_name of this ExportedEnvironment.

        :return: The connection_name of this ExportedEnvironment.
        :rtype: str
        """
        return self._connection_name

    @connection_name.setter
    def connection_name(self, connection_name):
        """
        Sets the connection_name of this ExportedEnvironment.

        :param connection_name: The connection_name of this ExportedEnvironment.
        :type: str
        """

        self._connection_name = connection_name

    @property
    def connection_type(self):
        """
        Gets the connection_type of this ExportedEnvironment.

        :return: The connection_type of this ExportedEnvironment.
        :rtype: str
        """
        return self._connection_type

    @connection_type.setter
    def connection_type(self, connection_type):
        """
        Sets the connection_type of this ExportedEnvironment.

        :param connection_type: The connection_type of this ExportedEnvironment.
        :type: str
        """

        self._connection_type = connection_type

    @property
    def description(self):
        """
        Gets the description of this ExportedEnvironment.

        :return: The description of this ExportedEnvironment.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ExportedEnvironment.

        :param description: The description of this ExportedEnvironment.
        :type: str
        """

        self._description = description

    @property
    def env_version(self):
        """
        Gets the env_version of this ExportedEnvironment.

        :return: The env_version of this ExportedEnvironment.
        :rtype: str
        """
        return self._env_version

    @env_version.setter
    def env_version(self, env_version):
        """
        Sets the env_version of this ExportedEnvironment.

        :param env_version: The env_version of this ExportedEnvironment.
        :type: str
        """

        self._env_version = env_version

    @property
    def exported_by_email(self):
        """
        Gets the exported_by_email of this ExportedEnvironment.

        :return: The exported_by_email of this ExportedEnvironment.
        :rtype: str
        """
        return self._exported_by_email

    @exported_by_email.setter
    def exported_by_email(self, exported_by_email):
        """
        Sets the exported_by_email of this ExportedEnvironment.

        :param exported_by_email: The exported_by_email of this ExportedEnvironment.
        :type: str
        """

        self._exported_by_email = exported_by_email

    @property
    def exported_on(self):
        """
        Gets the exported_on of this ExportedEnvironment.

        :return: The exported_on of this ExportedEnvironment.
        :rtype: datetime
        """
        return self._exported_on

    @exported_on.setter
    def exported_on(self, exported_on):
        """
        Sets the exported_on of this ExportedEnvironment.

        :param exported_on: The exported_on of this ExportedEnvironment.
        :type: datetime
        """

        self._exported_on = exported_on

    @property
    def layout(self):
        """
        Gets the layout of this ExportedEnvironment.

        :return: The layout of this ExportedEnvironment.
        :rtype: str
        """
        return self._layout

    @layout.setter
    def layout(self, layout):
        """
        Sets the layout of this ExportedEnvironment.

        :param layout: The layout of this ExportedEnvironment.
        :type: str
        """

        self._layout = layout

    @property
    def location(self):
        """
        Gets the location of this ExportedEnvironment.

        :return: The location of this ExportedEnvironment.
        :rtype: str
        """
        return self._location

    @location.setter
    def location(self, location):
        """
        Sets the location of this ExportedEnvironment.

        :param location: The location of this ExportedEnvironment.
        :type: str
        """

        self._location = location

    @property
    def post_deploy_script(self):
        """
        Gets the post_deploy_script of this ExportedEnvironment.

        :return: The post_deploy_script of this ExportedEnvironment.
        :rtype: str
        """
        return self._post_deploy_script

    @post_deploy_script.setter
    def post_deploy_script(self, post_deploy_script):
        """
        Sets the post_deploy_script of this ExportedEnvironment.

        :param post_deploy_script: The post_deploy_script of this ExportedEnvironment.
        :type: str
        """

        self._post_deploy_script = post_deploy_script

    @property
    def post_destroy_script(self):
        """
        Gets the post_destroy_script of this ExportedEnvironment.

        :return: The post_destroy_script of this ExportedEnvironment.
        :rtype: str
        """
        return self._post_destroy_script

    @post_destroy_script.setter
    def post_destroy_script(self, post_destroy_script):
        """
        Sets the post_destroy_script of this ExportedEnvironment.

        :param post_destroy_script: The post_destroy_script of this ExportedEnvironment.
        :type: str
        """

        self._post_destroy_script = post_destroy_script

    @property
    def pre_deploy_script(self):
        """
        Gets the pre_deploy_script of this ExportedEnvironment.

        :return: The pre_deploy_script of this ExportedEnvironment.
        :rtype: str
        """
        return self._pre_deploy_script

    @pre_deploy_script.setter
    def pre_deploy_script(self, pre_deploy_script):
        """
        Sets the pre_deploy_script of this ExportedEnvironment.

        :param pre_deploy_script: The pre_deploy_script of this ExportedEnvironment.
        :type: str
        """

        self._pre_deploy_script = pre_deploy_script

    @property
    def pre_destroy_script(self):
        """
        Gets the pre_destroy_script of this ExportedEnvironment.

        :return: The pre_destroy_script of this ExportedEnvironment.
        :rtype: str
        """
        return self._pre_destroy_script

    @pre_destroy_script.setter
    def pre_destroy_script(self, pre_destroy_script):
        """
        Sets the pre_destroy_script of this ExportedEnvironment.

        :param pre_destroy_script: The pre_destroy_script of this ExportedEnvironment.
        :type: str
        """

        self._pre_destroy_script = pre_destroy_script

    @property
    def provider_name(self):
        """
        Gets the provider_name of this ExportedEnvironment.

        :return: The provider_name of this ExportedEnvironment.
        :rtype: str
        """
        return self._provider_name

    @provider_name.setter
    def provider_name(self, provider_name):
        """
        Sets the provider_name of this ExportedEnvironment.

        :param provider_name: The provider_name of this ExportedEnvironment.
        :type: str
        """

        self._provider_name = provider_name

    @property
    def provider_type(self):
        """
        Gets the provider_type of this ExportedEnvironment.

        :return: The provider_type of this ExportedEnvironment.
        :rtype: str
        """
        return self._provider_type

    @provider_type.setter
    def provider_type(self, provider_type):
        """
        Sets the provider_type of this ExportedEnvironment.

        :param provider_type: The provider_type of this ExportedEnvironment.
        :type: str
        """
        allowed_values = ["aws", "digitalocean", "vsphere", "azurerm", "docker", "google", "opc", "dns"]
        if provider_type not in allowed_values:
            raise ValueError(
                "Invalid value for `provider_type` ({0}), must be one of {1}"
                .format(provider_type, allowed_values)
            )

        self._provider_type = provider_type

    @property
    def region(self):
        """
        Gets the region of this ExportedEnvironment.

        :return: The region of this ExportedEnvironment.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this ExportedEnvironment.

        :param region: The region of this ExportedEnvironment.
        :type: str
        """

        self._region = region

    @property
    def resources(self):
        """
        Gets the resources of this ExportedEnvironment.

        :return: The resources of this ExportedEnvironment.
        :rtype: list[ExportedResource]
        """
        return self._resources

    @resources.setter
    def resources(self, resources):
        """
        Sets the resources of this ExportedEnvironment.

        :param resources: The resources of this ExportedEnvironment.
        :type: list[ExportedResource]
        """

        self._resources = resources

    @property
    def type(self):
        """
        Gets the type of this ExportedEnvironment.

        :return: The type of this ExportedEnvironment.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this ExportedEnvironment.

        :param type: The type of this ExportedEnvironment.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ExportedEnvironment):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
