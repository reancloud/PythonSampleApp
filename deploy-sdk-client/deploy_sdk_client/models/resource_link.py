# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ResourceLink(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_id': 'int',
        'dest_id': 'int',
        'env_id': 'int',
        'computed': 'bool',
        'multiple': 'bool'
    }

    attribute_map = {
        'source_id': 'sourceId',
        'dest_id': 'destId',
        'env_id': 'envId',
        'computed': 'computed',
        'multiple': 'multiple'
    }

    def __init__(self, source_id=None, dest_id=None, env_id=None, computed=None, multiple=None):
        """
        ResourceLink - a model defined in Swagger
        """

        self._source_id = None
        self._dest_id = None
        self._env_id = None
        self._computed = None
        self._multiple = None

        if source_id is not None:
          self.source_id = source_id
        if dest_id is not None:
          self.dest_id = dest_id
        if env_id is not None:
          self.env_id = env_id
        if computed is not None:
          self.computed = computed
        if multiple is not None:
          self.multiple = multiple

    @property
    def source_id(self):
        """
        Gets the source_id of this ResourceLink.

        :return: The source_id of this ResourceLink.
        :rtype: int
        """
        return self._source_id

    @source_id.setter
    def source_id(self, source_id):
        """
        Sets the source_id of this ResourceLink.

        :param source_id: The source_id of this ResourceLink.
        :type: int
        """

        self._source_id = source_id

    @property
    def dest_id(self):
        """
        Gets the dest_id of this ResourceLink.

        :return: The dest_id of this ResourceLink.
        :rtype: int
        """
        return self._dest_id

    @dest_id.setter
    def dest_id(self, dest_id):
        """
        Sets the dest_id of this ResourceLink.

        :param dest_id: The dest_id of this ResourceLink.
        :type: int
        """

        self._dest_id = dest_id

    @property
    def env_id(self):
        """
        Gets the env_id of this ResourceLink.

        :return: The env_id of this ResourceLink.
        :rtype: int
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """
        Sets the env_id of this ResourceLink.

        :param env_id: The env_id of this ResourceLink.
        :type: int
        """

        self._env_id = env_id

    @property
    def computed(self):
        """
        Gets the computed of this ResourceLink.

        :return: The computed of this ResourceLink.
        :rtype: bool
        """
        return self._computed

    @computed.setter
    def computed(self, computed):
        """
        Sets the computed of this ResourceLink.

        :param computed: The computed of this ResourceLink.
        :type: bool
        """

        self._computed = computed

    @property
    def multiple(self):
        """
        Gets the multiple of this ResourceLink.

        :return: The multiple of this ResourceLink.
        :rtype: bool
        """
        return self._multiple

    @multiple.setter
    def multiple(self, multiple):
        """
        Sets the multiple of this ResourceLink.

        :param multiple: The multiple of this ResourceLink.
        :type: bool
        """

        self._multiple = multiple

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ResourceLink):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
