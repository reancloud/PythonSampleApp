# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvironmentImport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'import_config': 'ImportConfig',
        'exported_environment': 'ExportedEnvironment'
    }

    attribute_map = {
        'import_config': 'importConfig',
        'exported_environment': 'exportedEnvironment'
    }

    def __init__(self, import_config=None, exported_environment=None):
        """
        EnvironmentImport - a model defined in Swagger
        """

        self._import_config = None
        self._exported_environment = None

        if import_config is not None:
          self.import_config = import_config
        if exported_environment is not None:
          self.exported_environment = exported_environment

    @property
    def import_config(self):
        """
        Gets the import_config of this EnvironmentImport.

        :return: The import_config of this EnvironmentImport.
        :rtype: ImportConfig
        """
        return self._import_config

    @import_config.setter
    def import_config(self, import_config):
        """
        Sets the import_config of this EnvironmentImport.

        :param import_config: The import_config of this EnvironmentImport.
        :type: ImportConfig
        """

        self._import_config = import_config

    @property
    def exported_environment(self):
        """
        Gets the exported_environment of this EnvironmentImport.

        :return: The exported_environment of this EnvironmentImport.
        :rtype: ExportedEnvironment
        """
        return self._exported_environment

    @exported_environment.setter
    def exported_environment(self, exported_environment):
        """
        Sets the exported_environment of this EnvironmentImport.

        :param exported_environment: The exported_environment of this EnvironmentImport.
        :type: ExportedEnvironment
        """

        self._exported_environment = exported_environment

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvironmentImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
