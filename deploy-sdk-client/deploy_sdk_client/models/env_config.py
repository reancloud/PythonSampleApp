# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'pre_deploy_script': 'str',
        'post_deploy_script': 'str',
        'pre_destroy_script': 'str',
        'post_destroy_script': 'str',
        'env_id': 'int'
    }

    attribute_map = {
        'pre_deploy_script': 'preDeployScript',
        'post_deploy_script': 'postDeployScript',
        'pre_destroy_script': 'preDestroyScript',
        'post_destroy_script': 'postDestroyScript',
        'env_id': 'envId'
    }

    def __init__(self, pre_deploy_script=None, post_deploy_script=None, pre_destroy_script=None, post_destroy_script=None, env_id=None):
        """
        EnvConfig - a model defined in Swagger
        """

        self._pre_deploy_script = None
        self._post_deploy_script = None
        self._pre_destroy_script = None
        self._post_destroy_script = None
        self._env_id = None

        if pre_deploy_script is not None:
          self.pre_deploy_script = pre_deploy_script
        if post_deploy_script is not None:
          self.post_deploy_script = post_deploy_script
        if pre_destroy_script is not None:
          self.pre_destroy_script = pre_destroy_script
        if post_destroy_script is not None:
          self.post_destroy_script = post_destroy_script
        if env_id is not None:
          self.env_id = env_id

    @property
    def pre_deploy_script(self):
        """
        Gets the pre_deploy_script of this EnvConfig.
        The bash script to run before deploy, this script will run before deploying deployment

        :return: The pre_deploy_script of this EnvConfig.
        :rtype: str
        """
        return self._pre_deploy_script

    @pre_deploy_script.setter
    def pre_deploy_script(self, pre_deploy_script):
        """
        Sets the pre_deploy_script of this EnvConfig.
        The bash script to run before deploy, this script will run before deploying deployment

        :param pre_deploy_script: The pre_deploy_script of this EnvConfig.
        :type: str
        """

        self._pre_deploy_script = pre_deploy_script

    @property
    def post_deploy_script(self):
        """
        Gets the post_deploy_script of this EnvConfig.
        The bash script to run after deploy, this script will run after deploying the deployment

        :return: The post_deploy_script of this EnvConfig.
        :rtype: str
        """
        return self._post_deploy_script

    @post_deploy_script.setter
    def post_deploy_script(self, post_deploy_script):
        """
        Sets the post_deploy_script of this EnvConfig.
        The bash script to run after deploy, this script will run after deploying the deployment

        :param post_deploy_script: The post_deploy_script of this EnvConfig.
        :type: str
        """

        self._post_deploy_script = post_deploy_script

    @property
    def pre_destroy_script(self):
        """
        Gets the pre_destroy_script of this EnvConfig.
        The bash script to run before destroy, this script will run before destroying the deployment

        :return: The pre_destroy_script of this EnvConfig.
        :rtype: str
        """
        return self._pre_destroy_script

    @pre_destroy_script.setter
    def pre_destroy_script(self, pre_destroy_script):
        """
        Sets the pre_destroy_script of this EnvConfig.
        The bash script to run before destroy, this script will run before destroying the deployment

        :param pre_destroy_script: The pre_destroy_script of this EnvConfig.
        :type: str
        """

        self._pre_destroy_script = pre_destroy_script

    @property
    def post_destroy_script(self):
        """
        Gets the post_destroy_script of this EnvConfig.
        The bash script to run after destroy, this script will run after destroying the deployment

        :return: The post_destroy_script of this EnvConfig.
        :rtype: str
        """
        return self._post_destroy_script

    @post_destroy_script.setter
    def post_destroy_script(self, post_destroy_script):
        """
        Sets the post_destroy_script of this EnvConfig.
        The bash script to run after destroy, this script will run after destroying the deployment

        :param post_destroy_script: The post_destroy_script of this EnvConfig.
        :type: str
        """

        self._post_destroy_script = post_destroy_script

    @property
    def env_id(self):
        """
        Gets the env_id of this EnvConfig.
        Id of Environment of current deployment

        :return: The env_id of this EnvConfig.
        :rtype: int
        """
        return self._env_id

    @env_id.setter
    def env_id(self, env_id):
        """
        Sets the env_id of this EnvConfig.
        Id of Environment of current deployment

        :param env_id: The env_id of this EnvConfig.
        :type: int
        """

        self._env_id = env_id

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
