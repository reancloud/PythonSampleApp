# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvPackage(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'sequence': 'int',
        'ref_package_id': 'int',
        'attributes': 'list[EnvPackageAttr]',
        'version': 'str',
        'type': 'str'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'sequence': 'sequence',
        'ref_package_id': 'refPackageId',
        'attributes': 'attributes',
        'version': 'version',
        'type': 'type'
    }

    def __init__(self, id=None, name=None, sequence=None, ref_package_id=None, attributes=None, version=None, type=None):
        """
        EnvPackage - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._sequence = None
        self._ref_package_id = None
        self._attributes = None
        self._version = None
        self._type = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if sequence is not None:
          self.sequence = sequence
        if ref_package_id is not None:
          self.ref_package_id = ref_package_id
        if attributes is not None:
          self.attributes = attributes
        if version is not None:
          self.version = version
        if type is not None:
          self.type = type

    @property
    def id(self):
        """
        Gets the id of this EnvPackage.

        :return: The id of this EnvPackage.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EnvPackage.

        :param id: The id of this EnvPackage.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EnvPackage.
        Name of the package.Must match the names from Package API/Model

        :return: The name of this EnvPackage.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnvPackage.
        Name of the package.Must match the names from Package API/Model

        :param name: The name of this EnvPackage.
        :type: str
        """

        self._name = name

    @property
    def sequence(self):
        """
        Gets the sequence of this EnvPackage.
        Order of the package in which it should execute

        :return: The sequence of this EnvPackage.
        :rtype: int
        """
        return self._sequence

    @sequence.setter
    def sequence(self, sequence):
        """
        Sets the sequence of this EnvPackage.
        Order of the package in which it should execute

        :param sequence: The sequence of this EnvPackage.
        :type: int
        """

        self._sequence = sequence

    @property
    def ref_package_id(self):
        """
        Gets the ref_package_id of this EnvPackage.
        Id of Package from which it is copied. It is set only when using copy API

        :return: The ref_package_id of this EnvPackage.
        :rtype: int
        """
        return self._ref_package_id

    @ref_package_id.setter
    def ref_package_id(self, ref_package_id):
        """
        Sets the ref_package_id of this EnvPackage.
        Id of Package from which it is copied. It is set only when using copy API

        :param ref_package_id: The ref_package_id of this EnvPackage.
        :type: int
        """

        self._ref_package_id = ref_package_id

    @property
    def attributes(self):
        """
        Gets the attributes of this EnvPackage.
        Attributes and their values for package. Must match the attributes of package with the name from Package API/Model

        :return: The attributes of this EnvPackage.
        :rtype: list[EnvPackageAttr]
        """
        return self._attributes

    @attributes.setter
    def attributes(self, attributes):
        """
        Sets the attributes of this EnvPackage.
        Attributes and their values for package. Must match the attributes of package with the name from Package API/Model

        :param attributes: The attributes of this EnvPackage.
        :type: list[EnvPackageAttr]
        """

        self._attributes = attributes

    @property
    def version(self):
        """
        Gets the version of this EnvPackage.
        Version of Package. Must match the version of package with the name from Package API/Model

        :return: The version of this EnvPackage.
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """
        Sets the version of this EnvPackage.
        Version of Package. Must match the version of package with the name from Package API/Model

        :param version: The version of this EnvPackage.
        :type: str
        """

        self._version = version

    @property
    def type(self):
        """
        Gets the type of this EnvPackage.

        :return: The type of this EnvPackage.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EnvPackage.

        :param type: The type of this EnvPackage.
        :type: str
        """

        self._type = type

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvPackage):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
