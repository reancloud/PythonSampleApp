# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class BlueprintImport(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'environment_imports': 'list[EnvironmentImport]',
        'package_imports': 'list[Package]'
    }

    attribute_map = {
        'environment_imports': 'environmentImports',
        'package_imports': 'packageImports'
    }

    def __init__(self, environment_imports=None, package_imports=None):
        """
        BlueprintImport - a model defined in Swagger
        """

        self._environment_imports = None
        self._package_imports = None

        self.environment_imports = environment_imports
        if package_imports is not None:
          self.package_imports = package_imports

    @property
    def environment_imports(self):
        """
        Gets the environment_imports of this BlueprintImport.
        Environment Import

        :return: The environment_imports of this BlueprintImport.
        :rtype: list[EnvironmentImport]
        """
        return self._environment_imports

    @environment_imports.setter
    def environment_imports(self, environment_imports):
        """
        Sets the environment_imports of this BlueprintImport.
        Environment Import

        :param environment_imports: The environment_imports of this BlueprintImport.
        :type: list[EnvironmentImport]
        """
        if environment_imports is None:
            raise ValueError("Invalid value for `environment_imports`, must not be `None`")

        self._environment_imports = environment_imports

    @property
    def package_imports(self):
        """
        Gets the package_imports of this BlueprintImport.
        If blueprint contains packages, this is necessary

        :return: The package_imports of this BlueprintImport.
        :rtype: list[Package]
        """
        return self._package_imports

    @package_imports.setter
    def package_imports(self, package_imports):
        """
        Sets the package_imports of this BlueprintImport.
        If blueprint contains packages, this is necessary

        :param package_imports: The package_imports of this BlueprintImport.
        :type: list[Package]
        """

        self._package_imports = package_imports

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, BlueprintImport):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
