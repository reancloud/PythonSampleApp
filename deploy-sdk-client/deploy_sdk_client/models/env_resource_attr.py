# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class EnvResourceAttr(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'name': 'str',
        'type': 'str',
        'required': 'bool',
        'value': 'str',
        'possible_values': 'list[object]',
        'secure': 'bool',
        'sample_value': 'object',
        'display_value': 'str',
        'valid_value': 'object'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'type': 'type',
        'required': 'required',
        'value': 'value',
        'possible_values': 'possibleValues',
        'secure': 'secure',
        'sample_value': 'sampleValue',
        'display_value': 'displayValue',
        'valid_value': 'validValue'
    }

    def __init__(self, id=None, name=None, type=None, required=None, value=None, possible_values=None, secure=None, sample_value=None, display_value=None, valid_value=None):
        """
        EnvResourceAttr - a model defined in Swagger
        """

        self._id = None
        self._name = None
        self._type = None
        self._required = None
        self._value = None
        self._possible_values = None
        self._secure = None
        self._sample_value = None
        self._display_value = None
        self._valid_value = None

        if id is not None:
          self.id = id
        if name is not None:
          self.name = name
        if type is not None:
          self.type = type
        if required is not None:
          self.required = required
        if value is not None:
          self.value = value
        if possible_values is not None:
          self.possible_values = possible_values
        if secure is not None:
          self.secure = secure
        if sample_value is not None:
          self.sample_value = sample_value
        if display_value is not None:
          self.display_value = display_value
        if valid_value is not None:
          self.valid_value = valid_value

    @property
    def id(self):
        """
        Gets the id of this EnvResourceAttr.

        :return: The id of this EnvResourceAttr.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """
        Sets the id of this EnvResourceAttr.

        :param id: The id of this EnvResourceAttr.
        :type: int
        """

        self._id = id

    @property
    def name(self):
        """
        Gets the name of this EnvResourceAttr.
        Name of the resource attribute

        :return: The name of this EnvResourceAttr.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this EnvResourceAttr.
        Name of the resource attribute

        :param name: The name of this EnvResourceAttr.
        :type: str
        """

        self._name = name

    @property
    def type(self):
        """
        Gets the type of this EnvResourceAttr.
        Data type of resource attribute

        :return: The type of this EnvResourceAttr.
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """
        Sets the type of this EnvResourceAttr.
        Data type of resource attribute

        :param type: The type of this EnvResourceAttr.
        :type: str
        """

        self._type = type

    @property
    def required(self):
        """
        Gets the required of this EnvResourceAttr.
        If attribute value must be set

        :return: The required of this EnvResourceAttr.
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """
        Sets the required of this EnvResourceAttr.
        If attribute value must be set

        :param required: The required of this EnvResourceAttr.
        :type: bool
        """

        self._required = required

    @property
    def value(self):
        """
        Gets the value of this EnvResourceAttr.
        Value of the attribute

        :return: The value of this EnvResourceAttr.
        :rtype: str
        """
        return self._value

    @value.setter
    def value(self, value):
        """
        Sets the value of this EnvResourceAttr.
        Value of the attribute

        :param value: The value of this EnvResourceAttr.
        :type: str
        """

        self._value = value

    @property
    def possible_values(self):
        """
        Gets the possible_values of this EnvResourceAttr.
        Possible Values to set. Only one of the values should be set

        :return: The possible_values of this EnvResourceAttr.
        :rtype: list[object]
        """
        return self._possible_values

    @possible_values.setter
    def possible_values(self, possible_values):
        """
        Sets the possible_values of this EnvResourceAttr.
        Possible Values to set. Only one of the values should be set

        :param possible_values: The possible_values of this EnvResourceAttr.
        :type: list[object]
        """

        self._possible_values = possible_values

    @property
    def secure(self):
        """
        Gets the secure of this EnvResourceAttr.
        Flag to indicate value for the attribute is sensetive

        :return: The secure of this EnvResourceAttr.
        :rtype: bool
        """
        return self._secure

    @secure.setter
    def secure(self, secure):
        """
        Sets the secure of this EnvResourceAttr.
        Flag to indicate value for the attribute is sensetive

        :param secure: The secure of this EnvResourceAttr.
        :type: bool
        """

        self._secure = secure

    @property
    def sample_value(self):
        """
        Gets the sample_value of this EnvResourceAttr.
        Sample Value to be set. Set the value depending on type

        :return: The sample_value of this EnvResourceAttr.
        :rtype: object
        """
        return self._sample_value

    @sample_value.setter
    def sample_value(self, sample_value):
        """
        Sets the sample_value of this EnvResourceAttr.
        Sample Value to be set. Set the value depending on type

        :param sample_value: The sample_value of this EnvResourceAttr.
        :type: object
        """

        self._sample_value = sample_value

    @property
    def display_value(self):
        """
        Gets the display_value of this EnvResourceAttr.

        :return: The display_value of this EnvResourceAttr.
        :rtype: str
        """
        return self._display_value

    @display_value.setter
    def display_value(self, display_value):
        """
        Sets the display_value of this EnvResourceAttr.

        :param display_value: The display_value of this EnvResourceAttr.
        :type: str
        """

        self._display_value = display_value

    @property
    def valid_value(self):
        """
        Gets the valid_value of this EnvResourceAttr.

        :return: The valid_value of this EnvResourceAttr.
        :rtype: object
        """
        return self._valid_value

    @valid_value.setter
    def valid_value(self, valid_value):
        """
        Sets the valid_value of this EnvResourceAttr.

        :param valid_value: The valid_value of this EnvResourceAttr.
        :type: object
        """

        self._valid_value = valid_value

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, EnvResourceAttr):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
