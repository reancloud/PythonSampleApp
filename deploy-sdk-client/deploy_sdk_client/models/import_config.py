# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from pprint import pformat
from six import iteritems
import re


class ImportConfig(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """


    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'description': 'str',
        'connection_id': 'int',
        'provider_id': 'int',
        'region': 'str',
        'other_connections': 'dict(str, int)',
        'chef_server_id': 'int',
        'chef_environment': 'str',
        'env_version': 'str',
        'selectable_providers': 'list[Provider]',
        'selectable_connections': 'list[VmConnection]'
    }

    attribute_map = {
        'name': 'name',
        'description': 'description',
        'connection_id': 'connectionId',
        'provider_id': 'providerId',
        'region': 'region',
        'other_connections': 'otherConnections',
        'chef_server_id': 'chefServerId',
        'chef_environment': 'chefEnvironment',
        'env_version': 'envVersion',
        'selectable_providers': 'selectableProviders',
        'selectable_connections': 'selectableConnections'
    }

    def __init__(self, name=None, description=None, connection_id=None, provider_id=None, region=None, other_connections=None, chef_server_id=None, chef_environment=None, env_version=None, selectable_providers=None, selectable_connections=None):
        """
        ImportConfig - a model defined in Swagger
        """

        self._name = None
        self._description = None
        self._connection_id = None
        self._provider_id = None
        self._region = None
        self._other_connections = None
        self._chef_server_id = None
        self._chef_environment = None
        self._env_version = None
        self._selectable_providers = None
        self._selectable_connections = None

        if name is not None:
          self.name = name
        if description is not None:
          self.description = description
        if connection_id is not None:
          self.connection_id = connection_id
        if provider_id is not None:
          self.provider_id = provider_id
        if region is not None:
          self.region = region
        if other_connections is not None:
          self.other_connections = other_connections
        if chef_server_id is not None:
          self.chef_server_id = chef_server_id
        if chef_environment is not None:
          self.chef_environment = chef_environment
        if env_version is not None:
          self.env_version = env_version
        if selectable_providers is not None:
          self.selectable_providers = selectable_providers
        if selectable_connections is not None:
          self.selectable_connections = selectable_connections

    @property
    def name(self):
        """
        Gets the name of this ImportConfig.

        :return: The name of this ImportConfig.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """
        Sets the name of this ImportConfig.

        :param name: The name of this ImportConfig.
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """
        Gets the description of this ImportConfig.

        :return: The description of this ImportConfig.
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """
        Sets the description of this ImportConfig.

        :param description: The description of this ImportConfig.
        :type: str
        """

        self._description = description

    @property
    def connection_id(self):
        """
        Gets the connection_id of this ImportConfig.

        :return: The connection_id of this ImportConfig.
        :rtype: int
        """
        return self._connection_id

    @connection_id.setter
    def connection_id(self, connection_id):
        """
        Sets the connection_id of this ImportConfig.

        :param connection_id: The connection_id of this ImportConfig.
        :type: int
        """

        self._connection_id = connection_id

    @property
    def provider_id(self):
        """
        Gets the provider_id of this ImportConfig.

        :return: The provider_id of this ImportConfig.
        :rtype: int
        """
        return self._provider_id

    @provider_id.setter
    def provider_id(self, provider_id):
        """
        Sets the provider_id of this ImportConfig.

        :param provider_id: The provider_id of this ImportConfig.
        :type: int
        """

        self._provider_id = provider_id

    @property
    def region(self):
        """
        Gets the region of this ImportConfig.

        :return: The region of this ImportConfig.
        :rtype: str
        """
        return self._region

    @region.setter
    def region(self, region):
        """
        Sets the region of this ImportConfig.

        :param region: The region of this ImportConfig.
        :type: str
        """

        self._region = region

    @property
    def other_connections(self):
        """
        Gets the other_connections of this ImportConfig.

        :return: The other_connections of this ImportConfig.
        :rtype: dict(str, int)
        """
        return self._other_connections

    @other_connections.setter
    def other_connections(self, other_connections):
        """
        Sets the other_connections of this ImportConfig.

        :param other_connections: The other_connections of this ImportConfig.
        :type: dict(str, int)
        """

        self._other_connections = other_connections

    @property
    def chef_server_id(self):
        """
        Gets the chef_server_id of this ImportConfig.

        :return: The chef_server_id of this ImportConfig.
        :rtype: int
        """
        return self._chef_server_id

    @chef_server_id.setter
    def chef_server_id(self, chef_server_id):
        """
        Sets the chef_server_id of this ImportConfig.

        :param chef_server_id: The chef_server_id of this ImportConfig.
        :type: int
        """

        self._chef_server_id = chef_server_id

    @property
    def chef_environment(self):
        """
        Gets the chef_environment of this ImportConfig.

        :return: The chef_environment of this ImportConfig.
        :rtype: str
        """
        return self._chef_environment

    @chef_environment.setter
    def chef_environment(self, chef_environment):
        """
        Sets the chef_environment of this ImportConfig.

        :param chef_environment: The chef_environment of this ImportConfig.
        :type: str
        """

        self._chef_environment = chef_environment

    @property
    def env_version(self):
        """
        Gets the env_version of this ImportConfig.

        :return: The env_version of this ImportConfig.
        :rtype: str
        """
        return self._env_version

    @env_version.setter
    def env_version(self, env_version):
        """
        Sets the env_version of this ImportConfig.

        :param env_version: The env_version of this ImportConfig.
        :type: str
        """

        self._env_version = env_version

    @property
    def selectable_providers(self):
        """
        Gets the selectable_providers of this ImportConfig.

        :return: The selectable_providers of this ImportConfig.
        :rtype: list[Provider]
        """
        return self._selectable_providers

    @selectable_providers.setter
    def selectable_providers(self, selectable_providers):
        """
        Sets the selectable_providers of this ImportConfig.

        :param selectable_providers: The selectable_providers of this ImportConfig.
        :type: list[Provider]
        """

        self._selectable_providers = selectable_providers

    @property
    def selectable_connections(self):
        """
        Gets the selectable_connections of this ImportConfig.

        :return: The selectable_connections of this ImportConfig.
        :rtype: list[VmConnection]
        """
        return self._selectable_connections

    @selectable_connections.setter
    def selectable_connections(self, selectable_connections):
        """
        Sets the selectable_connections of this ImportConfig.

        :param selectable_connections: The selectable_connections of this ImportConfig.
        :type: list[VmConnection]
        """

        self._selectable_connections = selectable_connections

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        if not isinstance(other, ImportConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
