# coding: utf-8

"""
    

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import sys
import os
import re

# python 2 and python 3 compatibility library
from six import iteritems

from ..configuration import Configuration
from ..api_client import ApiClient


class EnvironmentApi(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        config = Configuration()
        if api_client:
            self.api_client = api_client
        else:
            if not config.api_client:
                config.api_client = ApiClient()
            self.api_client = config.api_client

    def check_environment_import_for_name_and_version(self, **kwargs):
        """
        Check if Environment Names And Version is already Exists
        Example  - {\"name\" = \"version\"}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_environment_import_for_name_and_version(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param object body:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.check_environment_import_for_name_and_version_with_http_info(**kwargs)
        else:
            (data) = self.check_environment_import_for_name_and_version_with_http_info(**kwargs)
            return data

    def check_environment_import_for_name_and_version_with_http_info(self, **kwargs):
        """
        Check if Environment Names And Version is already Exists
        Example  - {\"name\" = \"version\"}
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_environment_import_for_name_and_version_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param object body:
        :return: dict(str, str)
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_environment_import_for_name_and_version" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/checkIfEnvironmentNamesAndVersionExists', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, str)',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def check_if_environment_exists(self, env_name, **kwargs):
        """
        Check if environment with specified name is already created by the user
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_if_environment_exists(env_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.check_if_environment_exists_with_http_info(env_name, **kwargs)
        else:
            (data) = self.check_if_environment_exists_with_http_info(env_name, **kwargs)
            return data

    def check_if_environment_exists_with_http_info(self, env_name, **kwargs):
        """
        Check if environment with specified name is already created by the user
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.check_if_environment_exists_with_http_info(env_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method check_if_environment_exists" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `check_if_environment_exists`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/exists/{envName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def confirm_destroy_env_by_token(self, token, **kwargs):
        """
        Destroy deployment using destroy token
        Give true for param all if dependent environnments are also to be destroyed
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.confirm_destroy_env_by_token(token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token: (required)
        :param bool all:
        :return: EnvironmentDestroy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.confirm_destroy_env_by_token_with_http_info(token, **kwargs)
        else:
            (data) = self.confirm_destroy_env_by_token_with_http_info(token, **kwargs)
            return data

    def confirm_destroy_env_by_token_with_http_info(self, token, **kwargs):
        """
        Destroy deployment using destroy token
        Give true for param all if dependent environnments are also to be destroyed
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.confirm_destroy_env_by_token_with_http_info(token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token: (required)
        :param bool all:
        :return: EnvironmentDestroy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'all']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method confirm_destroy_env_by_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params) or (params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `confirm_destroy_env_by_token`")


        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']

        query_params = []
        if 'all' in params:
            query_params.append(('all', params['all']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/destroy/once/{token}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentDestroy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def copy_and_deploy(self, **kwargs):
        """
        Create a copy of an environment and deploy
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_and_deploy(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CopyDeployConfig body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.copy_and_deploy_with_http_info(**kwargs)
        else:
            (data) = self.copy_and_deploy_with_http_info(**kwargs)
            return data

    def copy_and_deploy_with_http_info(self, **kwargs):
        """
        Create a copy of an environment and deploy
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_and_deploy_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param CopyDeployConfig body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_and_deploy" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/copyanddeploy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def copy_environment(self, **kwargs):
        """
        Copy an environment using configuration like tags and input variables
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_environment(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationUsedForCopydeployAPI body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.copy_environment_with_http_info(**kwargs)
        else:
            (data) = self.copy_environment_with_http_info(**kwargs)
            return data

    def copy_environment_with_http_info(self, **kwargs):
        """
        Copy an environment using configuration like tags and input variables
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.copy_environment_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param ConfigurationUsedForCopydeployAPI body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method copy_environment" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/copy', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_empty_env_resource(self, env_id, name, resource_name, **kwargs):
        """
        Creates a new resource with given name and resourceName and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_empty_env_resource(env_id, name, resource_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str name: (required)
        :param str resource_name: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_empty_env_resource_with_http_info(env_id, name, resource_name, **kwargs)
        else:
            (data) = self.create_empty_env_resource_with_http_info(env_id, name, resource_name, **kwargs)
            return data

    def create_empty_env_resource_with_http_info(self, env_id, name, resource_name, **kwargs):
        """
        Creates a new resource with given name and resourceName and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_empty_env_resource_with_http_info(env_id, name, resource_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str name: (required)
        :param str resource_name: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'name', 'resource_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_empty_env_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `create_empty_env_resource`")
        # verify the required parameter 'name' is set
        if ('name' not in params) or (params['name'] is None):
            raise ValueError("Missing the required parameter `name` when calling `create_empty_env_resource`")
        # verify the required parameter 'resource_name' is set
        if ('resource_name' not in params) or (params['resource_name'] is None):
            raise ValueError("Missing the required parameter `resource_name` when calling `create_empty_env_resource`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'name' in params:
            path_params['name'] = params['name']
        if 'resource_name' in params:
            path_params['resourceName'] = params['resource_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/{envId}/{name}/{resourceName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_new_env_package(self, resource_id, package_name, header_env_id, modified_on, **kwargs):
        """
        Create package on the resource and gives package template to set values for required attributes
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_package(resource_id, package_name, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param str package_name: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: list[EnvPackage]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_new_env_package_with_http_info(resource_id, package_name, header_env_id, modified_on, **kwargs)
        else:
            (data) = self.create_new_env_package_with_http_info(resource_id, package_name, header_env_id, modified_on, **kwargs)
            return data

    def create_new_env_package_with_http_info(self, resource_id, package_name, header_env_id, modified_on, **kwargs):
        """
        Create package on the resource and gives package template to set values for required attributes
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_package_with_http_info(resource_id, package_name, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param str package_name: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: list[EnvPackage]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id', 'package_name', 'header_env_id', 'modified_on']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_env_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `create_new_env_package`")
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params) or (params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `create_new_env_package`")
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `create_new_env_package`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `create_new_env_package`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/package/{resourceId}/{packageName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnvPackage]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_new_env_resource(self, env_id, header_env_id, modified_on, **kwargs):
        """
        Creates a new resource with given name and resourceName and positionX and positionY and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_resource(env_id, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_new_env_resource_with_http_info(env_id, header_env_id, modified_on, **kwargs)
        else:
            (data) = self.create_new_env_resource_with_http_info(env_id, header_env_id, modified_on, **kwargs)
            return data

    def create_new_env_resource_with_http_info(self, env_id, header_env_id, modified_on, **kwargs):
        """
        Creates a new resource with given name and resourceName and positionX and positionY and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_resource_with_http_info(env_id, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'header_env_id', 'modified_on', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_env_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `create_new_env_resource`")
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `create_new_env_resource`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `create_new_env_resource`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/resource', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def create_new_env_resource_using_import(self, env_id, header_env_id, modified_on, **kwargs):
        """
        Creates a new resource with given name, resourceName, positonX, positionY, and existingId and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_resource_using_import(env_id, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.create_new_env_resource_using_import_with_http_info(env_id, header_env_id, modified_on, **kwargs)
        else:
            (data) = self.create_new_env_resource_using_import_with_http_info(env_id, header_env_id, modified_on, **kwargs)
            return data

    def create_new_env_resource_using_import_with_http_info(self, env_id, header_env_id, modified_on, **kwargs):
        """
        Creates a new resource with given name, resourceName, positonX, positionY, and existingId and gives resource template to set applicable attribute values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.create_new_env_resource_using_import_with_http_info(env_id, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'header_env_id', 'modified_on', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_new_env_resource_using_import" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `create_new_env_resource_using_import`")
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `create_new_env_resource_using_import`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `create_new_env_resource_using_import`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/resource/import', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnvResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_environment(self, env_id, **kwargs):
        """
        Deletes environment by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.delete_environment_with_http_info(env_id, **kwargs)
            return data

    def delete_environment_with_http_info(self, env_id, **kwargs):
        """
        Deletes environment by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `delete_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_package(self, package_id, **kwargs):
        """
        delete package by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_package(package_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int package_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_package_with_http_info(package_id, **kwargs)
        else:
            (data) = self.delete_package_with_http_info(package_id, **kwargs)
            return data

    def delete_package_with_http_info(self, package_id, **kwargs):
        """
        delete package by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_package_with_http_info(package_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int package_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['package_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_package" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'package_id' is set
        if ('package_id' not in params) or (params['package_id'] is None):
            raise ValueError("Missing the required parameter `package_id` when calling `delete_package`")


        collection_formats = {}

        path_params = {}
        if 'package_id' in params:
            path_params['packageId'] = params['package_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/package/{packageId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def delete_resource(self, resource_id, **kwargs):
        """
        Delete resource by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_resource(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.delete_resource_with_http_info(resource_id, **kwargs)
        else:
            (data) = self.delete_resource_with_http_info(resource_id, **kwargs)
            return data

    def delete_resource_with_http_info(self, resource_id, **kwargs):
        """
        Delete resource by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.delete_resource_with_http_info(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `delete_resource`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/{resourceId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deploy_as_blueprint(self, env_id, **kwargs):
        """
        Deploy an environment by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_as_blueprint(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_as_blueprint_with_http_info(env_id, **kwargs)
        else:
            (data) = self.deploy_as_blueprint_with_http_info(env_id, **kwargs)
            return data

    def deploy_as_blueprint_with_http_info(self, env_id, **kwargs):
        """
        Deploy an environment by id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_as_blueprint_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_as_blueprint" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `deploy_as_blueprint`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/blueprint/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deploy_by_config(self, **kwargs):
        """
        Deploy/Redeploys an environment by environment id with deployment name and other deployment configurations
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_config(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeploymentConfigurationDto body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_by_config_with_http_info(**kwargs)
        else:
            (data) = self.deploy_by_config_with_http_info(**kwargs)
            return data

    def deploy_by_config_with_http_info(self, **kwargs):
        """
        Deploy/Redeploys an environment by environment id with deployment name and other deployment configurations
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_config_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param DeploymentConfigurationDto body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_by_config" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy_by_env_id_and_dep_name', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deploy_by_env_id(self, env_id, **kwargs):
        """
        Deploy an environment by environment id with deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_id(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_by_env_id_with_http_info(env_id, **kwargs)
        else:
            (data) = self.deploy_by_env_id_with_http_info(env_id, **kwargs)
            return data

    def deploy_by_env_id_with_http_info(self, env_id, **kwargs):
        """
        Deploy an environment by environment id with deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_id_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_by_env_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `deploy_by_env_id`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deploy_by_env_id_and_config(self, env_id, **kwargs):
        """
        Deploy an environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_id_and_config(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_by_env_id_and_config_with_http_info(env_id, **kwargs)
        else:
            (data) = self.deploy_by_env_id_and_config_with_http_info(env_id, **kwargs)
            return data

    def deploy_by_env_id_and_config_with_http_info(self, env_id, **kwargs):
        """
        Deploy an environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_id_and_config_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_by_env_id_and_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `deploy_by_env_id_and_config`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def deploy_by_env_name_version_and_config(self, env_name, env_version, **kwargs):
        """
        Deploy an environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_name_version_and_config(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str env_version: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, **kwargs)
        else:
            (data) = self.deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, **kwargs)
            return data

    def deploy_by_env_name_version_and_config_with_http_info(self, env_name, env_version, **kwargs):
        """
        Deploy an environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str env_version: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name', 'env_version', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method deploy_by_env_name_version_and_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `deploy_by_env_name_version_and_config`")
        # verify the required parameter 'env_version' is set
        if ('env_version' not in params) or (params['env_version'] is None):
            raise ValueError("Missing the required parameter `env_version` when calling `deploy_by_env_name_version_and_config`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']
        if 'env_version' in params:
            path_params['envVersion'] = params['env_version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{envName}/{envVersion}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy(self, env_id, **kwargs):
        """
        Destroys environment deployment from REAN Deploy and Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_with_http_info(env_id, **kwargs)
        else:
            (data) = self.destroy_with_http_info(env_id, **kwargs)
            return data

    def destroy_with_http_info(self, env_id, **kwargs):
        """
        Destroys environment deployment from REAN Deploy and Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `destroy`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/{envId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy_deployment_by_env_name_and_deployment_name(self, env_name, deployment_name, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_env_name_and_deployment_name(env_name, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_deployment_by_env_name_and_deployment_name_with_http_info(env_name, deployment_name, **kwargs)
        else:
            (data) = self.destroy_deployment_by_env_name_and_deployment_name_with_http_info(env_name, deployment_name, **kwargs)
            return data

    def destroy_deployment_by_env_name_and_deployment_name_with_http_info(self, env_name, deployment_name, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_env_name_and_deployment_name_with_http_info(env_name, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_deployment_by_env_name_and_deployment_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `destroy_deployment_by_env_name_and_deployment_name`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `destroy_deployment_by_env_name_and_deployment_name`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{envName}/{deploymentName}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy_deployment_by_id(self, deployment_id, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_id(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_deployment_by_id_with_http_info(deployment_id, **kwargs)
        else:
            (data) = self.destroy_deployment_by_id_with_http_info(deployment_id, **kwargs)
            return data

    def destroy_deployment_by_id_with_http_info(self, deployment_id, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_id_with_http_info(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_deployment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params) or (params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `destroy_deployment_by_id`")


        collection_formats = {}

        path_params = {}
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{deploymentId}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy_deployment_by_id_and_deployment_name(self, env_id, deployment_name, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_id_and_deployment_name(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_deployment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.destroy_deployment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def destroy_deployment_by_id_and_deployment_name_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Destroys environment deployment. Actually erases your infracture on provider
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_deployment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_deployment_by_id_and_deployment_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `destroy_deployment_by_id_and_deployment_name`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `destroy_deployment_by_id_and_deployment_name`")

        if 'env_id' in params and not re.search('[0-9]+', params['env_id']):
            raise ValueError("Invalid value for parameter `env_id` when calling `destroy_deployment_by_id_and_deployment_name`, must conform to the pattern `/[0-9]+/`")

        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{envId}/{deploymentName}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def destroy_env_by_token(self, token, **kwargs):
        """
        One-time destroy of an an environment by a non-user using token
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_env_by_token(token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token: (required)
        :param bool all:
        :return: EnvironmentDestroy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.destroy_env_by_token_with_http_info(token, **kwargs)
        else:
            (data) = self.destroy_env_by_token_with_http_info(token, **kwargs)
            return data

    def destroy_env_by_token_with_http_info(self, token, **kwargs):
        """
        One-time destroy of an an environment by a non-user using token
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.destroy_env_by_token_with_http_info(token, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str token: (required)
        :param bool all:
        :return: EnvironmentDestroy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['token', 'all']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method destroy_env_by_token" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'token' is set
        if ('token' not in params) or (params['token'] is None):
            raise ValueError("Missing the required parameter `token` when calling `destroy_env_by_token`")


        collection_formats = {}

        path_params = {}
        if 'token' in params:
            path_params['token'] = params['token']

        query_params = []
        if 'all' in params:
            query_params.append(('all', params['all']))

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/destroy/once/{token}', 'DELETE',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentDestroy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def download_terraform_files(self, env_id, **kwargs):
        """
        Gives zip stream of all terraform files for an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.download_terraform_files(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.download_terraform_files_with_http_info(env_id, **kwargs)
        else:
            (data) = self.download_terraform_files_with_http_info(env_id, **kwargs)
            return data

    def download_terraform_files_with_http_info(self, env_id, **kwargs):
        """
        Gives zip stream of all terraform files for an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.download_terraform_files_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_terraform_files" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `download_terraform_files`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/gzip'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/download/terraform/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def export_blueprint_environment(self, env_id, **kwargs):
        """
        Export Environment with all Parent environment which can be imported into another REAN Deploy Server
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_blueprint_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: BlueprintEnvImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_blueprint_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.export_blueprint_environment_with_http_info(env_id, **kwargs)
            return data

    def export_blueprint_environment_with_http_info(self, env_id, **kwargs):
        """
        Export Environment with all Parent environment which can be imported into another REAN Deploy Server
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_blueprint_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: BlueprintEnvImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_blueprint_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `export_blueprint_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/export/blueprint/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BlueprintEnvImport',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def export_environment(self, env_id, **kwargs):
        """
        Export Environment into JSON format
        Gets Json of an environment with applicable values to be imported into another REAN Deploy server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: ExportedEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.export_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.export_environment_with_http_info(env_id, **kwargs)
            return data

    def export_environment_with_http_info(self, env_id, **kwargs):
        """
        Export Environment into JSON format
        Gets Json of an environment with applicable values to be imported into another REAN Deploy server
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.export_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: ExportedEnvironment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `export_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/export/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='ExportedEnvironment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_actions(self, resource_type, **kwargs):
        """
        Get all supported Resource type
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_actions(resource_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str resource_type: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_actions_with_http_info(resource_type, **kwargs)
        else:
            (data) = self.get_actions_with_http_info(resource_type, **kwargs)
            return data

    def get_actions_with_http_info(self, resource_type, **kwargs):
        """
        Get all supported Resource type
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_actions_with_http_info(resource_type, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str resource_type: (required)
        :return: list[str]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_type']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_actions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_type' is set
        if ('resource_type' not in params) or (params['resource_type'] is None):
            raise ValueError("Missing the required parameter `resource_type` when calling `get_actions`")


        collection_formats = {}

        path_params = {}
        if 'resource_type' in params:
            path_params['resourceType'] = params['resource_type']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/actions/{resourceType}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[str]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_deployments_for_environment(self, env_name, **kwargs):
        """
        Get all the deplyments of enviroment which are owned by loggedIn User
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment(env_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_deployments_for_environment_with_http_info(env_name, **kwargs)
        else:
            (data) = self.get_all_deployments_for_environment_with_http_info(env_name, **kwargs)
            return data

    def get_all_deployments_for_environment_with_http_info(self, env_name, **kwargs):
        """
        Get all the deplyments of enviroment which are owned by loggedIn User
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_with_http_info(env_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_deployments_for_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `get_all_deployments_for_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/get-deployment/{envName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Deployment]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_deployments_for_environment_across_versions(self, env_id, **kwargs):
        """
        Get all the deplyments of enviroment across all versions
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_across_versions(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_deployments_for_environment_across_versions_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_all_deployments_for_environment_across_versions_with_http_info(env_id, **kwargs)
            return data

    def get_all_deployments_for_environment_across_versions_with_http_info(self, env_id, **kwargs):
        """
        Get all the deplyments of enviroment across all versions
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_across_versions_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_deployments_for_environment_across_versions" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_all_deployments_for_environment_across_versions`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/get-deployments-across-versions/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Deployment]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_deployments_for_environment_by_id(self, env_id, **kwargs):
        """
        Get all the deployments of Environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_by_id(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_deployments_for_environment_by_id_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_all_deployments_for_environment_by_id_with_http_info(env_id, **kwargs)
            return data

    def get_all_deployments_for_environment_by_id_with_http_info(self, env_id, **kwargs):
        """
        Get all the deployments of Environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_by_id_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[Deployment]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_deployments_for_environment_by_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_all_deployments_for_environment_by_id`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/get-deployment-by-id/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[Deployment]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_deployments_for_environment_by_id_and_deployment_name(self, env_id, deployment_name, **kwargs):
        """
        Get deployment of Environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_by_id_and_deployment_name(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_deployments_for_environment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.get_all_deployments_for_environment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def get_all_deployments_for_environment_by_id_and_deployment_name_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Get deployment of Environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_deployments_for_environment_by_id_and_deployment_name_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_deployments_for_environment_by_id_and_deployment_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_all_deployments_for_environment_by_id_and_deployment_name`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `get_all_deployments_for_environment_by_id_and_deployment_name`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/get-deployment-by-name/{envId}/{deploymentName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_environments(self, **kwargs):
        """
        Get all User environments
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_environments(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_environments_with_http_info(**kwargs)
        else:
            (data) = self.get_all_environments_with_http_info(**kwargs)
            return data

    def get_all_environments_with_http_info(self, **kwargs):
        """
        Get all User environments
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_environments_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_environments" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_all_resources(self, env_id, **kwargs):
        """
        Gets all resources of an environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_resources(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_all_resources_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_all_resources_with_http_info(env_id, **kwargs)
            return data

    def get_all_resources_with_http_info(self, env_id, **kwargs):
        """
        Gets all resources of an environment by environment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_all_resources_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_all_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_all_resources`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resources/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnvResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_cost_of_environment(self, env_id, **kwargs):
        """
        Estimated Cost of the environment before deploying Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cost_of_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: environment ID (required)
        :return: dict(str, list[AWSPriceMap])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_cost_of_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_cost_of_environment_with_http_info(env_id, **kwargs)
            return data

    def get_cost_of_environment_with_http_info(self, env_id, **kwargs):
        """
        Estimated Cost of the environment before deploying Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_cost_of_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: environment ID (required)
        :return: dict(str, list[AWSPriceMap])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_cost_of_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_cost_of_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/price', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, list[AWSPriceMap])',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deploy_resource_list(self, env_id, **kwargs):
        """
        Gets all resources by deployment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_resource_list(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: dict(str, list[TFResource])
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deploy_resource_list_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_deploy_resource_list_with_http_info(env_id, **kwargs)
            return data

    def get_deploy_resource_list_with_http_info(self, env_id, **kwargs):
        """
        Gets all resources by deployment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_resource_list_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: dict(str, list[TFResource])
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deploy_resource_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deploy_resource_list`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='dict(str, list[TFResource])',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deploy_resource_log(self, env_id, resource_id, **kwargs):
        """
        Gets terraform deploy logs for a resource.
        To get entire log for an environment send resourceId as -1
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_resource_log(env_id, resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int resource_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deploy_resource_log_with_http_info(env_id, resource_id, **kwargs)
        else:
            (data) = self.get_deploy_resource_log_with_http_info(env_id, resource_id, **kwargs)
            return data

    def get_deploy_resource_log_with_http_info(self, env_id, resource_id, **kwargs):
        """
        Gets terraform deploy logs for a resource.
        To get entire log for an environment send resourceId as -1
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_resource_log_with_http_info(env_id, resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int resource_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'resource_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deploy_resource_log" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deploy_resource_log`")
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `get_deploy_resource_log`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['text/plain'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/resource/{envId}/{resourceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deploy_status_by_env_id(self, env_id, **kwargs):
        """
        Gets default deployment status for an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_status_by_env_id(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: TFExecutionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deploy_status_by_env_id_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_deploy_status_by_env_id_with_http_info(env_id, **kwargs)
            return data

    def get_deploy_status_by_env_id_with_http_info(self, env_id, **kwargs):
        """
        Gets default deployment status for an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_status_by_env_id_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: TFExecutionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deploy_status_by_env_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deploy_status_by_env_id`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/status/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TFExecutionStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deploy_status_by_env_id_and_deployment_name(self, env_id, deployment_name, **kwargs):
        """
        Gets deploy status for an environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_status_by_env_id_and_deployment_name(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: TFExecutionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deploy_status_by_env_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.get_deploy_status_by_env_id_and_deployment_name_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def get_deploy_status_by_env_id_and_deployment_name_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Gets deploy status for an environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deploy_status_by_env_id_and_deployment_name_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: TFExecutionStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deploy_status_by_env_id_and_deployment_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deploy_status_by_env_id_and_deployment_name`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `get_deploy_status_by_env_id_and_deployment_name`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/status/{envId}/{deploymentName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TFExecutionStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deployed_resource_ids(self, env_id, **kwargs):
        """
        Gets all deployed resources information for an environment
        Gives map of resource name and ids
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployed_resource_ids(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deployed_resource_ids_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_deployed_resource_ids_with_http_info(env_id, **kwargs)
            return data

    def get_deployed_resource_ids_with_http_info(self, env_id, **kwargs):
        """
        Gets all deployed resources information for an environment
        Gives map of resource name and ids
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployed_resource_ids_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployed_resource_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deployed_resource_ids`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/ids/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deployment_details(self, env_id, deployment_name, **kwargs):
        """
        Get deployment of Environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_details(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deployment_details_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.get_deployment_details_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def get_deployment_details_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Get deployment of Environment by environment id and deployment name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_details_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deployment_details`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `get_deployment_details`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deployment-details/{envId}/{deploymentName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deployment_input_json(self, env_id, deployment_name, **kwargs):
        """
        Get deployment's input json by environment id and deployment Name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_input_json(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deployment_input_json_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.get_deployment_input_json_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def get_deployment_input_json_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Get deployment's input json by environment id and deployment Name
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_input_json_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_input_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_deployment_input_json`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `get_deployment_input_json`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/get-input-json/{envId}/{deploymentName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_deployment_status(self, run_id, **kwargs):
        """
        Gets deployment information related to runId of an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_status(run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str run_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_deployment_status_with_http_info(run_id, **kwargs)
        else:
            (data) = self.get_deployment_status_with_http_info(run_id, **kwargs)
            return data

    def get_deployment_status_with_http_info(self, run_id, **kwargs):
        """
        Gets deployment information related to runId of an environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_deployment_status_with_http_info(run_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str run_id: (required)
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['run_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_deployment_status" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'run_id' is set
        if ('run_id' not in params) or (params['run_id'] is None):
            raise ValueError("Missing the required parameter `run_id` when calling `get_deployment_status`")


        collection_formats = {}

        path_params = {}
        if 'run_id' in params:
            path_params['runId'] = params['run_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/deployment/{runId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_environment(self, env_id, **kwargs):
        """
        Get Environment by Id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: Environment ID (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_environment_with_http_info(env_id, **kwargs)
            return data

    def get_environment_with_http_info(self, env_id, **kwargs):
        """
        Get Environment by Id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: Environment ID (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_environment_by_version_and_name(self, env_name, env_version, **kwargs):
        """
        Get Environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_by_version_and_name(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: Environment ID (required)
        :param str env_version: Environment Version (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_environment_by_version_and_name_with_http_info(env_name, env_version, **kwargs)
        else:
            (data) = self.get_environment_by_version_and_name_with_http_info(env_name, env_version, **kwargs)
            return data

    def get_environment_by_version_and_name_with_http_info(self, env_name, env_version, **kwargs):
        """
        Get Environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_by_version_and_name_with_http_info(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: Environment ID (required)
        :param str env_version: Environment Version (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name', 'env_version']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_by_version_and_name" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `get_environment_by_version_and_name`")
        # verify the required parameter 'env_version' is set
        if ('env_version' not in params) or (params['env_version'] is None):
            raise ValueError("Missing the required parameter `env_version` when calling `get_environment_by_version_and_name`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']
        if 'env_version' in params:
            path_params['envVersion'] = params['env_version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envName}/{envVersion}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_environment_difference(self, base_env_id, target_env_id, **kwargs):
        """
        Get environment difference of two enviroments
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_difference(base_env_id, target_env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int base_env_id: (required)
        :param int target_env_id: (required)
        :return: EnvironmentDiffDto
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_environment_difference_with_http_info(base_env_id, target_env_id, **kwargs)
        else:
            (data) = self.get_environment_difference_with_http_info(base_env_id, target_env_id, **kwargs)
            return data

    def get_environment_difference_with_http_info(self, base_env_id, target_env_id, **kwargs):
        """
        Get environment difference of two enviroments
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_difference_with_http_info(base_env_id, target_env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int base_env_id: (required)
        :param int target_env_id: (required)
        :return: EnvironmentDiffDto
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['base_env_id', 'target_env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_difference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'base_env_id' is set
        if ('base_env_id' not in params) or (params['base_env_id'] is None):
            raise ValueError("Missing the required parameter `base_env_id` when calling `get_environment_difference`")
        # verify the required parameter 'target_env_id' is set
        if ('target_env_id' not in params) or (params['target_env_id'] is None):
            raise ValueError("Missing the required parameter `target_env_id` when calling `get_environment_difference`")


        collection_formats = {}

        path_params = {}
        if 'base_env_id' in params:
            path_params['base_env_id'] = params['base_env_id']
        if 'target_env_id' in params:
            path_params['target_env_id'] = params['target_env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/diff/{base_env_id}/{target_env_id}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentDiffDto',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_environment_hierarchy(self, env_id, **kwargs):
        """
        Get hierarchical information about parents of specified specified environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_hierarchy(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: environment ID (required)
        :return: EnvironmentParentHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_environment_hierarchy_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_environment_hierarchy_with_http_info(env_id, **kwargs)
            return data

    def get_environment_hierarchy_with_http_info(self, env_id, **kwargs):
        """
        Get hierarchical information about parents of specified specified environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_environment_hierarchy_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: environment ID (required)
        :return: EnvironmentParentHierarchy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_environment_hierarchy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_environment_hierarchy`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/hierarchy', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentParentHierarchy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_groups(self, **kwargs):
        """
        Get all the platform groups
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[GroupDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_groups_with_http_info(**kwargs)
        else:
            (data) = self.get_groups_with_http_info(**kwargs)
            return data

    def get_groups_with_http_info(self, **kwargs):
        """
        Get all the platform groups
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_groups_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :return: list[GroupDto]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_groups" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/groups', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[GroupDto]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_input_json(self, env_id, **kwargs):
        """
        Gets all environments resources json with attributes names/values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_input_json(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_input_json_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_input_json_with_http_info(env_id, **kwargs)
            return data

    def get_input_json_with_http_info(self, env_id, **kwargs):
        """
        Gets all environments resources json with attributes names/values
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_input_json_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_input_json" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_input_json`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/input/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_layout_resources(self, env_id, **kwargs):
        """
        Gets all resources of environment without their attributes/packages
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_layout_resources(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_layout_resources_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_layout_resources_with_http_info(env_id, **kwargs)
            return data

    def get_layout_resources_with_http_info(self, env_id, **kwargs):
        """
        Gets all resources of environment without their attributes/packages
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_layout_resources_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[EnvResource]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_layout_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_layout_resources`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/layoutResources', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[EnvResource]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_links_between_resources(self, env_id, **kwargs):
        """
        Get dependency links between an environment resources
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_links_between_resources(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[ResourceLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_links_between_resources_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_links_between_resources_with_http_info(env_id, **kwargs)
            return data

    def get_links_between_resources_with_http_info(self, env_id, **kwargs):
        """
        Get dependency links between an environment resources
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_links_between_resources_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[ResourceLink]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_links_between_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_links_between_resources`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/links/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ResourceLink]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_parent_deployment_mapping_data(self, env_id, deployment_id, **kwargs):
        """
        Get Parent Deployment Map For Env For Deployment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_parent_deployment_mapping_data(env_id, deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int deployment_id: (required)
        :return: list[ParentDeploymentMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_parent_deployment_mapping_data_with_http_info(env_id, deployment_id, **kwargs)
        else:
            (data) = self.get_parent_deployment_mapping_data_with_http_info(env_id, deployment_id, **kwargs)
            return data

    def get_parent_deployment_mapping_data_with_http_info(self, env_id, deployment_id, **kwargs):
        """
        Get Parent Deployment Map For Env For Deployment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_parent_deployment_mapping_data_with_http_info(env_id, deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int deployment_id: (required)
        :return: list[ParentDeploymentMapping]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parent_deployment_mapping_data" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_parent_deployment_mapping_data`")
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params) or (params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_parent_deployment_mapping_data`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/parentDeploymentMappingData/{envId}/{deploymentId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[ParentDeploymentMapping]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_private_key_for_resource(self, env_id, deployment_id, resource_id, **kwargs):
        """
        Gets private key for SSH keygen resource
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_key_for_resource(env_id, deployment_id, resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int deployment_id: (required)
        :param int resource_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_private_key_for_resource_with_http_info(env_id, deployment_id, resource_id, **kwargs)
        else:
            (data) = self.get_private_key_for_resource_with_http_info(env_id, deployment_id, resource_id, **kwargs)
            return data

    def get_private_key_for_resource_with_http_info(self, env_id, deployment_id, resource_id, **kwargs):
        """
        Gets private key for SSH keygen resource
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_private_key_for_resource_with_http_info(env_id, deployment_id, resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param int deployment_id: (required)
        :param int resource_id: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_id', 'resource_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_private_key_for_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_private_key_for_resource`")
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params) or (params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `get_private_key_for_resource`")
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `get_private_key_for_resource`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/privatekey/{envId}/{deploymentId}/{resourceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_resource_with_id(self, resource_id, **kwargs):
        """
        Get resource with id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_with_id(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_resource_with_id_with_http_info(resource_id, **kwargs)
        else:
            (data) = self.get_resource_with_id_with_http_info(resource_id, **kwargs)
            return data

    def get_resource_with_id_with_http_info(self, resource_id, **kwargs):
        """
        Get resource with id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_resource_with_id_with_http_info(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_with_id" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `get_resource_with_id`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/{resourceId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_shared_environment(self, env_id, **kwargs):
        """
        Get environment sharing policy of environment by environment Id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_shared_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: EnvironmentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_shared_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_shared_environment_with_http_info(env_id, **kwargs)
            return data

    def get_shared_environment_with_http_info(self, env_id, **kwargs):
        """
        Get environment sharing policy of environment by environment Id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_shared_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: EnvironmentPolicy
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shared_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_shared_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/share', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentPolicy',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_tf_state(self, env_id, **kwargs):
        """
        Gets terraform state of the environment
        Response will be same as tfstate file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tf_state(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_tf_state_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_tf_state_with_http_info(env_id, **kwargs)
            return data

    def get_tf_state_with_http_info(self, env_id, **kwargs):
        """
        Gets terraform state of the environment
        Response will be same as tfstate file
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_tf_state_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tf_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_tf_state`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/tfstate/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def get_validation_param(self, env_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_validation_param(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.get_validation_param_with_http_info(env_id, **kwargs)
        else:
            (data) = self.get_validation_param_with_http_info(env_id, **kwargs)
            return data

    def get_validation_param_with_http_info(self, env_id, **kwargs):
        """
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.get_validation_param_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_validation_param" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `get_validation_param`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/validation/param/{envId}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def import_blueprint(self, **kwargs):
        """
        Import blurprint in REAN Deploy
        This API is only been used after prepareImportBlueprint API. Set required params from prepare and use import/blueprint.Response will be map of keys [id and environments], in which id refers to last environment in chain.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_blueprint(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BlueprintImport body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.import_blueprint_with_http_info(**kwargs)
        else:
            (data) = self.import_blueprint_with_http_info(**kwargs)
            return data

    def import_blueprint_with_http_info(self, **kwargs):
        """
        Import blurprint in REAN Deploy
        This API is only been used after prepareImportBlueprint API. Set required params from prepare and use import/blueprint.Response will be map of keys [id and environments], in which id refers to last environment in chain.
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_blueprint_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param BlueprintImport body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_blueprint" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/import/blueprint', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def import_environment(self, **kwargs):
        """
        Import environment into REAN Deploy.
        Use this API after prepareImport API. Set required params from prepare and use import
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_environment(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnvironmentImport body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.import_environment_with_http_info(**kwargs)
        else:
            (data) = self.import_environment_with_http_info(**kwargs)
            return data

    def import_environment_with_http_info(self, **kwargs):
        """
        Import environment into REAN Deploy.
        Use this API after prepareImport API. Set required params from prepare and use import
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.import_environment_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnvironmentImport body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method import_environment" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/import', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def is_multiple_resources(self, resource_id, **kwargs):
        """
        True if resource has multiple resources
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.is_multiple_resources(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.is_multiple_resources_with_http_info(resource_id, **kwargs)
        else:
            (data) = self.is_multiple_resources_with_http_info(resource_id, **kwargs)
            return data

    def is_multiple_resources_with_http_info(self, resource_id, **kwargs):
        """
        True if resource has multiple resources
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.is_multiple_resources_with_http_info(resource_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :return: bool
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method is_multiple_resources" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `is_multiple_resources`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/{resourceId}/multiple', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='bool',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan(self, env_id, **kwargs):
        """
        Plan for an environment using Environment id and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: TFPlanOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_with_http_info(env_id, **kwargs)
        else:
            (data) = self.plan_with_http_info(env_id, **kwargs)
            return data

    def plan_with_http_info(self, env_id, **kwargs):
        """
        Plan for an environment using Environment id and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param DeploymentConfiguration body:
        :return: TFPlanOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `plan`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/plan/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TFPlanOutput',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def plan_deployment(self, env_id, deployment_name, **kwargs):
        """
        Plan for an environment using Environment id, Deployment Name and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_deployment(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :param DeploymentConfiguration body:
        :return: TFPlanOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.plan_deployment_with_http_info(env_id, deployment_name, **kwargs)
        else:
            (data) = self.plan_deployment_with_http_info(env_id, deployment_name, **kwargs)
            return data

    def plan_deployment_with_http_info(self, env_id, deployment_name, **kwargs):
        """
        Plan for an environment using Environment id, Deployment Name and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.plan_deployment_with_http_info(env_id, deployment_name, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param str deployment_name: (required)
        :param DeploymentConfiguration body:
        :return: TFPlanOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'deployment_name', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method plan_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `plan_deployment`")
        # verify the required parameter 'deployment_name' is set
        if ('deployment_name' not in params) or (params['deployment_name'] is None):
            raise ValueError("Missing the required parameter `deployment_name` when calling `plan_deployment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'deployment_name' in params:
            path_params['deploymentName'] = params['deployment_name']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/plan/{envId}/{deploymentName}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='TFPlanOutput',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def prepare_import_blueprint(self, **kwargs):
        """
        Prepare blueprint before importing it
        Given a blueprint file, it returns response to set typical environment create params to send it to blueprint import API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prepare_import_blueprint(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file:
        :return: BlueprintImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.prepare_import_blueprint_with_http_info(**kwargs)
        else:
            (data) = self.prepare_import_blueprint_with_http_info(**kwargs)
            return data

    def prepare_import_blueprint_with_http_info(self, **kwargs):
        """
        Prepare blueprint before importing it
        Given a blueprint file, it returns response to set typical environment create params to send it to blueprint import API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prepare_import_blueprint_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file:
        :return: BlueprintImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prepare_import_blueprint" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/import/blueprint/prepare', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='BlueprintImport',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def prepare_import_environment(self, **kwargs):
        """
        Prepare environment imports before actually importing it
        Given an import files, it returns response to set typical environment create params to send it to import API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prepare_import_environment(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file:
        :return: EnvironmentImport
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.prepare_import_environment_with_http_info(**kwargs)
        else:
            (data) = self.prepare_import_environment_with_http_info(**kwargs)
            return data

    def prepare_import_environment_with_http_info(self, **kwargs):
        """
        Prepare environment imports before actually importing it
        Given an import files, it returns response to set typical environment create params to send it to import API
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.prepare_import_environment_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param file file:
        :return: EnvironmentImport
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method prepare_import_environment" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['multipart/form-data'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/import/prepare', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentImport',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def re_deploy_by_deployment_id_and_config(self, deployment_id, **kwargs):
        """
        Redeploy deployment using deployment id and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.re_deploy_by_deployment_id_and_config(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.re_deploy_by_deployment_id_and_config_with_http_info(deployment_id, **kwargs)
        else:
            (data) = self.re_deploy_by_deployment_id_and_config_with_http_info(deployment_id, **kwargs)
            return data

    def re_deploy_by_deployment_id_and_config_with_http_info(self, deployment_id, **kwargs):
        """
        Redeploy deployment using deployment id and Deploy configuration
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.re_deploy_by_deployment_id_and_config_with_http_info(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method re_deploy_by_deployment_id_and_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params) or (params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `re_deploy_by_deployment_id_and_config`")


        collection_formats = {}

        path_params = {}
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/redeploy/deployment/{deploymentId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def re_deploy_by_env_name_version_and_config(self, env_name, env_version, **kwargs):
        """
        Redeploy an environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.re_deploy_by_env_name_version_and_config(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str env_version: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.re_deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, **kwargs)
        else:
            (data) = self.re_deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, **kwargs)
            return data

    def re_deploy_by_env_name_version_and_config_with_http_info(self, env_name, env_version, **kwargs):
        """
        Redeploy an environment by name and version
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.re_deploy_by_env_name_version_and_config_with_http_info(env_name, env_version, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param str env_name: (required)
        :param str env_version: (required)
        :param DeploymentConfiguration body:
        :return: Deployment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_name', 'env_version', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method re_deploy_by_env_name_version_and_config" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_name' is set
        if ('env_name' not in params) or (params['env_name'] is None):
            raise ValueError("Missing the required parameter `env_name` when calling `re_deploy_by_env_name_version_and_config`")
        # verify the required parameter 'env_version' is set
        if ('env_version' not in params) or (params['env_version'] is None):
            raise ValueError("Missing the required parameter `env_version` when calling `re_deploy_by_env_name_version_and_config`")


        collection_formats = {}

        path_params = {}
        if 'env_name' in params:
            path_params['envName'] = params['env_name']
        if 'env_version' in params:
            path_params['envVersion'] = params['env_version']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/redeploy/deployment/{envName}/{envVersion}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Deployment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def refresh(self, env_id, **kwargs):
        """
        Executes refresh for an environment and gives changes, should be followed by updateState if change seems fine
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[TFResourceChangeLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.refresh_with_http_info(env_id, **kwargs)
        else:
            (data) = self.refresh_with_http_info(env_id, **kwargs)
            return data

    def refresh_with_http_info(self, env_id, **kwargs):
        """
        Executes refresh for an environment and gives changes, should be followed by updateState if change seems fine
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.refresh_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: list[TFResourceChangeLog]
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method refresh" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `refresh`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/refresh/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='list[TFResourceChangeLog]',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_all(self, **kwargs):
        """
        Save Environment with resources and their attributes and packages
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_all(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnvironmentSaveAll body:
        :return: EnvironmentSaveAll
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_all_with_http_info(**kwargs)
        else:
            (data) = self.save_all_with_http_info(**kwargs)
            return data

    def save_all_with_http_info(self, **kwargs):
        """
        Save Environment with resources and their attributes and packages
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_all_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param EnvironmentSaveAll body:
        :return: EnvironmentSaveAll
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_all" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/saveAll', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvironmentSaveAll',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_as(self, **kwargs):
        """
        Copy Existing env with different name.
        Payload should contain the id of the environment you are copying and name of the environment you want to create as new and other applicable env creation params
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_as(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_as_with_http_info(**kwargs)
        else:
            (data) = self.save_as_with_http_info(**kwargs)
            return data

    def save_as_with_http_info(self, **kwargs):
        """
        Copy Existing env with different name.
        Payload should contain the id of the environment you are copying and name of the environment you want to create as new and other applicable env creation params
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_as_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_as" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/saveAs', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_environment(self, **kwargs):
        """
        Save Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_environment(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_environment_with_http_info(**kwargs)
        else:
            (data) = self.save_environment_with_http_info(**kwargs)
            return data

    def save_environment_with_http_info(self, **kwargs):
        """
        Save Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_environment_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_environment" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def save_new_version(self, **kwargs):
        """
        Create new Version
        Payload should contain the id and name of the environment for which new version is created. New Version should be greater than the version from which its being created
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_new_version(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.save_new_version_with_http_info(**kwargs)
        else:
            (data) = self.save_new_version_with_http_info(**kwargs)
            return data

    def save_new_version_with_http_info(self, **kwargs):
        """
        Create new Version
        Payload should contain the id and name of the environment for which new version is created. New Version should be greater than the version from which its being created
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.save_new_version_with_http_info(callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method save_new_version" % key
                )
            params[key] = val
        del params['kwargs']


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/new-version', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def share_all_version_environment(self, env_id, **kwargs):
        """
        Share all the versions of environment using specified policy
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_all_version_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param EnvironmentPolicy body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.share_all_version_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.share_all_version_environment_with_http_info(env_id, **kwargs)
            return data

    def share_all_version_environment_with_http_info(self, env_id, **kwargs):
        """
        Share all the versions of environment using specified policy
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_all_version_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param EnvironmentPolicy body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_all_version_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `share_all_version_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/share-all', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def share_environment(self, env_id, **kwargs):
        """
        Save of update environment sharing policies
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_environment(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param EnvironmentPolicy body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.share_environment_with_http_info(env_id, **kwargs)
        else:
            (data) = self.share_environment_with_http_info(env_id, **kwargs)
            return data

    def share_environment_with_http_info(self, env_id, **kwargs):
        """
        Save of update environment sharing policies
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.share_environment_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :param EnvironmentPolicy body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `share_environment`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/{envId}/share', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type=None,
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def stop_deployment(self, deployment_id, **kwargs):
        """
        Stop ongoing deployment by deployment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stop_deployment(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :return: StopRequestStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.stop_deployment_with_http_info(deployment_id, **kwargs)
        else:
            (data) = self.stop_deployment_with_http_info(deployment_id, **kwargs)
            return data

    def stop_deployment_with_http_info(self, deployment_id, **kwargs):
        """
        Stop ongoing deployment by deployment id
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.stop_deployment_with_http_info(deployment_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int deployment_id: (required)
        :return: StopRequestStatus
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['deployment_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method stop_deployment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'deployment_id' is set
        if ('deployment_id' not in params) or (params['deployment_id'] is None):
            raise ValueError("Missing the required parameter `deployment_id` when calling `stop_deployment`")


        collection_formats = {}

        path_params = {}
        if 'deployment_id' in params:
            path_params['deploymentId'] = params['deployment_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/deploy/stop/{deploymentId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='StopRequestStatus',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_environment(self, header_env_id, modified_on, **kwargs):
        """
        Update Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_environment(header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_environment_with_http_info(header_env_id, modified_on, **kwargs)
        else:
            (data) = self.update_environment_with_http_info(header_env_id, modified_on, **kwargs)
            return data

    def update_environment_with_http_info(self, header_env_id, modified_on, **kwargs):
        """
        Update Environment
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_environment_with_http_info(header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param Environment body:
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['header_env_id', 'modified_on', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_environment" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `update_environment`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `update_environment`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_package_version(self, resource_id, package_name, package_version, header_env_id, modified_on, **kwargs):
        """
        Updated package version for package on environment resource
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_package_version(resource_id, package_name, package_version, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param str package_name: (required)
        :param str package_version: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: EnvPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_package_version_with_http_info(resource_id, package_name, package_version, header_env_id, modified_on, **kwargs)
        else:
            (data) = self.update_package_version_with_http_info(resource_id, package_name, package_version, header_env_id, modified_on, **kwargs)
            return data

    def update_package_version_with_http_info(self, resource_id, package_name, package_version, header_env_id, modified_on, **kwargs):
        """
        Updated package version for package on environment resource
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_package_version_with_http_info(resource_id, package_name, package_version, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param str package_name: (required)
        :param str package_version: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: EnvPackage
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id', 'package_name', 'package_version', 'header_env_id', 'modified_on']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_package_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `update_package_version`")
        # verify the required parameter 'package_name' is set
        if ('package_name' not in params) or (params['package_name'] is None):
            raise ValueError("Missing the required parameter `package_name` when calling `update_package_version`")
        # verify the required parameter 'package_version' is set
        if ('package_version' not in params) or (params['package_version'] is None):
            raise ValueError("Missing the required parameter `package_version` when calling `update_package_version`")
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `update_package_version`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `update_package_version`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']
        if 'package_name' in params:
            path_params['packageName'] = params['package_name']
        if 'package_version' in params:
            path_params['packageVersion'] = params['package_version']

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource/package/{resourceId}/{packageName}/{packageVersion}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvPackage',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_resource(self, header_env_id, modified_on, **kwargs):
        """
        Update resource using payload
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_resource(header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_resource_with_http_info(header_env_id, modified_on, **kwargs)
        else:
            (data) = self.update_resource_with_http_info(header_env_id, modified_on, **kwargs)
            return data

    def update_resource_with_http_info(self, header_env_id, modified_on, **kwargs):
        """
        Update resource using payload
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_resource_with_http_info(header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :param EnvResource body:
        :return: EnvResource
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['header_env_id', 'modified_on', 'body']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_resource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `update_resource`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `update_resource`")


        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.\
            select_header_content_type(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/resource', 'PUT',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='EnvResource',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def update_tf_state(self, env_id, **kwargs):
        """
        Updates terraform state from refresh action on environment.
        Once updated, state file can not be reverted
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_tf_state(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.update_tf_state_with_http_info(env_id, **kwargs)
        else:
            (data) = self.update_tf_state_with_http_info(env_id, **kwargs)
            return data

    def update_tf_state_with_http_info(self, env_id, **kwargs):
        """
        Updates terraform state from refresh action on environment.
        Once updated, state file can not be reverted
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.update_tf_state_with_http_info(env_id, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int env_id: (required)
        :return: Environment
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['env_id']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_tf_state" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `update_tf_state`")


        collection_formats = {}

        path_params = {}
        if 'env_id' in params:
            path_params['envId'] = params['env_id']

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/updateState/{envId}', 'POST',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='Environment',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)

    def validate_resource_name_change(self, resource_id, env_id, new_name, header_env_id, modified_on, **kwargs):
        """
        Check if new resource Name is valid, returns true if valid
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validate_resource_name_change(resource_id, env_id, new_name, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param int env_id: (required)
        :param str new_name: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('callback'):
            return self.validate_resource_name_change_with_http_info(resource_id, env_id, new_name, header_env_id, modified_on, **kwargs)
        else:
            (data) = self.validate_resource_name_change_with_http_info(resource_id, env_id, new_name, header_env_id, modified_on, **kwargs)
            return data

    def validate_resource_name_change_with_http_info(self, resource_id, env_id, new_name, header_env_id, modified_on, **kwargs):
        """
        Check if new resource Name is valid, returns true if valid
        
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please define a `callback` function
        to be invoked when receiving the response.
        >>> def callback_function(response):
        >>>     pprint(response)
        >>>
        >>> thread = api.validate_resource_name_change_with_http_info(resource_id, env_id, new_name, header_env_id, modified_on, callback=callback_function)

        :param callback function: The callback function
            for asynchronous request. (optional)
        :param int resource_id: (required)
        :param int env_id: (required)
        :param str new_name: (required)
        :param int header_env_id: (required)
        :param int modified_on: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['resource_id', 'env_id', 'new_name', 'header_env_id', 'modified_on']
        all_params.append('callback')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method validate_resource_name_change" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'resource_id' is set
        if ('resource_id' not in params) or (params['resource_id'] is None):
            raise ValueError("Missing the required parameter `resource_id` when calling `validate_resource_name_change`")
        # verify the required parameter 'env_id' is set
        if ('env_id' not in params) or (params['env_id'] is None):
            raise ValueError("Missing the required parameter `env_id` when calling `validate_resource_name_change`")
        # verify the required parameter 'new_name' is set
        if ('new_name' not in params) or (params['new_name'] is None):
            raise ValueError("Missing the required parameter `new_name` when calling `validate_resource_name_change`")
        # verify the required parameter 'header_env_id' is set
        if ('header_env_id' not in params) or (params['header_env_id'] is None):
            raise ValueError("Missing the required parameter `header_env_id` when calling `validate_resource_name_change`")
        # verify the required parameter 'modified_on' is set
        if ('modified_on' not in params) or (params['modified_on'] is None):
            raise ValueError("Missing the required parameter `modified_on` when calling `validate_resource_name_change`")


        collection_formats = {}

        path_params = {}
        if 'resource_id' in params:
            path_params['resourceId'] = params['resource_id']
        if 'env_id' in params:
            path_params['envId'] = params['env_id']
        if 'new_name' in params:
            path_params['newName'] = params['new_name']

        query_params = []

        header_params = {}
        if 'header_env_id' in params:
            header_params['headerEnvId'] = params['header_env_id']
        if 'modified_on' in params:
            header_params['modifiedOn'] = params['modified_on']

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.\
            select_header_accept(['application/json'])

        # Authentication setting
        auth_settings = []

        return self.api_client.call_api('/env/validate/{envId}/{resourceId}/{newName}', 'GET',
                                        path_params,
                                        query_params,
                                        header_params,
                                        body=body_params,
                                        post_params=form_params,
                                        files=local_var_files,
                                        response_type='str',
                                        auth_settings=auth_settings,
                                        callback=params.get('callback'),
                                        _return_http_data_only=params.get('_return_http_data_only'),
                                        _preload_content=params.get('_preload_content', True),
                                        _request_timeout=params.get('_request_timeout'),
                                        collection_formats=collection_formats)
