{
  "swagger": "2.0",
  "info": {
    "version": "1.0.0",
    "title": ""
  },
  "basePath": "/api/reandeploy/DeployNow/rest",
  "tags": [
    {
      "name": "Chef Server"
    },
    {
      "name": "Environment"
    },
    {
      "name": "Provider"
    },
    {
      "name": "Connection"
    },
    {
      "name": "blueprint"
    },
    {
      "name": "Package"
    },
    {
      "name": "Resource"
    },
    {
      "name": "SolutionCatalog"
    },
    {
      "name": "customTag"
    }
  ],
  "paths": {
    "/chefserver/{id}/environment": {
      "get": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "listEnvironments",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/chefserver/{id}/package": {
      "get": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "listPackages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/Package"
              }
            },
            "headers": {}
          }
        }
      }
    },
    "/chefserver": {
      "get": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "getAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ChefServer"
              }
            },
            "headers": {}
          }
        }
      },
      "post": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "save",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChefServer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChefServer"
            },
            "headers": {}
          }
        }
      }
    },
    "/chefserver/{id}": {
      "get": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "get",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChefServer"
            },
            "headers": {}
          }
        }
      },
      "put": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "update",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/ChefServer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChefServer"
            },
            "headers": {}
          }
        }
      },
      "delete": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "delete",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ChefServer"
            },
            "headers": {}
          }
        }
      }
    },
    "/chefserver/{name}/exists": {
      "get": {
        "tags": [
          "Chef Server"
        ],
        "operationId": "exists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            },
            "headers": {}
          }
        }
      }
    },
    "/env/{envName}/{envVersion}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get Environment by name and version",
        "description": "",
        "operationId": "getEnvironmentByVersionAndName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "description": "Environment ID",
            "required": true,
            "type": "string"
          },
          {
            "name": "envVersion",
            "in": "path",
            "description": "Environment Version",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/{envId}/hierarchy": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get hierarchical information about parents of specified specified environment",
        "description": "",
        "operationId": "getEnvironmentHierarchy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "description": "environment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentParentHierarchy"
            }
          }
        }
      }
    },
    "/env/{envId}/price": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Estimated Cost of the environment before deploying Environment",
        "description": "",
        "operationId": "getCostOfEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "description": "environment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/AWSPriceMap"
                }
              }
            }
          }
        }
      }
    },
    "/env/{envId}/share": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get environment sharing policy of environment by environment Id",
        "description": "",
        "operationId": "getSharedEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentPolicy"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Save of update environment sharing policies",
        "description": "",
        "operationId": "shareEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentPolicy"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all User environments",
        "description": "",
        "operationId": "getAllEnvironments",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Save Environment",
        "description": "",
        "operationId": "saveEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Environment"
        ],
        "summary": "Update Environment",
        "description": "",
        "operationId": "updateEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/{envId}/share-all": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Share all the versions of environment using specified policy",
        "description": "",
        "operationId": "shareAllVersionEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentPolicy"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/groups": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all the platform groups",
        "description": "",
        "operationId": "getGroups",
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/GroupDto"
              }
            }
          }
        }
      }
    },
    "/env/validate/{envId}/{resourceId}/{newName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Check if new resource Name is valid, returns true if valid",
        "description": "",
        "operationId": "validateResourceNameChange",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "newName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/get-deployment/{envName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all the deplyments of enviroment which are owned by loggedIn User",
        "description": "",
        "operationId": "getAllDeploymentsForEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deployment"
              }
            }
          }
        }
      }
    },
    "/env/get-deployments-across-versions/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all the deplyments of enviroment across all versions",
        "description": "",
        "operationId": "getAllDeploymentsForEnvironmentAcrossVersions",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deployment"
              }
            }
          }
        }
      }
    },
    "/env/get-deployment-by-id/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all the deployments of Environment by environment id",
        "description": "",
        "operationId": "getAllDeploymentsForEnvironmentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/deployment"
              }
            }
          }
        }
      }
    },
    "/env/get-deployment-by-name/{envId}/{deploymentName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get deployment of Environment by environment id and deployment name",
        "description": "",
        "operationId": "getAllDeploymentsForEnvironmentByIdAndDeploymentName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deployment-details/{envId}/{deploymentName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get deployment of Environment by environment id and deployment name",
        "description": "",
        "operationId": "getDeploymentDetails",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/resources/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets all resources of an environment by environment id",
        "description": "",
        "operationId": "getAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/EnvResource"
              }
            }
          }
        }
      }
    },
    "/env/{envId}/layoutResources": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets all resources of environment without their attributes/packages",
        "description": "",
        "operationId": "getLayoutResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvResource"
              }
            }
          }
        }
      }
    },
    "/env/privatekey/{envId}/{deploymentId}/{resourceId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets private key for SSH keygen resource",
        "description": "",
        "operationId": "getPrivateKeyForResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/input/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets all environments resources json with attributes names/values",
        "description": "",
        "operationId": "getInputJson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/exists/{envName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Check if environment with specified name is already created by the user",
        "description": "",
        "operationId": "checkIfEnvironmentExists",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/env/saveAll": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Save Environment with resources and their attributes and packages",
        "description": "",
        "operationId": "saveAll",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentSaveAll"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentSaveAll"
            }
          }
        }
      }
    },
    "/env/saveAs": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Copy Existing env with different name.",
        "description": "Payload should contain the id of the environment you are copying and name of the environment you want to create as new and other applicable env creation params",
        "operationId": "saveAs",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/new-version": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Create new Version",
        "description": "Payload should contain the id and name of the environment for which new version is created. New Version should be greater than the version from which its being created",
        "operationId": "saveNewVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get Environment by Id",
        "description": "",
        "operationId": "getEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "description": "Environment ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Deletes environment by id",
        "description": "",
        "operationId": "deleteEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/resource/{envId}/{name}/{resourceName}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Creates a new resource with given name and resourceName and gives resource template to set applicable attribute values",
        "description": "",
        "operationId": "createEmptyEnvResource",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "name",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "resourceName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          }
        }
      }
    },
    "/env/{envId}/resource": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Creates a new resource with given name and resourceName and positionX and positionY and gives resource template to set applicable attribute values",
        "description": "",
        "operationId": "createNewEnvResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          }
        }
      }
    },
    "/env/{envId}/resource/import": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Creates a new resource with given name, resourceName, positonX, positionY, and existingId and gives resource template to set applicable attribute values",
        "description": "",
        "operationId": "createNewEnvResourceUsingImport",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/EnvResource"
              }
            }
          }
        }
      }
    },
    "/env/resource/{resourceId}/multiple": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "True if resource has multiple resources",
        "description": "",
        "operationId": "isMultipleResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "boolean"
            }
          }
        }
      }
    },
    "/env/resource/{resourceId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get resource with id",
        "description": "",
        "operationId": "getResourceWithId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Delete resource by id",
        "description": "",
        "operationId": "deleteResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          }
        }
      }
    },
    "/env/resource": {
      "put": {
        "tags": [
          "Environment"
        ],
        "summary": "Update resource using payload",
        "description": "",
        "operationId": "updateResource",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvResource"
            }
          }
        }
      }
    },
    "/env/resource/package/{resourceId}/{packageName}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Create package on the resource and gives package template to set values for required attributes",
        "description": "",
        "operationId": "createNewEnvPackage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/EnvPackage"
              }
            }
          }
        }
      }
    },
    "/env/resource/package/{resourceId}/{packageName}/{packageVersion}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Updated package version for package on environment resource",
        "description": "",
        "operationId": "updatePackageVersion",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageVersion",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "headerEnvId",
            "in": "header",
            "required": true,
            "type": "integer"
          },
          {
            "name": "modifiedOn",
            "in": "header",
            "required": true,
            "type": "integer"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvPackage"
            }
          }
        }
      }
    },
    "/env/resource/package/{packageId}": {
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "delete package by id",
        "description": "",
        "operationId": "deletePackage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/resource/links/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get dependency links between an environment resources",
        "description": "",
        "operationId": "getLinksBetweenResources",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "$ref": "#/definitions/ResourceLink"
              }
            }
          }
        }
      }
    },
    "/env/deploy/stop/{deploymentId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Stop ongoing deployment by deployment id",
        "description": "",
        "operationId": "stopDeployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/StopRequestStatus"
            }
          }
        }
      }
    },
    "/env/deploy_by_env_id_and_dep_name": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Deploy/Redeploys an environment by environment id with deployment name and other deployment configurations",
        "description": "",
        "operationId": "deployByConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfigurationDto"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets all resources by deployment",
        "description": "",
        "operationId": "getDeployResourceList",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "array",
                "items": {
                  "$ref": "#/definitions/TFResource"
                }
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Deploy an environment by environment id",
        "description": "",
        "operationId": "deployByEnvIdAndConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Destroys environment deployment from REAN Deploy and Actually erases your infracture on provider",
        "description": "",
        "operationId": "destroy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Deploy an environment by environment id with deploy configuration",
        "description": "",
        "operationId": "deployByEnvID",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{envName}/{envVersion}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Deploy an environment by name and version",
        "description": "",
        "operationId": "deployByEnvNameVersionAndConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "envVersion",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/redeploy/deployment/{deploymentId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Redeploy deployment using deployment id and Deploy configuration",
        "description": "",
        "operationId": "reDeployByDeploymentIdAndConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/redeploy/deployment/{envName}/{envVersion}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Redeploy an environment by name and version",
        "description": "",
        "operationId": "reDeployByEnvNameVersionAndConfig",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "envVersion",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/get-input-json/{envId}/{deploymentName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get deployment's input json by environment id and deployment Name",
        "description": "",
        "operationId": "getDeploymentInputJson",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/deploy/blueprint/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Deploy an environment by id",
        "description": "",
        "operationId": "deployAsBlueprint",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/plan/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Plan for an environment using Environment id and Deploy configuration",
        "description": "",
        "operationId": "plan",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TFPlanOutput"
            }
          }
        }
      }
    },
    "/env/plan/{envId}/{deploymentName}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Plan for an environment using Environment id, Deployment Name and Deploy configuration",
        "description": "",
        "operationId": "planDeployment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/DeploymentConfiguration"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TFPlanOutput"
            }
          }
        }
      }
    },
    "/env/updateState/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Updates terraform state from refresh action on environment.",
        "description": "Once updated, state file can not be reverted",
        "operationId": "updateTFState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/deploy/resource/{envId}/{resourceId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets terraform deploy logs for a resource.",
        "description": "To get entire log for an environment send resourceId as -1",
        "operationId": "getDeployResourceLog",
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "resourceId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/env/deploy/status/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets default deployment status for an environment",
        "description": "",
        "operationId": "getDeployStatusByEnvId",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TFExecutionStatus"
            }
          }
        }
      }
    },
    "/env/deploy/status/{envId}/{deploymentName}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets deploy status for an environment by environment id and deployment name",
        "description": "",
        "operationId": "getDeployStatusByEnvIdAndDeploymentName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/TFExecutionStatus"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{runId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets deployment information related to runId of an environment",
        "description": "",
        "operationId": "getDeploymentStatus",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "runId",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{deploymentId}": {
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Destroys environment deployment. Actually erases your infracture on provider",
        "description": "",
        "operationId": "destroyDeploymentById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{envId}/{deploymentName}": {
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Destroys environment deployment. Actually erases your infracture on provider",
        "description": "",
        "operationId": "destroyDeploymentByIdAndDeploymentName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "pattern": "[0-9]+",
            "format": "int64"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/deploy/deployment/{envName}/{deploymentName}": {
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "Destroys environment deployment. Actually erases your infracture on provider",
        "description": "",
        "operationId": "destroyDeploymentByEnvNameAndDeploymentName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "deploymentName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/deployment"
            }
          }
        }
      }
    },
    "/env/destroy/once/{token}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Destroy deployment using destroy token",
        "description": "Give true for param all if dependent environnments are also to be destroyed",
        "operationId": "confirmDestroyEnvByToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentDestroy"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Environment"
        ],
        "summary": "One-time destroy of an an environment by a non-user using token",
        "description": "",
        "operationId": "destroyEnvByToken",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "token",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "all",
            "in": "query",
            "required": false,
            "type": "boolean",
            "default": false
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentDestroy"
            }
          }
        }
      }
    },
    "/env/copyanddeploy": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Create a copy of an environment and deploy",
        "description": "",
        "operationId": "copyAndDeploy",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CopyDeployConfig"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/copy": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Copy an environment using configuration like tags and input variables",
        "description": "",
        "operationId": "copyEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Configuration used for copy+deploy API"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/export/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Export Environment into JSON format",
        "description": "Gets Json of an environment with applicable values to be imported into another REAN Deploy server",
        "operationId": "exportEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/ExportedEnvironment"
            }
          }
        }
      }
    },
    "/env/import/prepare": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Prepare environment imports before actually importing it",
        "description": "Given an import files, it returns response to set typical environment create params to send it to import API",
        "operationId": "prepareImportEnvironment",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentImport"
            }
          }
        }
      }
    },
    "/env/import": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Import environment into REAN Deploy.",
        "description": "Use this API after prepareImport API. Set required params from prepare and use import",
        "operationId": "importEnvironment",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/EnvironmentImport"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Environment"
            }
          }
        }
      }
    },
    "/env/export/blueprint/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Export Environment with all Parent environment which can be imported into another REAN Deploy Server",
        "description": "",
        "operationId": "exportBlueprintEnvironment",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlueprintEnvImport"
            }
          }
        }
      }
    },
    "/env/import/blueprint/prepare": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Prepare blueprint before importing it",
        "description": "Given a blueprint file, it returns response to set typical environment create params to send it to blueprint import API",
        "operationId": "prepareImportBlueprint",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlueprintImport"
            }
          }
        }
      }
    },
    "/env/parentDeploymentMappingData/{envId}/{deploymentId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get Parent Deployment Map For Env For Deployment",
        "description": "",
        "operationId": "getParentDeploymentMappingData",
        "consumes": [
          "multipart/form-data"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "deploymentId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/ParentDeploymentMapping"
              }
            }
          }
        }
      }
    },
    "/env/import/blueprint": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Import blurprint in REAN Deploy",
        "description": "This API is only been used after prepareImportBlueprint API. Set required params from prepare and use import/blueprint.Response will be map of keys [id and environments], in which id refers to last environment in chain.",
        "operationId": "importBlueprint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlueprintImport"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/checkIfEnvironmentNamesAndVersionExists": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Check if Environment Names And Version is already Exists",
        "description": "Example  - {\"name\" = \"version\"}",
        "operationId": "checkEnvironmentImportForNameAndVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "object",
              "additionalProperties": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/env/tfstate/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets terraform state of the environment",
        "description": "Response will be same as tfstate file",
        "operationId": "getTFState",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/validation/param/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "operationId": "getValidationParam",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/resource/ids/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gets all deployed resources information for an environment",
        "description": "Gives map of resource name and ids",
        "operationId": "getDeployedResourceIds",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/download/terraform/{envId}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Gives zip stream of all terraform files for an environment",
        "description": "",
        "operationId": "downloadTerraformFiles",
        "produces": [
          "application/gzip"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/env/diff/{base_env_id}/{target_env_id}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get environment difference of two enviroments",
        "description": "",
        "operationId": "getEnvironmentDifference",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "base_env_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          },
          {
            "name": "target_env_id",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/EnvironmentDiffDto"
            }
          }
        }
      }
    },
    "/env/refresh/{envId}": {
      "post": {
        "tags": [
          "Environment"
        ],
        "summary": "Executes refresh for an environment and gives changes, should be followed by updateState if change seems fine",
        "description": "",
        "operationId": "refresh",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "envId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/TFResourceChangeLog"
              }
            }
          }
        }
      }
    },
    "/env/actions/{resourceType}": {
      "get": {
        "tags": [
          "Environment"
        ],
        "summary": "Get all supported Resource type",
        "description": "",
        "operationId": "getActions",
        "parameters": [
          {
            "name": "resourceType",
            "in": "path",
            "required": true,
            "type": "string",
            "enum": [
              "ENVIRONMENT",
              "PACKAGE"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string",
                "enum": [
                  "VIEW",
                  "EDIT",
                  "CREATE",
                  "DELETE",
                  "DESTROY",
                  "DEPLOY",
                  "IMPORT",
                  "EXPORT"
                ]
              }
            }
          }
        }
      }
    },
    "/provider/name/{provName}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get Provider by provider name",
        "description": "",
        "operationId": "getProviderByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/provider/awsRegions": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get all available AWS regions",
        "description": "",
        "operationId": "getAwsRegions",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        }
      }
    },
    "/provider": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get allProviders for user",
        "description": "",
        "operationId": "getAllProviders",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Provider"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Create Provider for User",
        "description": "",
        "operationId": "saveProvider",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveProvider"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "Provider"
        ],
        "summary": "Update existing Provider",
        "description": "",
        "operationId": "updateProvider",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveProvider"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/provider/validateandsave": {
      "post": {
        "tags": [
          "Provider"
        ],
        "summary": "Validate and Save AWS Provider",
        "description": "API verifies the aws provider credentials before saving it",
        "operationId": "saveProviderWithPermissions",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "Provider",
            "required": true,
            "schema": {
              "$ref": "#/definitions/SaveProvider"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/provider/{provId}": {
      "get": {
        "tags": [
          "Provider"
        ],
        "summary": "Get provider by Provider id",
        "description": "",
        "operationId": "getProvider",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "delete": {
        "tags": [
          "Provider"
        ],
        "summary": "Delete Provider by id",
        "description": "",
        "operationId": "deleteProvider",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "provId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/conn/connection/{name}/exists": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Verify if Connection with name exists",
        "description": "",
        "operationId": "isConnectionExists",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "name",
            "in": "path",
            "description": "connection name to check",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/conn": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get all Connections of an User",
        "description": "",
        "operationId": "getAllVmConnections",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        }
      },
      "post": {
        "tags": [
          "Connection"
        ],
        "summary": "Create Connection",
        "description": "",
        "operationId": "saveVmConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        }
      },
      "put": {
        "tags": [
          "Connection"
        ],
        "summary": "Update existing Connection",
        "description": "",
        "operationId": "updateVmConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "connection",
            "required": true,
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        }
      }
    },
    "/conn/{conId}": {
      "get": {
        "tags": [
          "Connection"
        ],
        "summary": "Get Connection of current loggedIn user by connection id",
        "description": "",
        "operationId": "getVmConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "conId",
            "in": "path",
            "description": "connection ID",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Connection"
        ],
        "summary": "Delete Connection using connection Id",
        "description": "",
        "operationId": "deleteVmConnection",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "conId",
            "in": "path",
            "description": "connection Id",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/VmConnection"
            }
          }
        }
      }
    },
    "/blueprint/readme/{readMe}": {
      "get": {
        "tags": [
          "blueprint"
        ],
        "summary": "Get the readme file content of blueprint",
        "description": "",
        "operationId": "getReadMeFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "text/plain"
        ],
        "parameters": [
          {
            "name": "readMe",
            "in": "path",
            "description": "Name of Blueprint's README file",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/blueprint": {
      "get": {
        "tags": [
          "blueprint"
        ],
        "summary": "Returns the list of all the available blueprints",
        "description": "",
        "operationId": "getAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blueprint/import/prepare": {
      "post": {
        "tags": [
          "blueprint"
        ],
        "summary": "Prepare blueprint before importing it",
        "description": "",
        "operationId": "prepareImportBlueprint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/JsonNode"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/BlueprintImport"
            }
          }
        }
      }
    },
    "/blueprint/import": {
      "post": {
        "tags": [
          "blueprint"
        ],
        "summary": "Import blurprint in REAN Deploy",
        "description": "This API is only been used after prepareImportBlueprint API. Set required params from prepare and use import/blueprint.Response will be map of keys [id and environments], in which id refers to last environment in chain.",
        "operationId": "importBlueprint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/BlueprintImport"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/blueprint/{file}": {
      "get": {
        "tags": [
          "blueprint"
        ],
        "summary": "Returns blueprint file.",
        "description": "",
        "operationId": "importBlueprintFile",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "path",
            "description": "Name of the Blueprint",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/package/{packageId}": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Get a package by id",
        "description": "",
        "operationId": "getPackage",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/Package"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Package"
        ],
        "summary": "Delete a package by id",
        "description": "",
        "operationId": "deletePackage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/update": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Updates all packages form central packages repository",
        "description": "",
        "operationId": "updatePackages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Get all available packages",
        "description": "",
        "operationId": "getAllPackages",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Create a package",
        "description": "",
        "operationId": "addPackage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Package"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      },
      "put": {
        "tags": [
          "Package"
        ],
        "summary": "Updates a package",
        "description": "",
        "operationId": "updatePackages",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/Package"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/defaultPackageType": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Returns the only package type can be used on particular server.",
        "description": "",
        "operationId": "getDefaultPackageType",
        "produces": [
          "text/plain"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "string"
            }
          }
        }
      }
    },
    "/package/unique": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Get all packages with unique names",
        "description": "",
        "operationId": "getAllUniquePackage",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/share": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Change Package sharing policy",
        "description": "",
        "operationId": "sharePackage",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultiSharePolicy"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/templates": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Package JSON Template with sample values which can be used to create/modify packages",
        "description": "",
        "operationId": "getPackageTemplates",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/{packageId}/share": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Get shared package policy",
        "description": "",
        "operationId": "getSharedPackagePolicy",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/SharePolicy"
            }
          }
        }
      }
    },
    "/package/newVersion": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Create a new Version",
        "description": "",
        "operationId": "createNewVersion",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/NewPackageVersionDto"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/upload": {
      "post": {
        "tags": [
          "Package"
        ],
        "summary": "Create an ansible package by uploading zip folder",
        "description": "",
        "operationId": "addAnsiblePackage",
        "consumes": [
          "multipart/form-data"
        ],
        "parameters": [
          {
            "name": "file",
            "in": "formData",
            "required": false,
            "type": "file"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/package/{packageName}/{packageType}": {
      "get": {
        "tags": [
          "Package"
        ],
        "summary": "Get all packages by name and type",
        "description": "",
        "operationId": "getPackages",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "packageName",
            "in": "path",
            "required": true,
            "type": "string"
          },
          {
            "name": "packageType",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/Package"
              }
            }
          }
        }
      }
    },
    "/resource": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get all available resources",
        "description": "",
        "operationId": "getAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/resource/datasources": {
      "get": {
        "tags": [
          "Resource"
        ],
        "summary": "Get all available resources",
        "description": "",
        "operationId": "getAllDataResources",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog/json": {
      "get": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Get all available catalogs",
        "description": "",
        "operationId": "getAllResources",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog/deploy/{blueprintId}": {
      "post": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Delpoy the blueprint which is specied in ID.",
        "description": "The blueprint ID is sent which is need to be deployed along with all its environment",
        "operationId": "prepareImportBlueprint",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "blueprintId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog/import": {
      "post": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Used before Solution import.",
        "description": "Given a blueprint file, it returns response to set typical environment create params to send it to blueprint import API",
        "operationId": "prepareImportBlueprint",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/MultipleBlueprintImport"
            }
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog": {
      "get": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Gets Solution Catalog details for given UserId ID",
        "description": "Response will be same as Solution",
        "operationId": "getAllSolutionCatalogs",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "userId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog/id/{catalogId}": {
      "get": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Gets Solution Catalog details for given UserId ID",
        "description": "Response will be same as Solution",
        "operationId": "getSolutionCatalogById",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/solutioncatalog/name/{catalogName}": {
      "get": {
        "tags": [
          "SolutionCatalog"
        ],
        "summary": "Gets Solution Catalog details for given UserId ID",
        "description": "Response will be same as Solution",
        "operationId": "getSolutionCatalogByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "catalogName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/customTag/{customTagId}": {
      "get": {
        "tags": [
          "customTag"
        ],
        "summary": "Get a Custom Tag by Id",
        "description": "",
        "operationId": "getCustomTag",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customTagId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        }
      },
      "delete": {
        "tags": [
          "customTag"
        ],
        "summary": "Delete a customTag by id",
        "description": "",
        "operationId": "deleteCustomTag",
        "consumes": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customTagId",
            "in": "path",
            "required": true,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "default": {
            "description": "successful operation"
          }
        }
      }
    },
    "/customTag/name/{customTagName}": {
      "get": {
        "tags": [
          "customTag"
        ],
        "summary": "Get a Custom Tag by name",
        "description": "",
        "operationId": "getCustomTagByName",
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "name": "customTagName",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        }
      }
    },
    "/customTag": {
      "get": {
        "tags": [
          "customTag"
        ],
        "summary": "Get all available Custom Tags",
        "description": "",
        "operationId": "getAllCustomTags",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomTag"
              }
            }
          }
        }
      },
      "post": {
        "tags": [
          "customTag"
        ],
        "summary": "Create a CustomTag",
        "description": "",
        "operationId": "saveCustomTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        }
      },
      "put": {
        "tags": [
          "customTag"
        ],
        "summary": "update a CustomTag",
        "description": "",
        "operationId": "updateCustomTag",
        "consumes": [
          "application/json"
        ],
        "produces": [
          "application/json"
        ],
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "$ref": "#/definitions/CustomTag"
            }
          }
        }
      }
    },
    "/customTag/user": {
      "get": {
        "tags": [
          "customTag"
        ],
        "summary": "Get all Custom Tags by User",
        "description": "",
        "operationId": "getCustomTagsByUser",
        "produces": [
          "application/json"
        ],
        "parameters": [],
        "responses": {
          "200": {
            "description": "successful operation",
            "schema": {
              "type": "array",
              "items": {
                "$ref": "#/definitions/CustomTag"
              }
            }
          }
        }
      }
    }
  },
  "definitions": {
    "Ansible": {
      "allOf": [
        {
          "$ref": "#/definitions/Package"
        },
        {
          "type": "object",
          "properties": {
            "playbook": {
              "type": "string"
            }
          }
        }
      ]
    },
    "Chef": {
      "allOf": [
        {
          "$ref": "#/definitions/Package"
        },
        {
          "type": "object",
          "properties": {}
        }
      ]
    },
    "ChefServerRunList": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "environment": {
          "type": "string"
        },
        "items": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ChefServerRunListItem"
          }
        }
      }
    },
    "ChefServerRunListItem": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "item": {
          "type": "string"
        },
        "sequence": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "Package": {
      "type": "object",
      "discriminator": "type",
      "properties": {
        "packageName": {
          "type": "string",
          "description": "Name of the package"
        },
        "type": {
          "type": "string"
        },
        "packageVersion": {
          "type": "string",
          "description": "Version of the package"
        },
        "accessToken": {
          "type": "string",
          "description": "Access token to download package from URL.Required for private repos"
        },
        "attributes": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/PackageAttribute"
          }
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "decryptedAccessToken": {
          "type": "string"
        },
        "defaultPackage": {
          "type": "boolean",
          "description": "If package is managed By REAN Cloud"
        },
        "deleted": {
          "type": "boolean",
          "description": "Deleted Flag"
        },
        "dependentPackages": {
          "type": "array",
          "description": "Dependent Packages",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/Package"
          }
        },
        "dependentPackagesSet": {
          "type": "array",
          "description": "List Dependent Packages names",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "description": {
          "type": "string",
          "description": "Description of the package"
        },
        "dnVersion": {
          "type": "string",
          "description": "REAN Deploy version"
        },
        "downloadUrl": {
          "type": "string",
          "description": "The URL to download the package on provisioning VM"
        },
        "groupName": {
          "type": "string"
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "released": {
          "type": "boolean",
          "description": "true if package is release"
        },
        "repoType": {
          "type": "string"
        },
        "subType": {
          "type": "string",
          "description": "sub type of package"
        },
        "unzippedName": {
          "type": "string",
          "description": "The folder name in which the package contents are extracted on provisioning VM"
        },
        "visible": {
          "type": "boolean",
          "description": "List of Dependent Packages names"
        },
        "zipFileName": {
          "type": "string",
          "description": "The name with which the download package archive should be saved on provisioning VM"
        }
      }
    },
    "PackageAttribute": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the PackageAttribute."
        },
        "type": {
          "type": "string",
          "description": "Name of the PackageAttribute.",
          "enum": [
            "STRING",
            "JSON",
            "JSONARRAY",
            "STRINGARRAY",
            "BOOLEAN",
            "TEXT",
            "INT"
          ]
        },
        "defaultJson": {
          "type": "array",
          "description": "Applicable only if type is JSON/JSONARRAY",
          "items": {
            "type": "object"
          }
        },
        "defaultValue": {
          "type": "string",
          "description": "default Value for the PackageAttribute."
        },
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "possibleValues": {
          "type": "string",
          "description": "possibleValues from which one of them can be set as value for EnvPackageAttribute"
        },
        "possibleValuesSet": {
          "type": "array",
          "description": "List of possible values",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "required": {
          "type": "boolean",
          "description": "true if it is required attribute"
        },
        "sampleValue": {
          "type": "string",
          "description": "sample Value from which one can set value for EnvPackageAttribute"
        },
        "secure": {
          "type": "boolean",
          "description": "true if it is secured attribute like password/secret keys"
        }
      }
    },
    "Puppet": {
      "allOf": [
        {
          "$ref": "#/definitions/Package"
        },
        {
          "type": "object",
          "properties": {
            "execValue": {
              "type": "string"
            },
            "installModule": {
              "type": "boolean"
            },
            "manifestFile": {
              "type": "string"
            }
          }
        }
      ]
    },
    "ChefServer": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "CHEF",
            "OPSWORKS",
            "ENTERPRISE_CHEF"
          ]
        },
        "hostName": {
          "type": "string"
        },
        "organization": {
          "type": "string"
        },
        "client": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastPackageSync": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "CustomTag": {
      "type": "object",
      "required": [
        "name",
        "tags"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Unique name for Custom Tag"
        },
        "description": {
          "type": "string",
          "description": "Description for Custom Tag"
        },
        "tags": {
          "type": "object",
          "example": "{\"Environment\":\"Testing\",\"Name\":\"Test\"}",
          "description": "Tags json for Custom Tag"
        }
      }
    },
    "EnvConfig": {
      "type": "object",
      "properties": {
        "preDeployScript": {
          "type": "string",
          "description": "The bash script to run before deploy, this script will run before deploying deployment"
        },
        "postDeployScript": {
          "type": "string",
          "description": "The bash script to run after deploy, this script will run after deploying the deployment"
        },
        "preDestroyScript": {
          "type": "string",
          "description": "The bash script to run before destroy, this script will run before destroying the deployment"
        },
        "postDestroyScript": {
          "type": "string",
          "description": "The bash script to run after destroy, this script will run after destroying the deployment"
        },
        "envId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of Environment of current deployment"
        }
      }
    },
    "Environment": {
      "type": "object",
      "required": [
        "connectionId",
        "description",
        "envVersion",
        "name",
        "provider"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Unique name of environment"
        },
        "description": {
          "type": "string",
          "description": "Description of environment"
        },
        "provider": {
          "description": "Default provider to deploy an environment",
          "$ref": "#/definitions/SaveProvider"
        },
        "connectionId": {
          "type": "integer",
          "format": "int32",
          "description": "Default connection to configure compute resources in an Environment"
        },
        "chefServerId": {
          "type": "integer",
          "format": "int32",
          "description": "Chef Server Id (Only when REAN Deploy is configured for Chefserver)"
        },
        "chefEnvironment": {
          "type": "string",
          "description": "Chef Environment (Only when REAN Deploy is configured for Chefserver)"
        },
        "region": {
          "type": "string",
          "description": "Region into which environment resources should be launched. Defaults to set Provider region if any"
        },
        "envVersion": {
          "type": "string",
          "description": "Version of the environment"
        },
        "baseEnvId": {
          "type": "integer",
          "format": "int32",
          "description": "Base version enviroment id"
        },
        "released": {
          "type": "boolean",
          "description": "Flag to Release environment"
        },
        "blueprintDepStatus": {
          "type": "string",
          "description": "Blueprint Deployment status"
        },
        "restartBlueprint": {
          "type": "boolean",
          "description": "Restart Blueprint Deployment",
          "enum": [
            true,
            false
          ]
        },
        "status": {
          "type": "string"
        },
        "refEnvId": {
          "type": "string",
          "description": "The environment id from which it is copied"
        },
        "config": {
          "description": "Environment Configuration Object",
          "$ref": "#/definitions/EnvConfig"
        },
        "customTag": {
          "description": "Custom tag for environment",
          "$ref": "#/definitions/CustomTag"
        },
        "terraformVersion": {
          "type": "string",
          "description": "Terraform version with environment is created"
        },
        "public": {
          "type": "boolean"
        }
      }
    },
    "JsonNode": {
      "type": "object",
      "properties": {
        "containerNode": {
          "type": "boolean"
        },
        "missingNode": {
          "type": "boolean"
        },
        "object": {
          "type": "boolean"
        },
        "valueNode": {
          "type": "boolean"
        },
        "floatingPointNumber": {
          "type": "boolean"
        },
        "pojo": {
          "type": "boolean"
        },
        "integralNumber": {
          "type": "boolean"
        },
        "short": {
          "type": "boolean"
        },
        "int": {
          "type": "boolean"
        },
        "long": {
          "type": "boolean"
        },
        "double": {
          "type": "boolean"
        },
        "bigDecimal": {
          "type": "boolean"
        },
        "bigInteger": {
          "type": "boolean"
        },
        "textual": {
          "type": "boolean"
        },
        "boolean": {
          "type": "boolean"
        },
        "binary": {
          "type": "boolean"
        },
        "float": {
          "type": "boolean"
        },
        "nodeType": {
          "type": "string",
          "enum": [
            "ARRAY",
            "BINARY",
            "BOOLEAN",
            "MISSING",
            "NULL",
            "NUMBER",
            "OBJECT",
            "POJO",
            "STRING"
          ]
        },
        "number": {
          "type": "boolean"
        },
        "array": {
          "type": "boolean"
        },
        "null": {
          "type": "boolean"
        }
      }
    },
    "SaveProvider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "name": {
          "type": "string",
          "description": "Unique name for Provider"
        },
        "type": {
          "type": "string",
          "description": "The Provider Type. Please check allowed Values",
          "enum": [
            "aws",
            "digitalocean",
            "vsphere",
            "azurerm",
            "docker",
            "google",
            "opc",
            "dns"
          ]
        },
        "json": {
          "example": "{\"aws\":{\"access_key\":\"\",\"secret_key\":\"\",\"region\":\"us-east-1\"},\"google\":{\"region\":\"us-east1\",\"project\":\"\",\"credentials\":\"\"},\"digitalocean\":{\"token\":\"\"},\"vsphere\":{\"user\":\"\",\"password\":\"\",\"vsphere_server\":\"\",\"allow_unverified_ssl\":\"false\"},\"azure\":{\"subscription_id\":\"\",\"client_id\":\"\",\"client_secret\":\"\",\"tenant_id\":\"\"},\"docker\":{\"host\":\"\"},\"opc\":{\"user\":\"\",\"password\":\"\",\"identity_domain\":\"\",\"endpoint\":\"\"},\"dns\":{\"update\":[{\"server\":\"\",\"port\":53,\"key_name\":\"\",\"key_algorithm\":\"\",\"key_secret\":\"\"}]}}",
          "description": "write-Only Json with applicable key-value pair for provider type.Example lists all providers Json, choose one provider and set the Json value appropriately without provider type",
          "$ref": "#/definitions/JsonNode"
        }
      }
    },
    "EnvironmentParentHierarchy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "parents": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvironmentParentHierarchy"
          }
        }
      }
    },
    "AWSPrice": {
      "type": "object",
      "properties": {
        "onDemandPrice": {
          "type": "number",
          "format": "double"
        },
        "partialUpfront": {
          "type": "number",
          "format": "double"
        },
        "fullUpfront": {
          "type": "number",
          "format": "double"
        },
        "noUpfront": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "AWSPriceMap": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string"
        },
        "priceMap": {
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/AWSPrice"
          }
        }
      }
    },
    "EnvironmentPolicy": {
      "type": "object",
      "properties": {
        "envId": {
          "type": "integer",
          "format": "int32",
          "description": "Environment id"
        },
        "envPermission": {
          "type": "array",
          "description": "List allowed permissions on Environment",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "GroupDto": {
      "type": "object",
      "required": [
        "name"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "policies": {
          "type": "array",
          "items": {
            "type": "object"
          }
        }
      }
    },
    "deployment": {
      "type": "object",
      "required": [
        "deploymentName"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "deploymentName": {
          "type": "string",
          "description": "Name of the deployment. Unique for each environment"
        },
        "deploymentDescription": {
          "type": "string",
          "description": "Description of the deployment"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "inputJson": {
          "type": "string",
          "description": "Input variables JSON"
        },
        "tfRunId": {
          "type": "string",
          "description": "Terraform execution id"
        },
        "status": {
          "type": "string",
          "description": "Status of deployment",
          "readOnly": true
        },
        "destroyAfterMinutes": {
          "type": "integer",
          "format": "int32",
          "description": "A value in minutes to Automatically destroy deployment after a specified time"
        },
        "emailToNotify": {
          "type": "string",
          "description": "Email to receive notification of deployment status"
        },
        "deployMailTemplateName": {
          "type": "string",
          "description": "Name of Deploy mail template to receive notification about deployment status on specified mail"
        },
        "destroyMailTemplateName": {
          "type": "string",
          "description": "Name of Destroy mail template to receive notification about deployment status on specified mail"
        },
        "destroyFailedMailTemplateName": {
          "type": "string",
          "description": "Name of failed destroy mail template"
        },
        "emailForStatus": {
          "type": "string",
          "description": "Email to receive notification of deployment status"
        },
        "destroyToken": {
          "type": "string",
          "readOnly": true
        },
        "deployParentEnvironments": {
          "type": "boolean",
          "description": "Flag to deploy Parent environment before the current deployment"
        },
        "retriesRemaining": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "statusesForEmails": {
          "type": "string"
        },
        "connectionsMap": {
          "type": "object",
          "example": "{\"resourceName\" : \"connectionName\"}",
          "description": "Map of connections where key is the name of resource and value is the name or id of connection",
          "additionalProperties": {
            "type": "string"
          }
        },
        "connectionsDeploy": {
          "type": "string"
        },
        "parentDeploymentsMap": {
          "type": "object",
          "description": "Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment",
          "additionalProperties": {
            "type": "string"
          }
        },
        "parentDeployments": {
          "type": "string"
        },
        "provider": {
          "type": "string",
          "description": "Provider for deployment"
        },
        "region": {
          "type": "string",
          "description": "Region into which resources should be launched. Defaults to set Provider region if any."
        },
        "statusesForEmailSet": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        }
      }
    },
    "EnvPackage": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Name of the package.Must match the names from Package API/Model"
        },
        "sequence": {
          "type": "integer",
          "format": "int32",
          "description": "Order of the package in which it should execute"
        },
        "refPackageId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of Package from which it is copied. It is set only when using copy API"
        },
        "attributes": {
          "type": "array",
          "description": "Attributes and their values for package. Must match the attributes of package with the name from Package API/Model",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/EnvPackageAttr"
          }
        },
        "version": {
          "type": "string",
          "description": "Version of Package. Must match the version of package with the name from Package API/Model"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "EnvPackageAttr": {
      "type": "object",
      "required": [
        "name",
        "type"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Name of the Attribute"
        },
        "type": {
          "type": "string",
          "description": "Type of the Attribute"
        },
        "required": {
          "type": "boolean",
          "description": "If attribute value must be set"
        },
        "value": {
          "type": "string",
          "description": "Value of the attribute"
        },
        "secure": {
          "type": "boolean",
          "description": "Is this a secure attribute like password"
        },
        "possibleValues": {
          "type": "array",
          "description": "Possible values for the attribute.",
          "uniqueItems": true,
          "items": {
            "type": "string"
          }
        },
        "defaultValue": {
          "type": "string",
          "description": "default Value which can be fetched from Package API",
          "readOnly": true
        }
      },
      "description": "Must match the attributes of Package with the name from Package API/Model"
    },
    "EnvResource": {
      "type": "object",
      "required": [
        "name",
        "resourceName",
        "resourceType"
      ],
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource in an environment"
        },
        "resourceName": {
          "type": "string",
          "description": "Name of the resource defined by Terraform"
        },
        "connectionId": {
          "type": "integer",
          "format": "int32",
          "description": "Connection ID"
        },
        "attributes": {
          "type": "array",
          "description": "Attributes for the resource. Possible attribute name and type for resource should be fetched by resource API",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/EnvResourceAttr"
          }
        },
        "packages": {
          "type": "array",
          "description": "Packages for the environment resource. Possible package name and package attributes for resource should be fetched by package API",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/EnvPackage"
          }
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "count": {
          "type": "string"
        },
        "dependsOn": {
          "type": "string",
          "description": "Name of the other resource in same environment which should get deployed before the current resource"
        },
        "preventDestroy": {
          "type": "boolean",
          "description": "Flag for preventing the resource to be destroy"
        },
        "resourceType": {
          "type": "string",
          "description": "Resource type",
          "enum": [
            "RESOURCE",
            "DATA_SOURCE"
          ]
        },
        "ignoreChanges": {
          "type": "string"
        },
        "refEnvResourceId": {
          "type": "integer",
          "format": "int64",
          "description": "The resource ID from which this environment resource is copied.It is set only when copy API is used to create current environment",
          "readOnly": true
        },
        "shortName": {
          "type": "string",
          "readOnly": true
        },
        "customConnection": {
          "type": "string",
          "example": "{\"private_key\": \"${file('ssh_key')}\", \"user\": \"ubuntu\",\"type\": \"ssh\"}",
          "description": "Custom Connection to use for provisioning"
        },
        "positionX": {
          "type": "integer",
          "format": "int32",
          "description": "Position X on the canvas to display in UI.Can be set to zero if you want to use only API"
        },
        "positionY": {
          "type": "integer",
          "format": "int32",
          "description": "Position Y on the canvas to display in UI.Can be set to zero if you want to use only API"
        },
        "acceptPackages": {
          "type": "boolean",
          "description": "Not all resources can accept packages. Only a few resources like AWS instance, Null resource can accept packages",
          "readOnly": true
        },
        "countSupport": {
          "type": "boolean"
        },
        "lifecycleSupport": {
          "type": "boolean"
        },
        "dataSource": {
          "type": "boolean"
        }
      }
    },
    "EnvResourceAttr": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "name": {
          "type": "string",
          "description": "Name of the resource attribute"
        },
        "type": {
          "type": "string",
          "description": "Data type of resource attribute"
        },
        "required": {
          "type": "boolean",
          "description": "If attribute value must be set"
        },
        "value": {
          "type": "string",
          "description": "Value of the attribute"
        },
        "possibleValues": {
          "type": "array",
          "description": "Possible Values to set. Only one of the values should be set",
          "items": {
            "type": "object"
          }
        },
        "secure": {
          "type": "boolean",
          "description": "Flag to indicate value for the attribute is sensetive"
        },
        "sampleValue": {
          "type": "object",
          "description": "Sample Value to be set. Set the value depending on type"
        },
        "displayValue": {
          "type": "string"
        },
        "validValue": {
          "type": "object",
          "readOnly": true
        }
      },
      "description": "Must match the attributes of resource with the resourceName from Resource API/Model"
    },
    "EnvironmentSaveAll": {
      "type": "object",
      "required": [
        "environment"
      ],
      "properties": {
        "environment": {
          "description": "Environment to save",
          "$ref": "#/definitions/Environment"
        },
        "resourceNameChanges": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "resourcesToSave": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/EnvResource"
          }
        }
      }
    },
    "ResourceLink": {
      "type": "object",
      "properties": {
        "sourceId": {
          "type": "integer",
          "format": "int64"
        },
        "destId": {
          "type": "integer",
          "format": "int64"
        },
        "envId": {
          "type": "integer",
          "format": "int64"
        },
        "computed": {
          "type": "boolean"
        },
        "multiple": {
          "type": "boolean"
        }
      }
    },
    "StopRequestStatus": {
      "type": "object",
      "properties": {
        "returnCode": {
          "type": "integer",
          "format": "int32"
        },
        "status": {
          "type": "string"
        }
      }
    },
    "DeploymentConfigurationDto": {
      "type": "object",
      "required": [
        "deploymentName"
      ],
      "properties": {
        "deploymentName": {
          "type": "string",
          "description": "Name of Deployment. Unique for each environment"
        },
        "environmentId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of Environment which is getting deployed"
        },
        "inputJson": {
          "type": "string",
          "description": "Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments."
        },
        "parentDeployments": {
          "type": "object",
          "example": "{\"dependsOnName\" : \"DeploymentName\"}",
          "description": "Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.",
          "additionalProperties": {
            "type": "object"
          }
        },
        "deploymentDescription": {
          "type": "string",
          "description": "Description of deployment"
        },
        "providerName": {
          "type": "string",
          "description": "Name of the Provider which should be used for Deployment"
        },
        "customTag": {
          "description": "Custom tag for environment",
          "$ref": "#/definitions/CustomTag"
        },
        "region": {
          "type": "string",
          "description": "Region into which environment resources should be launched. Defaults to set Provider region if any"
        },
        "connections": {
          "type": "object",
          "example": "{\"resourceName\" : \"connectionName\"}",
          "description": "Map of connections where key is the name of resource and value is the name or id of connection",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "DeploymentConfiguration": {
      "type": "object",
      "required": [
        "deploymentName"
      ],
      "properties": {
        "deploymentId": {
          "type": "integer",
          "format": "int64",
          "readOnly": true
        },
        "deploymentName": {
          "type": "string",
          "description": "Name of Deployment. Unique for each environment"
        },
        "deploymentDescription": {
          "type": "string",
          "description": "Description of deployment"
        },
        "providerName": {
          "type": "string",
          "description": "Name of the Provider which should be used for Deployment"
        },
        "region": {
          "type": "string",
          "description": "Region into which environment resources should be launched. Defaults to set Provider region if any"
        },
        "connections": {
          "type": "object",
          "example": "{\"resourceName\" : \"connectionName\"}",
          "description": "Map of connections where key is the name of resource and value is the name or id of connection",
          "additionalProperties": {
            "type": "string"
          }
        },
        "parentDeployments": {
          "type": "object",
          "example": "{\"dependsOnName\" : \"DeploymentName\"}",
          "description": "Map of parent deployment where key is a name of \"Depends On\" resource and value is a name/id of the deployment for the parent environment.",
          "additionalProperties": {
            "type": "object"
          }
        },
        "inputJson": {
          "type": "string",
          "description": "Input variable JSON to override default values configured in \"Input Variable\" resource of the Environment. This input is used for parameterizing the environment deployments."
        },
        "environmentId": {
          "type": "integer",
          "format": "int32",
          "description": "Id of Environment which is getting deployed"
        },
        "destroyAfterMin": {
          "type": "integer",
          "format": "int32",
          "description": "A value in minutes to Automatically destroy deployment after a specified time"
        },
        "emailToNotify": {
          "type": "string",
          "description": "Email to receive notification about deployment status"
        },
        "deployEmailTemplateName": {
          "type": "string",
          "description": "Deploy mail template to receive notification about deployment status on specified mail",
          "enum": [
            "DeployTemplate.html"
          ]
        },
        "destroyEmailTemplateName": {
          "type": "string",
          "description": "Destroy mail template to receive notification about deployment status on specified mail",
          "enum": [
            "DestroyTemplate.html"
          ]
        },
        "deployParentEnvironments": {
          "type": "boolean",
          "description": "Flag to deploy parent environment before the current deployment"
        },
        "maxRetries": {
          "type": "integer",
          "format": "int64"
        },
        "statusesForMail": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "NEW",
              "DEPLOYING",
              "DEPLOYED",
              "DESTROYING",
              "DESTROYED",
              "FAILED"
            ]
          }
        },
        "parentDeployConfig": {
          "$ref": "#/definitions/DeploymentConfiguration"
        },
        "customTag": {
          "description": "Custom tag for environment",
          "$ref": "#/definitions/CustomTag"
        },
        "envVersionId": {
          "type": "integer",
          "format": "int32",
          "description": "The id of the environment in case the user wants to upgrade existing deployment with the newer version of an environment"
        }
      }
    },
    "TFPlanOutput": {
      "type": "object",
      "properties": {
        "runId": {
          "type": "string"
        },
        "logs": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TFResource"
          }
        }
      }
    },
    "TFResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "tags": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "otherAttributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "status": {
          "type": "string"
        },
        "refId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "TFExecutionStatus": {
      "type": "object",
      "properties": {
        "status": {
          "type": "string"
        },
        "returnCode": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "EnvironmentDestroy": {
      "type": "object",
      "properties": {
        "envDeployment": {
          "$ref": "#/definitions/deployment"
        },
        "environment": {
          "$ref": "#/definitions/Environment"
        },
        "destroyAllowed": {
          "type": "boolean"
        },
        "destroyDependentEnvironments": {
          "type": "boolean"
        }
      }
    },
    "Configuration used for copy+deploy API": {
      "type": "object",
      "properties": {
        "originalEnvironment": {
          "type": "string",
          "description": "The environment name from which copy should happen"
        },
        "newEnvironment": {
          "type": "string",
          "description": "The environment name the copy opeartion should create"
        },
        "newEnvDescription": {
          "type": "string",
          "description": "New environment description"
        },
        "newEnvConnection": {
          "type": "string",
          "description": "New environment connection name.Must match one of the names from GET Connection API"
        },
        "newEnvProvider": {
          "type": "string",
          "description": "New environment Provider name.Must match one of the names from GET Provider API"
        },
        "tags": {
          "type": "string",
          "description": "Tags or other input variables name and value JSON"
        },
        "copyParentEnvironments": {
          "type": "boolean",
          "description": "set true if it has to copy the parent environments of the original environment"
        },
        "dependsOnEnviroments": {
          "type": "string",
          "description": "key-value pairs of which environment name dependency should be changed to which name"
        }
      }
    },
    "CopyDeployConfig": {
      "type": "object",
      "properties": {
        "copyConfig": {
          "$ref": "#/definitions/Configuration used for copy+deploy API"
        },
        "deployConfig": {
          "$ref": "#/definitions/DeploymentConfiguration"
        }
      }
    },
    "ExportedEnvironment": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "connectionName": {
          "type": "string"
        },
        "connectionType": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "envVersion": {
          "type": "string"
        },
        "exportedByEmail": {
          "type": "string"
        },
        "exportedOn": {
          "type": "string",
          "format": "date-time"
        },
        "layout": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "postDeployScript": {
          "type": "string"
        },
        "postDestroyScript": {
          "type": "string"
        },
        "preDeployScript": {
          "type": "string"
        },
        "preDestroyScript": {
          "type": "string"
        },
        "providerName": {
          "type": "string"
        },
        "providerType": {
          "type": "string",
          "enum": [
            "aws",
            "digitalocean",
            "vsphere",
            "azurerm",
            "docker",
            "google",
            "opc",
            "dns"
          ]
        },
        "region": {
          "type": "string"
        },
        "resources": {
          "type": "array",
          "uniqueItems": true,
          "items": {
            "$ref": "#/definitions/ExportedResource"
          }
        },
        "type": {
          "type": "string"
        }
      }
    },
    "ExportedPackage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "version": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        }
      }
    },
    "ExportedResource": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "resourceName": {
          "type": "string"
        },
        "attributes": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          }
        },
        "connectionName": {
          "type": "string"
        },
        "connectionType": {
          "type": "string"
        },
        "count": {
          "type": "string"
        },
        "customConnection": {
          "type": "string"
        },
        "dependsOn": {
          "type": "string"
        },
        "ignoreChanges": {
          "type": "string"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedPackage"
          }
        },
        "positionX": {
          "type": "integer",
          "format": "int32"
        },
        "positionY": {
          "type": "integer",
          "format": "int32"
        },
        "preventDestroy": {
          "type": "boolean"
        },
        "resourceType": {
          "type": "string",
          "enum": [
            "RESOURCE",
            "DATA_SOURCE"
          ]
        }
      }
    },
    "BastionConnection": {
      "type": "object",
      "required": [
        "host",
        "user"
      ],
      "properties": {
        "user": {
          "type": "string",
          "description": "Bastion Connection UserName"
        },
        "host": {
          "type": "integer",
          "format": "int32",
          "description": "Bastion Connection Host IP"
        },
        "port": {
          "type": "integer",
          "format": "int32",
          "description": "Bastion Connection port number"
        },
        "vmConnectionId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "EnvironmentImport": {
      "type": "object",
      "properties": {
        "importConfig": {
          "$ref": "#/definitions/ImportConfig"
        },
        "exportedEnvironment": {
          "$ref": "#/definitions/ExportedEnvironment"
        }
      }
    },
    "ImportConfig": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "connectionId": {
          "type": "integer",
          "format": "int64"
        },
        "providerId": {
          "type": "integer",
          "format": "int64"
        },
        "region": {
          "type": "string"
        },
        "otherConnections": {
          "type": "object",
          "additionalProperties": {
            "type": "integer",
            "format": "int64"
          }
        },
        "chefServerId": {
          "type": "integer",
          "format": "int64"
        },
        "chefEnvironment": {
          "type": "string"
        },
        "envVersion": {
          "type": "string"
        },
        "selectableProviders": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Provider"
          }
        },
        "selectableConnections": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/VmConnection"
          }
        }
      }
    },
    "Provider": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "name": {
          "type": "string"
        },
        "type": {
          "type": "string",
          "enum": [
            "aws",
            "digitalocean",
            "vsphere",
            "azurerm",
            "docker",
            "google",
            "opc",
            "dns"
          ]
        }
      }
    },
    "VmConnection": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "createdBy": {
          "type": "integer",
          "format": "int32",
          "description": "Created By User(Id)",
          "readOnly": true
        },
        "modifiedBy": {
          "type": "integer",
          "format": "int32",
          "description": "Modified By User(Id)",
          "readOnly": true
        },
        "createdOn": {
          "type": "string",
          "format": "date",
          "description": "Created at Date Time",
          "readOnly": true
        },
        "modifiedOn": {
          "type": "string",
          "format": "date",
          "description": "Modified at Date Time",
          "readOnly": true
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "user": {
          "type": "string"
        },
        "port": {
          "type": "integer",
          "format": "int32"
        },
        "https": {
          "type": "boolean"
        },
        "insecure": {
          "type": "boolean"
        },
        "ntlm": {
          "type": "boolean"
        },
        "host": {
          "type": "string"
        },
        "bastionConnection": {
          "$ref": "#/definitions/BastionConnection"
        },
        "decryptedCacert": {
          "type": "string"
        }
      }
    },
    "BlueprintEnvImport": {
      "type": "object",
      "properties": {
        "environments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ExportedEnvironment"
          }
        },
        "rean_deploy_version": {
          "type": "string"
        },
        "packages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/Package"
          }
        }
      }
    },
    "ChefServerPackage": {
      "allOf": [
        {
          "$ref": "#/definitions/Package"
        },
        {
          "type": "object",
          "properties": {
            "chefEnvironments": {
              "type": "array",
              "uniqueItems": true,
              "items": {
                "type": "string"
              }
            },
            "chefServerId": {
              "type": "integer",
              "format": "int64"
            },
            "chefServerName": {
              "type": "string"
            },
            "runLists": {
              "type": "object",
              "additionalProperties": {
                "$ref": "#/definitions/ChefServerRunList"
              }
            }
          }
        }
      ]
    },
    "BlueprintImport": {
      "type": "object",
      "required": [
        "environmentImports"
      ],
      "properties": {
        "environmentImports": {
          "type": "array",
          "description": "Environment Import",
          "items": {
            "$ref": "#/definitions/EnvironmentImport"
          }
        },
        "packageImports": {
          "type": "array",
          "description": "If blueprint contains packages, this is necessary",
          "items": {
            "$ref": "#/definitions/Package"
          }
        }
      }
    },
    "DeploymentDetail": {
      "type": "object",
      "properties": {
        "deploymentName": {
          "type": "string"
        },
        "deploymentId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "ParentDeploymentMapping": {
      "type": "object",
      "required": [
        "dependsOnResourceName",
        "deployments",
        "selectedDeployments"
      ],
      "properties": {
        "dependsOnResourceName": {
          "type": "string",
          "description": "Name of the Depends On Resource of Environment"
        },
        "selectedDeployments": {
          "description": "Current Dependent Deployment for One Depends On Resource",
          "$ref": "#/definitions/DeploymentDetail"
        },
        "deployments": {
          "type": "array",
          "description": "List of Deployment name and id for Dependent environments",
          "items": {
            "$ref": "#/definitions/DeploymentDetail"
          }
        }
      }
    },
    "ChangedAttributeDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        }
      }
    },
    "ChangedPackageDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "oldSequence": {
          "type": "integer",
          "format": "int32"
        },
        "newSequence": {
          "type": "integer",
          "format": "int32"
        },
        "changeAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedAttributeDto"
          }
        }
      }
    },
    "ChangedResourceDto": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "changedAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedAttributeDto"
          }
        },
        "newPackages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removedPackages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "changedPackages": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedPackageDto"
          }
        }
      }
    },
    "EnvironmentDiffDto": {
      "type": "object",
      "properties": {
        "baseEnvironmentName": {
          "type": "string"
        },
        "targetEnvironmentName": {
          "type": "string"
        },
        "addedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "removedResources": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "changedResources": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ChangedResourceDto"
          }
        }
      }
    },
    "TFResourceAttrChangeLog": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "oldValue": {
          "type": "string"
        },
        "newValue": {
          "type": "string"
        }
      }
    },
    "TFResourceChangeLog": {
      "type": "object",
      "properties": {
        "resourceName": {
          "type": "string"
        },
        "resourceType": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/TFResourceAttrChangeLog"
          }
        },
        "resource": {
          "$ref": "#/definitions/TFResource"
        }
      }
    },
    "MultiSharePolicy": {
      "type": "object",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "sharePolicy": {
          "$ref": "#/definitions/SharePolicy"
        }
      }
    },
    "ShareGroupPermission": {
      "type": "object",
      "properties": {
        "group": {
          "$ref": "#/definitions/GroupDto"
        },
        "actions": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "VIEW",
              "EDIT",
              "CREATE",
              "DELETE",
              "DESTROY",
              "DEPLOY",
              "IMPORT",
              "EXPORT"
            ]
          }
        }
      }
    },
    "SharePolicy": {
      "type": "object",
      "properties": {
        "id": {
          "type": "integer",
          "format": "int64"
        },
        "permission": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/ShareGroupPermission"
          }
        }
      }
    },
    "NewPackageVersionDto": {
      "type": "object",
      "required": [
        "basePackageId",
        "downloadUrl",
        "newVersion",
        "unZipFileName",
        "zipFileName"
      ],
      "properties": {
        "basePackageId": {
          "type": "integer",
          "format": "int64",
          "description": "Base Package Id"
        },
        "newVersion": {
          "type": "string",
          "description": "New Version "
        },
        "downloadUrl": {
          "type": "string",
          "description": "DownlaodUrl For this version"
        },
        "zipFileName": {
          "type": "string",
          "description": "ZipFileName For this version"
        },
        "unZipFileName": {
          "type": "string",
          "description": "UnZippedFileName For this version"
        }
      }
    },
    "DNBlueprint": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "description": "Name of the Sub Category Catalog"
        },
        "shortName": {
          "type": "string",
          "description": "Short Name for resource"
        },
        "image": {
          "type": "string",
          "description": "image Url of the resource"
        }
      },
      "description": "This has predefined Blueprints.All these are for read-only."
    },
    "MultipleBlueprintImport": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "defaultconnection": {
          "type": "integer",
          "format": "int64"
        },
        "defaultprovider": {
          "type": "integer",
          "format": "int64"
        },
        "blueprints": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/DNBlueprint"
          }
        }
      }
    }
  }
}
