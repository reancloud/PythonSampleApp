#!/usr/bin/env groovy

def setJobProperties() {
  properties([
    [
      $class: 'BuildDiscarderProperty',
      strategy: [
        $class: 'BuildRotator',
        daysToKeep: 5,
        numToKeep: 10,
        artifactsDaysToKeep: 5,
        artifactsNumToKeep: 10
      ]
    ]
  ])
}

pipeline {
    agent {
        node {
            label 'master'
        }
    }
    parameters {
        string(defaultValue: '', description: 'Enter your QA_Release branch', name: 'BRANCH')
        string(defaultValue: '', description: 'Enter version number / git latest tag', name: 'VERSION_NUMBER')
    }
    stages {
        stage ('Build environment') {
            steps {
                script {
                    ansiColor('xterm') {
                        withPythonEnv('python') {
                            int exitCode = 0
                            try {
                                stage ('Cloning Rean-Managed-Cloud github repo') {
                                    echo "\u001B[34m\u001B[1mClonning Rean-Managed_Cloud repository\u001B[0m"
                                    try {
                                        dir ('rean-managed-cloud') {
                                            git branch: '$BRANCH',                        
                                            credentialsId: '186d9d54-a7dd-46f3-867b-926dd7a6fba1',
                                            changelog: false,
                                            poll: false,
                                            url: 'https://github.com/reancloud/REAN-Managed-Cloud.git'
                                        }
                                    } catch (Exception e) {
                                        println "\u001B[31mFailed to clone Rean-Managed-Cloud github repo\u001B[0m"
                                        sh 'exit 1'
                                    }
                                }
                                stage ('Cloning deploynow-blueprints github repo') {
                                    echo "\u001B[34m\u001B[1mClonning deploynow-blueprints repository\u001B[0m"
                                    try {
                                        dir ('deploynow-blueprints') {
                                            git branch: 'master',                        
                                            credentialsId: '186d9d54-a7dd-46f3-867b-926dd7a6fba1',
                                            changelog: false,
                                            poll: false,
                                            url: 'https://github.com/reancloud/deploynow-blueprints.git'
                                        }
                                    } catch (Exception e) {
                                        println "\u001B[31mFailed to clone deploynow-blueprints github repo\u001B[0m"
                                        sh 'exit 1'
                                    }
                                }
                                stage ('Code style linting') {
                                    echo "\u001B[34m\u001B[1mCode Style Linting\u001B[0m"
                                    try {
                                        sh '''
                                            #!/bin/bash
                                            cd rean-managed-cloud/
                                            set -e
                                            python3 -m pycodestyle --ignore=E501 */*.py
                                        '''
                                        println "\u001B[32mCode adheres to PyCodeStyle\u001B[0m"
                                    } catch (Exception e) {
                                        println "\u001B[31mCode style linting failed. Please fix the issues\u001B[0m"
                                        exitCode = 1
                                    }
                                }
                                stage ('Python linting') {
                                    echo "\u001B[34m\u001B[1mPython linting\u001B[0m"
                                    try {
                                        sh '''
                                            #!/bin/bash
                                            cd rean-managed-cloud/
                                            set -e
                                            python3 -m pylint --disable=line-too-long --disable=too-many-arguments --disable=unused-argument --disable=too-many-locals --output-format=colorized */*.py
                                        '''
                                        println "\u001B[32mCode adheres to PyLint\u001B[0m"
                                    } catch (Exception e) {
                                        println "\u001B[31mPython linting warning. Please fix the issues\u001B[0m"
                                        exitCode = 1
                                    }
                                }
                                stage ('Making required zip files') {
                                    echo "\u001B[34m\u001B[1mMaking required zip files\u001B[0m"
                                    try {
                                        sh '''
                                            #!/bin/bash
                                            mkdir rean-mnc-email-notifier
                                            cp rean-managed-cloud/notifiers/email/* rean-mnc-email-notifier/
                                            cp -R rean-managed-cloud/common/ rean-mnc-email-notifier/
                                            wget https://pypi.python.org/packages/90/61/f820ff0076a2599dd39406dcb858ecb239438c02ce706c8e91131ab9c7f1/Jinja2-2.9.6.tar.gz#md5=6411537324b4dba0956aaa8109f3c77b
                                            tar xvzf Jinja2-2.9.6.tar.gz
                                            cp -R Jinja2-2.9.6/ rean-mnc-email-notifier/
                                            wget https://pypi.python.org/packages/4d/de/32d741db316d8fdb7680822dd37001ef7a448255de9699ab4bfcbdf4172b/MarkupSafe-1.0.tar.gz
                                            tar xvzf MarkupSafe-1.0.tar.gz
                                            cp -R MarkupSafe-1.0/ rean-mnc-email-notifier/
                                            wget https://pypi.python.org/packages/4a/85/db5a2df477072b2902b0eb892feb37d88ac635d36245a72a6a69b23b383a/PyYAML-3.12.tar.gz#md5=4c129761b661d181ebf7ff4eb2d79950
                                            tar xvzf PyYAML-3.12.tar.gz
                                            cp -R PyYAML-3.12/ rean-mnc-email-notifier/
                                            cd rean-mnc-email-notifier/

                                            #notifier email zip
                                            zip -r rean-mnc-email-notifier-$VERSION_NUMBER.zip .

                                            cd ..
                                            cd rean-managed-cloud/

                                            #rule processor zip
                                            zip -r rean-mnc-rule-processor-$VERSION_NUMBER.zip . -x ".git/*"

                                            RULE_FOLDERS=`ls -l -ICI-CD -Icommon -Inotifiers -Itests | grep ^d | awk '{ print $9 }'`
                                            cd ..
                                            mkdir rean-mnc-blueprints
                                            mkdir rean-mnc-blueprints/rules
                                            cp -R deploynow-blueprints/REAN-Platform/REAN-Managed-Cloud/rule-processor/ rean-mnc-blueprints/
                                            for RULE_FOLDER in $RULE_FOLDERS
                                            do
                                                find deploynow-blueprints/REAN-Platform/REAN-Managed-Cloud/rules/ -name "*$RULE_FOLDER*" -exec cp -t rean-mnc-blueprints/rules/ {} +
                                            done

                                            cd rean-mnc-blueprints/
                                            zip -r rean-mnc-blueprints-$VERSION_NUMBER.zip .
                                        '''
                                    } catch (Exception e) {
                                        println "\u001B[31mFailed to make the required zip files\u001B[0m"
                                        exitCode = 1
                                    }
                                }
                                stage ('Pytest and Code coverage') {
                                    try {
                                        sh '''
                                            #!/bin/bash
                                            cd rean-managed-cloud/
                                            touch $VERSION_NUMBER
                                            RULE_FOLDERS=`ls -l -ICI-CD -Icommon -Inotifiers -Itests | grep ^d | awk '{ print $9 }'`
                                            TOTAL_RULES=`ls -l -ICI-CD -Icommon -Inotifiers -Itests | grep ^d | awk '{ print $9 }' | wc -l`
                                            TOTAL_COVERAGE=0
                                            for RULE_FOLDER in $RULE_FOLDERS
                                            do
                                                python3 -m coverage run --source=$RULE_FOLDER/ -m pytest -s tests/$RULE_FOLDER/ || true
                                                COVERAGE=`coverage report -m | tail -1 | awk '{ print $4 }' | sed 's/%//'`
                                                echo "$COVERAGE"
                                                TOTAL_COVERAGE=`expr $TOTAL_COVERAGE + $COVERAGE`
                                            done
                                            AVERAGE_TOTAL_COVERAGE=`expr $TOTAL_COVERAGE / $TOTAL_RULES`
                                            echo "The total average coverage for all the rules: $AVERAGE_TOTAL_COVERAGE%"

                                            if [ "$AVERAGE_TOTAL_COVERAGE" -ge 90 ]; then
                                                cd ..
                                                aws s3 cp rean-managed-cloud/rean-mnc-rule-processor-$VERSION_NUMBER.zip s3://svc-rean-product-default-platform-artifacts/rean-mnc/qa/rean-mnc-$VERSION_NUMBER/rean-mnc-rule-processor-$VERSION_NUMBER.zip
                                                aws s3 cp rean-mnc-email-notifier/rean-mnc-email-notifier-$VERSION_NUMBER.zip s3://svc-rean-product-default-platform-artifacts/rean-mnc/qa/rean-mnc-$VERSION_NUMBER/rean-mnc-email-notifier-$VERSION_NUMBER.zip
                                                aws s3 cp rean-mnc-blueprints/rean-mnc-blueprints-$VERSION_NUMBER.zip s3://svc-rean-product-default-platform-artifacts/rean-mnc/qa/rean-mnc-$VERSION_NUMBER/rean-mnc-blueprints-$VERSION_NUMBER.zip
                                            else
                                                echo 'Coverage is not greater than or equal to 90%. Failed to upload the artifacts'
                                                exit 1
                                            fi
                                        '''
                                        println "\u001B[32mCode coverage ran successfully\u001B[0m"
                                    } catch (Exception e) {
                                        println "\u001B[31mCode Coverage and pytests failed.\u001B[0m"
                                        exitCode = 1
                                    }
                                }
                                sh "exit $exitCode"
                            } catch (Exception e) {
                                println "\u001B[31m\u001B[1mERROR: Continuous Integration PR pipeline failed\u001B[0m"
                                currentBuild.result = 'FAILURE'
                            }
                        }
                    }
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}