#!/usr/bin/env groovy

def setJobProperties() {
  properties([
    [
      $class: 'BuildDiscarderProperty',
      strategy: [
        $class: 'BuildRotator',
        daysToKeep: 5,
        numToKeep: 10,
        artifactsDaysToKeep: 5,
        artifactsNumToKeep: 10
      ]
    ]
  ])
}

pipeline {
    agent {
        node {
            label 'master'
        }
    }
    stages {
        stage ('Pytests and Code coverage') {
            steps {
                script {
                    ansiColor('xterm') {
                        println "\u001B[34m\u001B[1m*************************\u001B[0m"
                        println "\u001B[34m\u001B[1mPytests and Code coverage\u001B[0m"
                        println "\u001B[34m\u001B[1m*************************\u001B[0m"
                        try {
                            sh '''
                                #!/bin/bash
                                RULE_FOLDERS=`ls -l -ICI-CD -Icommon -Inotifiers -Itests | grep ^d | awk '{ print $9 }'`
                                TOTAL_RULES=`ls -l -ICI-CD -Icommon -Inotifiers -Itests | grep ^d | awk '{ print $9 }' | wc -l`
                                TOTAL_COVERAGE=0
                                for RULE_FOLDER in $RULE_FOLDERS
                                do
                                    python3 -m coverage run --source=$RULE_FOLDER/ -m pytest -s tests/$RULE_FOLDER/ || true
                                    COVERAGE=`coverage report -m | tail -1 | awk '{ print $4 }' | sed 's/%//'`
                                    echo "$COVERAGE"
                                    TOTAL_COVERAGE=`expr $TOTAL_COVERAGE + $COVERAGE`
                                done
                                AVERAGE_TOTAL_COVERAGE=`expr $TOTAL_COVERAGE / $TOTAL_RULES`
                                echo "The total average coverage for all the rules: $AVERAGE_TOTAL_COVERAGE%"
                                if [ "$AVERAGE_TOTAL_COVERAGE" -lt 90 ]; then
                                    echo 'Coverage is not greater than or equal to 90%. Fix Pytest errors'
                                    exit 1
                                fi
                            '''
                            println "\u001B[32mCode coverage ran sucessfully\u001B[0m"
                        } catch (Exception e) {
                            println "\u001B[31m********************************************************\u001B[0m"
                            println "\u001B[31mFAILED: Code coverage and Pytest failed. Fix the issues \u001B[0m"
                            println "\u001B[31m********************************************************\u001B[0m"
                            sh 'exit 1'
                        }
                    }   
                }
            }
        }
    }
    post {
        always {
            deleteDir()
        }
    }
}